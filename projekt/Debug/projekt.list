
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009880  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08009a08  08009a08  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a074  0800a074  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a07c  0800a07c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016534  20000088  0800a10c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200165bc  0800a10c  000265bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dad  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ca  00000000  00000000  00036e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001458  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  0003b388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233ec  00000000  00000000  0003c688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001150c  00000000  00000000  0005fa74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2c96  00000000  00000000  00070f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  00143c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080099f0 	.word	0x080099f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080099f0 	.word	0x080099f0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <CS43_Start>:

#include "CS43.h"
#include "stm32f4xx_hal.h"

void CS43_Start(I2C_HandleTypeDef* hi2c1)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af04      	add	r7, sp, #16
 80004f2:	6078      	str	r0, [r7, #4]
	uint8_t data[1];
	data[0] = 0x01;
 80004f4:	2301      	movs	r3, #1
 80004f6:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef status;

	//__HAL_UNLOCK(&hi2s3);
	//__HAL_I2S_ENABLE(&hi2s3);

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2110      	movs	r1, #16
 80004fc:	48bb      	ldr	r0, [pc, #748]	; (80007ec <CS43_Start+0x300>)
 80004fe:	f005 fe9f 	bl	8006240 <HAL_GPIO_WritePin>

	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x02, 1, data, 1, 100)) != HAL_OK);
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	9302      	str	r3, [sp, #8]
 8000506:	2301      	movs	r3, #1
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	2202      	movs	r2, #2
 8000514:	2194      	movs	r1, #148	; 0x94
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f005 fffe 	bl	8006518 <HAL_I2C_Mem_Write>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1ed      	bne.n	8000502 <CS43_Start+0x16>

	data[0] = 0x99;
 8000526:	2399      	movs	r3, #153	; 0x99
 8000528:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x00, 1, data, 1, 100)) != HAL_OK);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	9302      	str	r3, [sp, #8]
 800052e:	2301      	movs	r3, #1
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	2200      	movs	r2, #0
 800053c:	2194      	movs	r1, #148	; 0x94
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f005 ffea 	bl	8006518 <HAL_I2C_Mem_Write>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ed      	bne.n	800052a <CS43_Start+0x3e>
	data[0] = 0x99;
 800054e:	2399      	movs	r3, #153	; 0x99
 8000550:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x00, 1, data, 1, 100)) != HAL_OK);
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	2200      	movs	r2, #0
 8000564:	2194      	movs	r1, #148	; 0x94
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f005 ffd6 	bl	8006518 <HAL_I2C_Mem_Write>
 800056c:	4603      	mov	r3, r0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1ed      	bne.n	8000552 <CS43_Start+0x66>

	data[0]=0x80;
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x47, 1, data, 1, 100)) != HAL_OK);
 800057a:	2364      	movs	r3, #100	; 0x64
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	2247      	movs	r2, #71	; 0x47
 800058c:	2194      	movs	r1, #148	; 0x94
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f005 ffc2 	bl	8006518 <HAL_I2C_Mem_Write>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1ed      	bne.n	800057a <CS43_Start+0x8e>

	while ((status = HAL_I2C_Mem_Read(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	2232      	movs	r2, #50	; 0x32
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f006 f8aa 	bl	800670c <HAL_I2C_Mem_Read>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1ed      	bne.n	800059e <CS43_Start+0xb2>
	data[0] |= 0x80;
 80005c2:	7b3b      	ldrb	r3, [r7, #12]
 80005c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	2232      	movs	r2, #50	; 0x32
 80005de:	2194      	movs	r1, #148	; 0x94
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f005 ff99 	bl	8006518 <HAL_I2C_Mem_Write>
 80005e6:	4603      	mov	r3, r0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1ed      	bne.n	80005cc <CS43_Start+0xe0>

	while ((status = HAL_I2C_Mem_Read(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	2232      	movs	r2, #50	; 0x32
 8000602:	2194      	movs	r1, #148	; 0x94
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f006 f881 	bl	800670c <HAL_I2C_Mem_Read>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1ed      	bne.n	80005f0 <CS43_Start+0x104>
	data[0] &= ~(0x80);
 8000614:	7b3b      	ldrb	r3, [r7, #12]
 8000616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800061a:	b2db      	uxtb	r3, r3
 800061c:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	2232      	movs	r2, #50	; 0x32
 8000630:	2194      	movs	r1, #148	; 0x94
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f005 ff70 	bl	8006518 <HAL_I2C_Mem_Write>
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1ed      	bne.n	800061e <CS43_Start+0x132>

	data[0] = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x00, 1, data, 1, 100)) != HAL_OK);
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	2200      	movs	r2, #0
 8000658:	2194      	movs	r1, #148	; 0x94
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f005 ff5c 	bl	8006518 <HAL_I2C_Mem_Write>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1ed      	bne.n	8000646 <CS43_Start+0x15a>

	data[0] = 0x9E;
 800066a:	239e      	movs	r3, #158	; 0x9e
 800066c:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x02, 1, data, 1, 100)) != HAL_OK);
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2202      	movs	r2, #2
 8000680:	2194      	movs	r1, #148	; 0x94
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f005 ff48 	bl	8006518 <HAL_I2C_Mem_Write>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1ed      	bne.n	800066e <CS43_Start+0x182>

	data[0] = 175;
 8000692:	23af      	movs	r3, #175	; 0xaf
 8000694:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x04, 1, data, 1, 100)) != HAL_OK);
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	2204      	movs	r2, #4
 80006a8:	2194      	movs	r1, #148	; 0x94
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f005 ff34 	bl	8006518 <HAL_I2C_Mem_Write>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1ed      	bne.n	8000696 <CS43_Start+0x1aa>

	data[0]=(1<<7);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x05, 1, data, 1, 100)) != HAL_OK);
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	2205      	movs	r2, #5
 80006d0:	2194      	movs	r1, #148	; 0x94
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f005 ff20 	bl	8006518 <HAL_I2C_Mem_Write>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1ed      	bne.n	80006be <CS43_Start+0x1d2>

	while ((status = HAL_I2C_Mem_Read(hi2c1, 0x94, 0x06, 1, data, 1, 100)) != HAL_OK);
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2206      	movs	r2, #6
 80006f4:	2194      	movs	r1, #148	; 0x94
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f006 f808 	bl	800670c <HAL_I2C_Mem_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1ed      	bne.n	80006e2 <CS43_Start+0x1f6>
	data[0] &= (1 << 5);
 8000706:	7b3b      	ldrb	r3, [r7, #12]
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	b2db      	uxtb	r3, r3
 800070e:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 7);
 8000710:	7b3b      	ldrb	r3, [r7, #12]
 8000712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000716:	b2db      	uxtb	r3, r3
 8000718:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 6);
 800071a:	7b3b      	ldrb	r3, [r7, #12]
 800071c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000720:	b2db      	uxtb	r3, r3
 8000722:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 4);
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	f023 0310 	bic.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 2);
 800072e:	7b3b      	ldrb	r3, [r7, #12]
 8000730:	f023 0304 	bic.w	r3, r3, #4
 8000734:	b2db      	uxtb	r3, r3
 8000736:	733b      	strb	r3, [r7, #12]
	data[0] |= (1 << 2);
 8000738:	7b3b      	ldrb	r3, [r7, #12]
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	b2db      	uxtb	r3, r3
 8000740:	733b      	strb	r3, [r7, #12]
	data[0] |=  (3 << 0);
 8000742:	7b3b      	ldrb	r3, [r7, #12]
 8000744:	f043 0303 	orr.w	r3, r3, #3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x06, 1, data, 1, 100)) != HAL_OK);
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2206      	movs	r2, #6
 800075e:	2194      	movs	r1, #148	; 0x94
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f005 fed9 	bl	8006518 <HAL_I2C_Mem_Write>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1ed      	bne.n	800074c <CS43_Start+0x260>

	data[0]=0x02;
 8000770:	2302      	movs	r3, #2
 8000772:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x0E, 1, data, 1, 100)) != HAL_OK);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	220e      	movs	r2, #14
 8000786:	2194      	movs	r1, #148	; 0x94
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f005 fec5 	bl	8006518 <HAL_I2C_Mem_Write>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1ed      	bne.n	8000774 <CS43_Start+0x288>

	data[0] = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x0e, 1, data, 1, 100)) != HAL_OK);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	220e      	movs	r2, #14
 80007ae:	2194      	movs	r1, #148	; 0x94
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f005 feb1 	bl	8006518 <HAL_I2C_Mem_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1ed      	bne.n	800079c <CS43_Start+0x2b0>

	data[0] = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x14, 1, data, 1, 100)) != HAL_OK);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	2214      	movs	r2, #20
 80007d6:	2194      	movs	r1, #148	; 0x94
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f005 fe9d 	bl	8006518 <HAL_I2C_Mem_Write>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1ed      	bne.n	80007c4 <CS43_Start+0x2d8>
 80007e8:	e002      	b.n	80007f0 <CS43_Start+0x304>
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x15, 1, data, 1, 100)) != HAL_OK);
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	2301      	movs	r3, #1
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	2215      	movs	r2, #21
 8000802:	2194      	movs	r1, #148	; 0x94
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f005 fe87 	bl	8006518 <HAL_I2C_Mem_Write>
 800080a:	4603      	mov	r3, r0
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1ed      	bne.n	80007f0 <CS43_Start+0x304>
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x1A, 1, data, 1, 100)) != HAL_OK);
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	221a      	movs	r2, #26
 8000826:	2194      	movs	r1, #148	; 0x94
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f005 fe75 	bl	8006518 <HAL_I2C_Mem_Write>
 800082e:	4603      	mov	r3, r0
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1ed      	bne.n	8000814 <CS43_Start+0x328>
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x1B, 1, data, 1, 100)) != HAL_OK);
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	221b      	movs	r2, #27
 800084a:	2194      	movs	r1, #148	; 0x94
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f005 fe63 	bl	8006518 <HAL_I2C_Mem_Write>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ed      	bne.n	8000838 <CS43_Start+0x34c>

	data[0]= 0xAF;
 800085c:	23af      	movs	r3, #175	; 0xaf
 800085e:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x04, 1, data, 1, 100)) != HAL_OK);
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	2301      	movs	r3, #1
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2204      	movs	r2, #4
 8000872:	2194      	movs	r1, #148	; 0x94
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f005 fe4f 	bl	8006518 <HAL_I2C_Mem_Write>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ed      	bne.n	8000860 <CS43_Start+0x374>


}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <setVolume>:

void setVolume(I2C_HandleTypeDef* hi2c1, uint8_t v)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af04      	add	r7, sp, #16
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	int tVol = (v-50) * (127/50);
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	3b32      	subs	r3, #50	; 0x32
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status;

	data[0] = tVol;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	723b      	strb	r3, [r7, #8]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x14, 1, data, 1, 100)) != HAL_OK);
 80008a6:	2364      	movs	r3, #100	; 0x64
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2301      	movs	r3, #1
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2214      	movs	r2, #20
 80008b8:	2194      	movs	r1, #148	; 0x94
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f005 fe2c 	bl	8006518 <HAL_I2C_Mem_Write>
 80008c0:	4603      	mov	r3, r0
 80008c2:	72fb      	strb	r3, [r7, #11]
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1ed      	bne.n	80008a6 <setVolume+0x1a>
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x15, 1, data, 1, 100)) != HAL_OK);
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	2215      	movs	r2, #21
 80008dc:	2194      	movs	r1, #148	; 0x94
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f005 fe1a 	bl	8006518 <HAL_I2C_Mem_Write>
 80008e4:	4603      	mov	r3, r0
 80008e6:	72fb      	strb	r3, [r7, #11]
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1ed      	bne.n	80008ca <setVolume+0x3e>

	data[0] = (((v) > 100)? 24:((uint8_t)((((v) * 48) / 100) - 24)));
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	2b64      	cmp	r3, #100	; 0x64
 80008f2:	d80e      	bhi.n	8000912 <setVolume+0x86>
 80008f4:	78fa      	ldrb	r2, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <setVolume+0xdc>)
 8000900:	fb82 1203 	smull	r1, r2, r2, r3
 8000904:	1152      	asrs	r2, r2, #5
 8000906:	17db      	asrs	r3, r3, #31
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	3b18      	subs	r3, #24
 800090e:	b2db      	uxtb	r3, r3
 8000910:	e000      	b.n	8000914 <setVolume+0x88>
 8000912:	2318      	movs	r3, #24
 8000914:	723b      	strb	r3, [r7, #8]

	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x20, 1, data, 1, 100)) != HAL_OK);
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	2301      	movs	r3, #1
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	2220      	movs	r2, #32
 8000928:	2194      	movs	r1, #148	; 0x94
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f005 fdf4 	bl	8006518 <HAL_I2C_Mem_Write>
 8000930:	4603      	mov	r3, r0
 8000932:	72fb      	strb	r3, [r7, #11]
 8000934:	7afb      	ldrb	r3, [r7, #11]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1ed      	bne.n	8000916 <setVolume+0x8a>
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x21, 1, data, 1, 100)) != HAL_OK);
 800093a:	2364      	movs	r3, #100	; 0x64
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2301      	movs	r3, #1
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	2221      	movs	r2, #33	; 0x21
 800094c:	2194      	movs	r1, #148	; 0x94
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f005 fde2 	bl	8006518 <HAL_I2C_Mem_Write>
 8000954:	4603      	mov	r3, r0
 8000956:	72fb      	strb	r3, [r7, #11]
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1ed      	bne.n	800093a <setVolume+0xae>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	51eb851f 	.word	0x51eb851f

0800096c <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <DESELECT>:

static
inline void DESELECT(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000992:	bf00      	nop
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <xmit_spi+0x30>)
 8000996:	f008 fab1 	bl	8008efc <HAL_SPI_GetState>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d1f9      	bne.n	8000994 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80009a0:	1df9      	adds	r1, r7, #7
 80009a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80009a6:	2201      	movs	r2, #1
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <xmit_spi+0x30>)
 80009aa:	f007 ffd1 	bl	8008950 <HAL_SPI_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20016284 	.word	0x20016284

080009bc <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80009c2:	23ff      	movs	r3, #255	; 0xff
 80009c4:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80009ca:	bf00      	nop
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <rcvr_spi+0x38>)
 80009ce:	f008 fa95 	bl	8008efc <HAL_SPI_GetState>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d1f9      	bne.n	80009cc <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 80009d8:	1dba      	adds	r2, r7, #6
 80009da:	1df9      	adds	r1, r7, #7
 80009dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <rcvr_spi+0x38>)
 80009e6:	f008 f8e7 	bl	8008bb8 <HAL_SPI_TransmitReceive>

	return Data;
 80009ea:	79bb      	ldrb	r3, [r7, #6]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20016284 	.word	0x20016284

080009f8 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000a00:	f7ff ffdc 	bl	80009bc <rcvr_spi>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	701a      	strb	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <wait_ready+0x34>)
 8000a1c:	2232      	movs	r2, #50	; 0x32
 8000a1e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000a20:	f7ff ffcc 	bl	80009bc <rcvr_spi>
	do
		res = rcvr_spi();
 8000a24:	f7ff ffca 	bl	80009bc <rcvr_spi>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d004      	beq.n	8000a3c <wait_ready+0x28>
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <wait_ready+0x34>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f3      	bne.n	8000a24 <wait_ready+0x10>

	return res;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000a5 	.word	0x200000a5

08000a4c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000a52:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a56:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000a58:	f7ff ff8f 	bl	800097a <DESELECT>

	for (i = 0; i < 10; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e005      	b.n	8000a6e <power_on+0x22>
		xmit_spi(0xFF);
 8000a62:	20ff      	movs	r0, #255	; 0xff
 8000a64:	f7ff ff90 	bl	8000988 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	d9f6      	bls.n	8000a62 <power_on+0x16>

	SELECT();
 8000a74:	f7ff ff7a 	bl	800096c <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000a8c:	2395      	movs	r3, #149	; 0x95
 8000a8e:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]
 8000a94:	e00b      	b.n	8000aae <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	f107 0210 	add.w	r2, r7, #16
 8000a9c:	4413      	add	r3, r2
 8000a9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff70 	bl	8000988 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d9f0      	bls.n	8000a96 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000ab4:	e002      	b.n	8000abc <power_on+0x70>
		Count--;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000abc:	f7ff ff7e 	bl	80009bc <rcvr_spi>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d002      	beq.n	8000acc <power_on+0x80>
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f4      	bne.n	8000ab6 <power_on+0x6a>

	DESELECT();
 8000acc:	f7ff ff55 	bl	800097a <DESELECT>
	xmit_spi(0XFF);
 8000ad0:	20ff      	movs	r0, #255	; 0xff
 8000ad2:	f7ff ff59 	bl	8000988 <xmit_spi>

	PowerFlag = 1;
 8000ad6:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <power_on+0x98>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000a7 	.word	0x200000a7

08000ae8 <power_off>:

static
void power_off(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <power_off+0x14>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	200000a7 	.word	0x200000a7

08000b00 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <chk_power+0x14>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200000a7 	.word	0x200000a7

08000b18 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <rcvr_datablock+0x68>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000b28:	f7ff ff48 	bl	80009bc <rcvr_spi>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2bff      	cmp	r3, #255	; 0xff
 8000b34:	d104      	bne.n	8000b40 <rcvr_datablock+0x28>
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <rcvr_datablock+0x68>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f3      	bne.n	8000b28 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2bfe      	cmp	r3, #254	; 0xfe
 8000b44:	d001      	beq.n	8000b4a <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000b46:	2300      	movs	r3, #0
 8000b48:	e016      	b.n	8000b78 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff51 	bl	80009f8 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff4b 	bl	80009f8 <rcvr_spi_m>
	} while (btr -= 2);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b02      	subs	r3, #2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ed      	bne.n	8000b4a <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000b6e:	f7ff ff25 	bl	80009bc <rcvr_spi>
	rcvr_spi();
 8000b72:	f7ff ff23 	bl	80009bc <rcvr_spi>

	return TRUE; /* Return with success */
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000a4 	.word	0x200000a4

08000b84 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000b94:	f7ff ff3e 	bl	8000a14 <wait_ready>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2bff      	cmp	r3, #255	; 0xff
 8000b9c:	d001      	beq.n	8000ba2 <xmit_datablock+0x1e>
		return FALSE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e040      	b.n	8000c24 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff feef 	bl	8000988 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000baa:	78fb      	ldrb	r3, [r7, #3]
 8000bac:	2bfd      	cmp	r3, #253	; 0xfd
 8000bae:	d031      	beq.n	8000c14 <xmit_datablock+0x90>
		wc = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fee3 	bl	8000988 <xmit_spi>
			xmit_spi(*buff++);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fedc 	bl	8000988 <xmit_spi>
		} while (--wc);
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	73bb      	strb	r3, [r7, #14]
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1eb      	bne.n	8000bb4 <xmit_datablock+0x30>

		rcvr_spi();
 8000bdc:	f7ff feee 	bl	80009bc <rcvr_spi>
		rcvr_spi();
 8000be0:	f7ff feec 	bl	80009bc <rcvr_spi>

		while (i <= 64) {
 8000be4:	e00b      	b.n	8000bfe <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000be6:	f7ff fee9 	bl	80009bc <rcvr_spi>
 8000bea:	4603      	mov	r3, r0
 8000bec:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d006      	beq.n	8000c06 <xmit_datablock+0x82>
				break;
			i++;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	2b40      	cmp	r3, #64	; 0x40
 8000c02:	d9f0      	bls.n	8000be6 <xmit_datablock+0x62>
 8000c04:	e000      	b.n	8000c08 <xmit_datablock+0x84>
				break;
 8000c06:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000c08:	bf00      	nop
 8000c0a:	f7ff fed7 	bl	80009bc <rcvr_spi>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0fa      	beq.n	8000c0a <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	2b05      	cmp	r3, #5
 8000c1c:	d101      	bne.n	8000c22 <xmit_datablock+0x9e>
		return TRUE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <xmit_datablock+0xa0>
	else
		return FALSE;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000c38:	f7ff feec 	bl	8000a14 <wait_ready>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d001      	beq.n	8000c46 <send_cmd+0x1a>
		return 0xFF;
 8000c42:	23ff      	movs	r3, #255	; 0xff
 8000c44:	e040      	b.n	8000cc8 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe9d 	bl	8000988 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	0e1b      	lsrs	r3, r3, #24
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe97 	bl	8000988 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe91 	bl	8000988 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fe8b 	bl	8000988 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fe86 	bl	8000988 <xmit_spi>
	n = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b40      	cmp	r3, #64	; 0x40
 8000c84:	d101      	bne.n	8000c8a <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000c86:	2395      	movs	r3, #149	; 0x95
 8000c88:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b48      	cmp	r3, #72	; 0x48
 8000c8e:	d101      	bne.n	8000c94 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000c90:	2387      	movs	r3, #135	; 0x87
 8000c92:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe76 	bl	8000988 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b4c      	cmp	r3, #76	; 0x4c
 8000ca0:	d101      	bne.n	8000ca6 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000ca2:	f7ff fe8b 	bl	80009bc <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000caa:	f7ff fe87 	bl	80009bc <rcvr_spi>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da05      	bge.n	8000cc6 <send_cmd+0x9a>
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f1      	bne.n	8000caa <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e0d5      	b.n	8000e90 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000ce4:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <disk_initialize+0x1c8>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <disk_initialize+0x1c8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	e0ca      	b.n	8000e90 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000cfa:	f7ff fea7 	bl	8000a4c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8000cfe:	f7ff fe35 	bl	800096c <SELECT>
	ty = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000d06:	2100      	movs	r1, #0
 8000d08:	2040      	movs	r0, #64	; 0x40
 8000d0a:	f7ff ff8f 	bl	8000c2c <send_cmd>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	f040 80a5 	bne.w	8000e60 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000d16:	4b61      	ldr	r3, [pc, #388]	; (8000e9c <disk_initialize+0x1cc>)
 8000d18:	2264      	movs	r2, #100	; 0x64
 8000d1a:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d20:	2048      	movs	r0, #72	; 0x48
 8000d22:	f7ff ff83 	bl	8000c2c <send_cmd>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d158      	bne.n	8000dde <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e00c      	b.n	8000d4c <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8000d32:	7bfc      	ldrb	r4, [r7, #15]
 8000d34:	f7ff fe42 	bl	80009bc <rcvr_spi>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4423      	add	r3, r4
 8000d42:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d9ef      	bls.n	8000d32 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8000d52:	7abb      	ldrb	r3, [r7, #10]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	f040 8083 	bne.w	8000e60 <disk_initialize+0x190>
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	2baa      	cmp	r3, #170	; 0xaa
 8000d5e:	d17f      	bne.n	8000e60 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8000d60:	2100      	movs	r1, #0
 8000d62:	2077      	movs	r0, #119	; 0x77
 8000d64:	f7ff ff62 	bl	8000c2c <send_cmd>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d807      	bhi.n	8000d7e <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8000d6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d72:	2069      	movs	r0, #105	; 0x69
 8000d74:	f7ff ff5a 	bl	8000c2c <send_cmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8000d7e:	4b47      	ldr	r3, [pc, #284]	; (8000e9c <disk_initialize+0x1cc>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1eb      	bne.n	8000d60 <disk_initialize+0x90>
 8000d88:	e000      	b.n	8000d8c <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8000d8a:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <disk_initialize+0x1cc>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d064      	beq.n	8000e60 <disk_initialize+0x190>
 8000d96:	2100      	movs	r1, #0
 8000d98:	207a      	movs	r0, #122	; 0x7a
 8000d9a:	f7ff ff47 	bl	8000c2c <send_cmd>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d15d      	bne.n	8000e60 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e00c      	b.n	8000dc4 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000daa:	7bfc      	ldrb	r4, [r7, #15]
 8000dac:	f7ff fe06 	bl	80009bc <rcvr_spi>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4423      	add	r3, r4
 8000dba:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9ef      	bls.n	8000daa <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000dca:	7a3b      	ldrb	r3, [r7, #8]
 8000dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <disk_initialize+0x108>
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	e000      	b.n	8000dda <disk_initialize+0x10a>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	73bb      	strb	r3, [r7, #14]
 8000ddc:	e040      	b.n	8000e60 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000dde:	2100      	movs	r1, #0
 8000de0:	2077      	movs	r0, #119	; 0x77
 8000de2:	f7ff ff23 	bl	8000c2c <send_cmd>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d808      	bhi.n	8000dfe <disk_initialize+0x12e>
 8000dec:	2100      	movs	r1, #0
 8000dee:	2069      	movs	r0, #105	; 0x69
 8000df0:	f7ff ff1c 	bl	8000c2c <send_cmd>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d801      	bhi.n	8000dfe <disk_initialize+0x12e>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e000      	b.n	8000e00 <disk_initialize+0x130>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10e      	bne.n	8000e26 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2077      	movs	r0, #119	; 0x77
 8000e0c:	f7ff ff0e 	bl	8000c2c <send_cmd>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d80e      	bhi.n	8000e34 <disk_initialize+0x164>
 8000e16:	2100      	movs	r1, #0
 8000e18:	2069      	movs	r0, #105	; 0x69
 8000e1a:	f7ff ff07 	bl	8000c2c <send_cmd>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d107      	bne.n	8000e34 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000e24:	e00d      	b.n	8000e42 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000e26:	2100      	movs	r1, #0
 8000e28:	2041      	movs	r0, #65	; 0x41
 8000e2a:	f7ff feff 	bl	8000c2c <send_cmd>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <disk_initialize+0x1cc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1e1      	bne.n	8000e02 <disk_initialize+0x132>
 8000e3e:	e000      	b.n	8000e42 <disk_initialize+0x172>
						break; /* CMD1 */
 8000e40:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <disk_initialize+0x1cc>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <disk_initialize+0x18c>
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	2050      	movs	r0, #80	; 0x50
 8000e52:	f7ff feeb 	bl	8000c2c <send_cmd>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <disk_initialize+0x190>
				ty = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <disk_initialize+0x1d0>)
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8000e66:	f7ff fd88 	bl	800097a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000e6a:	f7ff fda7 	bl	80009bc <rcvr_spi>

	if (ty) /* Initialization succeded */
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d008      	beq.n	8000e86 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <disk_initialize+0x1c8>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <disk_initialize+0x1c8>)
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e001      	b.n	8000e8a <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8000e86:	f7ff fe2f 	bl	8000ae8 <power_off>

	return Stat;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <disk_initialize+0x1c8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	200000a4 	.word	0x200000a4
 8000ea0:	200000a6 	.word	0x200000a6

08000ea4 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e002      	b.n	8000ebe <disk_status+0x1a>
	return Stat;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <disk_status+0x28>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <disk_read+0x1c>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <disk_read+0x20>
		return RES_PARERR;
 8000eec:	2304      	movs	r3, #4
 8000eee:	e051      	b.n	8000f94 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <disk_read+0xcc>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <disk_read+0x32>
		return RES_NOTRDY;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e048      	b.n	8000f94 <disk_read+0xc4>

	if (!(CardType & 4))
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <disk_read+0xd0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000f14:	f7ff fd2a 	bl	800096c <SELECT>

	if (count == 1) { /* Single block read */
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d111      	bne.n	8000f42 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2051      	movs	r0, #81	; 0x51
 8000f22:	f7ff fe83 	bl	8000c2c <send_cmd>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d129      	bne.n	8000f80 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	f7ff fdf1 	bl	8000b18 <rcvr_datablock>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d021      	beq.n	8000f80 <disk_read+0xb0>
			count = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	e01e      	b.n	8000f80 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	2052      	movs	r0, #82	; 0x52
 8000f46:	f7ff fe71 	bl	8000c2c <send_cmd>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d117      	bne.n	8000f80 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f7ff fddf 	bl	8000b18 <rcvr_datablock>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00a      	beq.n	8000f76 <disk_read+0xa6>
					break;
				buff += 512;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f66:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1ed      	bne.n	8000f50 <disk_read+0x80>
 8000f74:	e000      	b.n	8000f78 <disk_read+0xa8>
					break;
 8000f76:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000f78:	2100      	movs	r1, #0
 8000f7a:	204c      	movs	r0, #76	; 0x4c
 8000f7c:	f7ff fe56 	bl	8000c2c <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000f80:	f7ff fcfb 	bl	800097a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000f84:	f7ff fd1a 	bl	80009bc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	200000a6 	.word	0x200000a6

08000fa4 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <disk_write+0x1c>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <disk_write+0x20>
		return RES_PARERR;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e06b      	b.n	800109c <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <disk_write+0x100>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <disk_write+0x32>
		return RES_NOTRDY;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e062      	b.n	800109c <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000fd6:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <disk_write+0x100>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <disk_write+0x44>
		return RES_WRPRT;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e059      	b.n	800109c <disk_write+0xf8>

	if (!(CardType & 4))
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <disk_write+0x104>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	025b      	lsls	r3, r3, #9
 8000ff8:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000ffa:	f7ff fcb7 	bl	800096c <SELECT>

	if (count == 1) { /* Single block write */
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d110      	bne.n	8001026 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	2058      	movs	r0, #88	; 0x58
 8001008:	f7ff fe10 	bl	8000c2c <send_cmd>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d13a      	bne.n	8001088 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8001012:	21fe      	movs	r1, #254	; 0xfe
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	f7ff fdb5 	bl	8000b84 <xmit_datablock>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d033      	beq.n	8001088 <disk_write+0xe4>
			count = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	e030      	b.n	8001088 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <disk_write+0x104>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	2077      	movs	r0, #119	; 0x77
 8001036:	f7ff fdf9 	bl	8000c2c <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	2057      	movs	r0, #87	; 0x57
 800103e:	f7ff fdf5 	bl	8000c2c <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	2059      	movs	r0, #89	; 0x59
 8001046:	f7ff fdf1 	bl	8000c2c <send_cmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d11b      	bne.n	8001088 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001050:	21fc      	movs	r1, #252	; 0xfc
 8001052:	68b8      	ldr	r0, [r7, #8]
 8001054:	f7ff fd96 	bl	8000b84 <xmit_datablock>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00a      	beq.n	8001074 <disk_write+0xd0>
					break;
				buff += 512;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001064:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ee      	bne.n	8001050 <disk_write+0xac>
 8001072:	e000      	b.n	8001076 <disk_write+0xd2>
					break;
 8001074:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8001076:	21fd      	movs	r1, #253	; 0xfd
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fd83 	bl	8000b84 <xmit_datablock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <disk_write+0xe4>
				count = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8001088:	f7ff fc77 	bl	800097a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800108c:	f7ff fc96 	bl	80009bc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	200000a6 	.word	0x200000a6

080010ac <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	603a      	str	r2, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	460b      	mov	r3, r1
 80010ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <disk_ioctl+0x1e>
		return RES_PARERR;
 80010c6:	2304      	movs	r3, #4
 80010c8:	e16a      	b.n	80013a0 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d127      	bne.n	8001126 <disk_ioctl+0x7a>
		switch (*ptr) {
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d00e      	beq.n	80010fc <disk_ioctl+0x50>
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d012      	beq.n	8001108 <disk_ioctl+0x5c>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11b      	bne.n	800111e <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 80010e6:	f7ff fd0b 	bl	8000b00 <chk_power>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <disk_ioctl+0x48>
				power_off(); /* Power off */
 80010f0:	f7ff fcfa 	bl	8000ae8 <power_off>
			res = RES_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80010fa:	e14f      	b.n	800139c <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80010fc:	f7ff fca6 	bl	8000a4c <power_on>
			res = RES_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001106:	e149      	b.n	800139c <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001108:	f7ff fcfa 	bl	8000b00 <chk_power>
 800110c:	4602      	mov	r2, r0
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	3301      	adds	r3, #1
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800111c:	e13e      	b.n	800139c <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 800111e:	2304      	movs	r3, #4
 8001120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001124:	e13a      	b.n	800139c <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8001126:	4ba0      	ldr	r3, [pc, #640]	; (80013a8 <disk_ioctl+0x2fc>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001134:	2303      	movs	r3, #3
 8001136:	e133      	b.n	80013a0 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001138:	f7ff fc18 	bl	800096c <SELECT>

		switch (ctrl) {
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	2b35      	cmp	r3, #53	; 0x35
 8001140:	f200 811d 	bhi.w	800137e <disk_ioctl+0x2d2>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <disk_ioctl+0xa0>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	080012e7 	.word	0x080012e7
 8001150:	08001225 	.word	0x08001225
 8001154:	080012d7 	.word	0x080012d7
 8001158:	0800137f 	.word	0x0800137f
 800115c:	0800137f 	.word	0x0800137f
 8001160:	0800137f 	.word	0x0800137f
 8001164:	0800137f 	.word	0x0800137f
 8001168:	0800137f 	.word	0x0800137f
 800116c:	0800137f 	.word	0x0800137f
 8001170:	0800137f 	.word	0x0800137f
 8001174:	0800137f 	.word	0x0800137f
 8001178:	0800137f 	.word	0x0800137f
 800117c:	0800137f 	.word	0x0800137f
 8001180:	0800137f 	.word	0x0800137f
 8001184:	0800137f 	.word	0x0800137f
 8001188:	0800137f 	.word	0x0800137f
 800118c:	0800137f 	.word	0x0800137f
 8001190:	0800137f 	.word	0x0800137f
 8001194:	0800137f 	.word	0x0800137f
 8001198:	0800137f 	.word	0x0800137f
 800119c:	0800137f 	.word	0x0800137f
 80011a0:	0800137f 	.word	0x0800137f
 80011a4:	0800137f 	.word	0x0800137f
 80011a8:	0800137f 	.word	0x0800137f
 80011ac:	0800137f 	.word	0x0800137f
 80011b0:	0800137f 	.word	0x0800137f
 80011b4:	0800137f 	.word	0x0800137f
 80011b8:	0800137f 	.word	0x0800137f
 80011bc:	0800137f 	.word	0x0800137f
 80011c0:	0800137f 	.word	0x0800137f
 80011c4:	0800137f 	.word	0x0800137f
 80011c8:	0800137f 	.word	0x0800137f
 80011cc:	0800137f 	.word	0x0800137f
 80011d0:	0800137f 	.word	0x0800137f
 80011d4:	0800137f 	.word	0x0800137f
 80011d8:	0800137f 	.word	0x0800137f
 80011dc:	0800137f 	.word	0x0800137f
 80011e0:	0800137f 	.word	0x0800137f
 80011e4:	0800137f 	.word	0x0800137f
 80011e8:	0800137f 	.word	0x0800137f
 80011ec:	0800137f 	.word	0x0800137f
 80011f0:	0800137f 	.word	0x0800137f
 80011f4:	0800137f 	.word	0x0800137f
 80011f8:	0800137f 	.word	0x0800137f
 80011fc:	0800137f 	.word	0x0800137f
 8001200:	0800137f 	.word	0x0800137f
 8001204:	0800137f 	.word	0x0800137f
 8001208:	0800137f 	.word	0x0800137f
 800120c:	0800137f 	.word	0x0800137f
 8001210:	0800137f 	.word	0x0800137f
 8001214:	0800137f 	.word	0x0800137f
 8001218:	080012f9 	.word	0x080012f9
 800121c:	0800131d 	.word	0x0800131d
 8001220:	08001341 	.word	0x08001341
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001224:	2100      	movs	r1, #0
 8001226:	2049      	movs	r0, #73	; 0x49
 8001228:	f7ff fd00 	bl	8000c2c <send_cmd>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80a9 	bne.w	8001386 <disk_ioctl+0x2da>
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2110      	movs	r1, #16
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fc6c 	bl	8000b18 <rcvr_datablock>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 809f 	beq.w	8001386 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	099b      	lsrs	r3, r3, #6
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10e      	bne.n	8001270 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001252:	7d7b      	ldrb	r3, [r7, #21]
 8001254:	b29a      	uxth	r2, r3
 8001256:	7d3b      	ldrb	r3, [r7, #20]
 8001258:	b29b      	uxth	r3, r3
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	3301      	adds	r3, #1
 8001264:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001266:	8bfb      	ldrh	r3, [r7, #30]
 8001268:	029a      	lsls	r2, r3, #10
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e02e      	b.n	80012ce <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001270:	7c7b      	ldrb	r3, [r7, #17]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	b2da      	uxtb	r2, r3
 8001278:	7dbb      	ldrb	r3, [r7, #22]
 800127a:	09db      	lsrs	r3, r3, #7
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8001282:	7d7b      	ldrb	r3, [r7, #21]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f003 0306 	and.w	r3, r3, #6
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001292:	3302      	adds	r3, #2
 8001294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001298:	7d3b      	ldrb	r3, [r7, #20]
 800129a:	099b      	lsrs	r3, r3, #6
 800129c:	b2db      	uxtb	r3, r3
 800129e:	b29a      	uxth	r2, r3
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80012ac:	7cbb      	ldrb	r3, [r7, #18]
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80012bc:	3301      	adds	r3, #1
 80012be:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80012c0:	8bfa      	ldrh	r2, [r7, #30]
 80012c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012c6:	3b09      	subs	r3, #9
 80012c8:	409a      	lsls	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80012d4:	e057      	b.n	8001386 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012e4:	e056      	b.n	8001394 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 80012e6:	f7ff fb95 	bl	8000a14 <wait_ready>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d14c      	bne.n	800138a <disk_ioctl+0x2de>
				res = RES_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012f6:	e048      	b.n	800138a <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 80012f8:	2100      	movs	r1, #0
 80012fa:	2049      	movs	r0, #73	; 0x49
 80012fc:	f7ff fc96 	bl	8000c2c <send_cmd>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d143      	bne.n	800138e <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8001306:	2110      	movs	r1, #16
 8001308:	6a38      	ldr	r0, [r7, #32]
 800130a:	f7ff fc05 	bl	8000b18 <rcvr_datablock>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03c      	beq.n	800138e <disk_ioctl+0x2e2>
				res = RES_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800131a:	e038      	b.n	800138e <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 800131c:	2100      	movs	r1, #0
 800131e:	204a      	movs	r0, #74	; 0x4a
 8001320:	f7ff fc84 	bl	8000c2c <send_cmd>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d133      	bne.n	8001392 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 800132a:	2110      	movs	r1, #16
 800132c:	6a38      	ldr	r0, [r7, #32]
 800132e:	f7ff fbf3 	bl	8000b18 <rcvr_datablock>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02c      	beq.n	8001392 <disk_ioctl+0x2e6>
				res = RES_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800133e:	e028      	b.n	8001392 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001340:	2100      	movs	r1, #0
 8001342:	207a      	movs	r0, #122	; 0x7a
 8001344:	f7ff fc72 	bl	8000c2c <send_cmd>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d117      	bne.n	800137e <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 800134e:	2300      	movs	r3, #0
 8001350:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001354:	e00b      	b.n	800136e <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8001356:	6a3c      	ldr	r4, [r7, #32]
 8001358:	1c63      	adds	r3, r4, #1
 800135a:	623b      	str	r3, [r7, #32]
 800135c:	f7ff fb2e 	bl	80009bc <rcvr_spi>
 8001360:	4603      	mov	r3, r0
 8001362:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001368:	3301      	adds	r3, #1
 800136a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800136e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001372:	2b03      	cmp	r3, #3
 8001374:	d9ef      	bls.n	8001356 <disk_ioctl+0x2aa>
				res = RES_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800137c:	e00a      	b.n	8001394 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 800137e:	2304      	movs	r3, #4
 8001380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001384:	e006      	b.n	8001394 <disk_ioctl+0x2e8>
			break;
 8001386:	bf00      	nop
 8001388:	e004      	b.n	8001394 <disk_ioctl+0x2e8>
			break;
 800138a:	bf00      	nop
 800138c:	e002      	b.n	8001394 <disk_ioctl+0x2e8>
			break;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <disk_ioctl+0x2e8>
			break;
 8001392:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8001394:	f7ff faf1 	bl	800097a <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8001398:	f7ff fb10 	bl	80009bc <rcvr_spi>
	}

	return res;
 800139c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	372c      	adds	r7, #44	; 0x2c
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	20000000 	.word	0x20000000

080013ac <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	36c55cc0 	.word	0x36c55cc0

080013c0 <displayInit>:
uint8_t page = 0;
char *titles[5];
char *dir = "/";

void displayInit()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af02      	add	r7, sp, #8
	ssd1306_Init();
 80013c6:	f003 fb29 	bl	8004a1c <ssd1306_Init>
	ssd1306_Fill(White);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f003 fb94 	bl	8004af8 <ssd1306_Fill>

	ssd1306_SetCursor(4, 2);
 80013d0:	2102      	movs	r1, #2
 80013d2:	2004      	movs	r0, #4
 80013d4:	f003 fcf4 	bl	8004dc0 <ssd1306_SetCursor>
	ssd1306_WriteString("E:/",Font_6x8,Black);
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <displayInit+0x94>)
 80013da:	2300      	movs	r3, #0
 80013dc:	ca06      	ldmia	r2, {r1, r2}
 80013de:	481e      	ldr	r0, [pc, #120]	; (8001458 <displayInit+0x98>)
 80013e0:	f003 fcc8 	bl	8004d74 <ssd1306_WriteString>

	scanDir(dir, titles, 5, page);
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <displayInit+0x9c>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <displayInit+0xa0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2205      	movs	r2, #5
 80013ee:	491d      	ldr	r1, [pc, #116]	; (8001464 <displayInit+0xa4>)
 80013f0:	f002 fc08 	bl	8003c04 <scanDir>

	for(int i = 15,j=0;i<=55;i+=10,j++)
 80013f4:	230f      	movs	r3, #15
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	e014      	b.n	8001428 <displayInit+0x68>
	{
		ssd1306_SetCursor(10, i);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4619      	mov	r1, r3
 8001404:	200a      	movs	r0, #10
 8001406:	f003 fcdb 	bl	8004dc0 <ssd1306_SetCursor>
		ssd1306_WriteString(titles[j],Font_6x8,Black);
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <displayInit+0xa4>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <displayInit+0x94>)
 8001414:	2300      	movs	r3, #0
 8001416:	ca06      	ldmia	r2, {r1, r2}
 8001418:	f003 fcac 	bl	8004d74 <ssd1306_WriteString>
	for(int i = 15,j=0;i<=55;i+=10,j++)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	330a      	adds	r3, #10
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b37      	cmp	r3, #55	; 0x37
 800142c:	dde7      	ble.n	80013fe <displayInit+0x3e>
	}

	ssd1306_DrawArrowR(3,16,Black);	//16+10pos
 800142e:	2200      	movs	r2, #0
 8001430:	2110      	movs	r1, #16
 8001432:	2003      	movs	r0, #3
 8001434:	f003 fcdc 	bl	8004df0 <ssd1306_DrawArrowR>
	ssd1306_DrawStrLine(0, 11, 130, 11, Black);
 8001438:	2300      	movs	r3, #0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	230b      	movs	r3, #11
 800143e:	2282      	movs	r2, #130	; 0x82
 8001440:	210b      	movs	r1, #11
 8001442:	2000      	movs	r0, #0
 8001444:	f003 fd1c 	bl	8004e80 <ssd1306_DrawStrLine>
	ssd1306_UpdateScreen();
 8001448:	f003 fb78 	bl	8004b3c <ssd1306_UpdateScreen>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000010 	.word	0x20000010
 8001458:	08009a0c 	.word	0x08009a0c
 800145c:	20000004 	.word	0x20000004
 8001460:	200000a8 	.word	0x200000a8
 8001464:	20000734 	.word	0x20000734

08001468 <open>:

int open(uint8_t *pos, FIL* pFile)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	int res = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
	if(page==0)
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <open+0x160>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8089 	bne.w	8001592 <open+0x12a>
	{
		if(strcmp(titles[0],"")==0) return 0;
 8001480:	4b52      	ldr	r3, [pc, #328]	; (80015cc <open+0x164>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <open+0x26>
 800148a:	2300      	movs	r3, #0
 800148c:	e098      	b.n	80015c0 <open+0x158>

			int st = strlen(dir);
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <open+0x168>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe fea2 	bl	80001dc <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
			char *temp1 = strdup(titles[*pos]);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <open+0x164>)
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f008 fa79 	bl	80099a0 <strdup>
 80014ae:	4603      	mov	r3, r0
 80014b0:	617b      	str	r3, [r7, #20]
			char *temp2 = strdup(dir);
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <open+0x168>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f008 fa72 	bl	80099a0 <strdup>
 80014bc:	4603      	mov	r3, r0
 80014be:	613b      	str	r3, [r7, #16]
			char *temp3 = (char*)malloc(strlen(temp2)+strlen(temp1)+2);
 80014c0:	6938      	ldr	r0, [r7, #16]
 80014c2:	f7fe fe8b 	bl	80001dc <strlen>
 80014c6:	4604      	mov	r4, r0
 80014c8:	6978      	ldr	r0, [r7, #20]
 80014ca:	f7fe fe87 	bl	80001dc <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4423      	add	r3, r4
 80014d2:	3302      	adds	r3, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f008 f9d1 	bl	800987c <malloc>
 80014da:	4603      	mov	r3, r0
 80014dc:	60fb      	str	r3, [r7, #12]
			strcpy(temp3,temp2);
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f008 fa54 	bl	800998e <strcpy>
			if(st>1)strcat(temp3,"/");
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	dd0b      	ble.n	8001504 <open+0x9c>
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7fe fe75 	bl	80001dc <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	4936      	ldr	r1, [pc, #216]	; (80015d4 <open+0x16c>)
 80014fc:	461a      	mov	r2, r3
 80014fe:	460b      	mov	r3, r1
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	8013      	strh	r3, [r2, #0]
			strcat(temp3,temp1);
 8001504:	6979      	ldr	r1, [r7, #20]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f008 fa32 	bl	8009970 <strcat>
			/*dir = (char*)malloc(strlen(temp2)+strlen(temp1)+2);
			strcpy(dir,temp2);
			if(st>1)strcat(dir,"/");
			strcat(dir,temp1);*/

			if(openFile(temp3,pFile)==FR_OK)
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f002 fbe6 	bl	8003ce0 <openFile>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d051      	beq.n	80015be <open+0x156>
				{

				}
				else if (scanDir(temp3, titles, 5, page)==FR_OK)
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <open+0x160>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2205      	movs	r2, #5
 8001520:	492a      	ldr	r1, [pc, #168]	; (80015cc <open+0x164>)
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f002 fb6e 	bl	8003c04 <scanDir>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d12e      	bne.n	800158c <open+0x124>
						dir = (char*)malloc(strlen(dir)+strlen(temp)+2);
						strcat(dir,"/");
						strcat(dir,temp);
					}*/

					dir = (char*)malloc(strlen(temp2)+strlen(temp1)+2);
 800152e:	6938      	ldr	r0, [r7, #16]
 8001530:	f7fe fe54 	bl	80001dc <strlen>
 8001534:	4604      	mov	r4, r0
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7fe fe50 	bl	80001dc <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	4423      	add	r3, r4
 8001540:	3302      	adds	r3, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f008 f99a 	bl	800987c <malloc>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <open+0x168>)
 800154e:	601a      	str	r2, [r3, #0]
					strcpy(dir,temp2);
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <open+0x168>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	4618      	mov	r0, r3
 8001558:	f008 fa19 	bl	800998e <strcpy>
					if(st>1)strcat(dir,"/");
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	dd0b      	ble.n	800157a <open+0x112>
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <open+0x168>)
 8001564:	681c      	ldr	r4, [r3, #0]
 8001566:	4620      	mov	r0, r4
 8001568:	f7fe fe38 	bl	80001dc <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	4423      	add	r3, r4
 8001570:	4918      	ldr	r1, [pc, #96]	; (80015d4 <open+0x16c>)
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	8013      	strh	r3, [r2, #0]
					strcat(dir,temp1);
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <open+0x168>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	4618      	mov	r0, r3
 8001582:	f008 f9f5 	bl	8009970 <strcat>

					//*pos = 0;
					res = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e018      	b.n	80015be <open+0x156>
				}
				else
				{
					//scanDir("/FOLDER2/FOLDER3", titles, 5, page);
					//*pos = 0;
					res = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	e015      	b.n	80015be <open+0x156>
				}

	}
	else
	{
		if(openFile(dir,pFile)==FR_OK)
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <open+0x168>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fba1 	bl	8003ce0 <openFile>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00c      	beq.n	80015be <open+0x156>
			{

			}
			else if (scanDir(dir, titles, 5, page)==FR_OK)
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <open+0x168>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <open+0x160>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2205      	movs	r2, #5
 80015ae:	4907      	ldr	r1, [pc, #28]	; (80015cc <open+0x164>)
 80015b0:	f002 fb28 	bl	8003c04 <scanDir>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <open+0x156>
				if(st>1)strcat(dir,"/");
				strcat(dir,temp1);

				*pos = 0;
				res = 1;*/
				res = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
				res = 1;
			}*/
	}


	return res;
 80015be:	69fb      	ldr	r3, [r7, #28]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	200000a8 	.word	0x200000a8
 80015cc:	20000734 	.word	0x20000734
 80015d0:	20000004 	.word	0x20000004
 80015d4:	08009a08 	.word	0x08009a08

080015d8 <goBack>:

void goBack(uint8_t *pos)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	*pos = 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
	char *temp = strdup(dir);
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <goBack+0x8c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f008 f9d8 	bl	80099a0 <strdup>
 80015f0:	4603      	mov	r3, r0
 80015f2:	613b      	str	r3, [r7, #16]
	int s = strlen(dir);
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <goBack+0x8c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fdef 	bl	80001dc <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	60fb      	str	r3, [r7, #12]
	for(int i=s;i>=0;i--)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e026      	b.n	8001656 <goBack+0x7e>
	{
		if(dir[i]=='/')
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <goBack+0x8c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b2f      	cmp	r3, #47	; 0x2f
 8001614:	d11c      	bne.n	8001650 <goBack+0x78>
		{
			//char *str;
			if(i>0) dir[i]='\0';
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	dd06      	ble.n	800162a <goBack+0x52>
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <goBack+0x8c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4413      	add	r3, r2
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e006      	b.n	8001638 <goBack+0x60>
			else dir[i+1] = '\0';
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <goBack+0x8c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
			//memmove(dir,dir,s);
			scanDir(dir, titles, 5, page);
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <goBack+0x8c>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <goBack+0x90>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2205      	movs	r2, #5
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <goBack+0x94>)
 8001644:	f002 fade 	bl	8003c04 <scanDir>
			HAL_Delay(1);
 8001648:	2001      	movs	r0, #1
 800164a:	f003 ffa5 	bl	8005598 <HAL_Delay>
			break;
 800164e:	e005      	b.n	800165c <goBack+0x84>
	for(int i=s;i>=0;i--)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3b01      	subs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dad5      	bge.n	8001608 <goBack+0x30>

	/*while(s>0)
	{

	}*/
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000004 	.word	0x20000004
 8001668:	200000a8 	.word	0x200000a8
 800166c:	20000734 	.word	0x20000734

08001670 <update>:

void update(const uint8_t *pos)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
	char *temp = "E:";
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <update+0xf8>)
 800167a:	60fb      	str	r3, [r7, #12]
	temp = (char*)malloc(strlen(temp)+strlen(dir)+1);
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7fe fdad 	bl	80001dc <strlen>
 8001682:	4604      	mov	r4, r0
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <update+0xfc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fda7 	bl	80001dc <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	4423      	add	r3, r4
 8001692:	3301      	adds	r3, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f008 f8f1 	bl	800987c <malloc>
 800169a:	4603      	mov	r3, r0
 800169c:	60fb      	str	r3, [r7, #12]
	strcpy(temp,"E:");
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <update+0xf8>)
 80016a2:	8811      	ldrh	r1, [r2, #0]
 80016a4:	7892      	ldrb	r2, [r2, #2]
 80016a6:	8019      	strh	r1, [r3, #0]
 80016a8:	709a      	strb	r2, [r3, #2]
	strcat(temp,dir);
 80016aa:	4b30      	ldr	r3, [pc, #192]	; (800176c <update+0xfc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f008 f95d 	bl	8009970 <strcat>
	ssd1306_Fill(White);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f003 fa1e 	bl	8004af8 <ssd1306_Fill>
	ssd1306_SetCursor(4, 2);
 80016bc:	2102      	movs	r1, #2
 80016be:	2004      	movs	r0, #4
 80016c0:	f003 fb7e 	bl	8004dc0 <ssd1306_SetCursor>
	ssd1306_WriteString(temp,Font_6x8,Black);
 80016c4:	4a2a      	ldr	r2, [pc, #168]	; (8001770 <update+0x100>)
 80016c6:	2300      	movs	r3, #0
 80016c8:	ca06      	ldmia	r2, {r1, r2}
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f003 fb52 	bl	8004d74 <ssd1306_WriteString>
	HAL_Delay(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f003 ff61 	bl	8005598 <HAL_Delay>
	if(strcmp(titles[0],"")==0)
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <update+0x104>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <update+0x86>
	{
		ssd1306_SetCursor(10, 15);
 80016e0:	210f      	movs	r1, #15
 80016e2:	200a      	movs	r0, #10
 80016e4:	f003 fb6c 	bl	8004dc0 <ssd1306_SetCursor>
		ssd1306_WriteString("--Pusto--",Font_6x8,Black);
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <update+0x100>)
 80016ea:	2300      	movs	r3, #0
 80016ec:	ca06      	ldmia	r2, {r1, r2}
 80016ee:	4822      	ldr	r0, [pc, #136]	; (8001778 <update+0x108>)
 80016f0:	f003 fb40 	bl	8004d74 <ssd1306_WriteString>
 80016f4:	e02a      	b.n	800174c <update+0xdc>
	}
	else
	{
		for(int i = 15,j=0;i<=55;i+=10,j++)
 80016f6:	230f      	movs	r3, #15
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e014      	b.n	800172a <update+0xba>
		{
			ssd1306_SetCursor(10, i);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	200a      	movs	r0, #10
 8001708:	f003 fb5a 	bl	8004dc0 <ssd1306_SetCursor>
			ssd1306_WriteString(titles[j],Font_6x8,Black);
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <update+0x104>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001714:	4a16      	ldr	r2, [pc, #88]	; (8001770 <update+0x100>)
 8001716:	2300      	movs	r3, #0
 8001718:	ca06      	ldmia	r2, {r1, r2}
 800171a:	f003 fb2b 	bl	8004d74 <ssd1306_WriteString>
		for(int i = 15,j=0;i<=55;i+=10,j++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	330a      	adds	r3, #10
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	3301      	adds	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b37      	cmp	r3, #55	; 0x37
 800172e:	dde7      	ble.n	8001700 <update+0x90>
		}
		ssd1306_DrawArrowR(3,16+(*pos * 10) ,Black);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3310      	adds	r3, #16
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	2003      	movs	r0, #3
 8001748:	f003 fb52 	bl	8004df0 <ssd1306_DrawArrowR>
	}
		//16+10pos
	ssd1306_DrawStrLine(0, 11, 130, 11, Black);
 800174c:	2300      	movs	r3, #0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	230b      	movs	r3, #11
 8001752:	2282      	movs	r2, #130	; 0x82
 8001754:	210b      	movs	r1, #11
 8001756:	2000      	movs	r0, #0
 8001758:	f003 fb92 	bl	8004e80 <ssd1306_DrawStrLine>
	ssd1306_UpdateScreen();
 800175c:	f003 f9ee 	bl	8004b3c <ssd1306_UpdateScreen>

}
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	08009a10 	.word	0x08009a10
 800176c:	20000004 	.word	0x20000004
 8001770:	20000010 	.word	0x20000010
 8001774:	20000734 	.word	0x20000734
 8001778:	08009a14 	.word	0x08009a14

0800177c <scrollDown>:

void scrollDown(uint8_t *pos)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	*pos = *pos + 1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	701a      	strb	r2, [r3, #0]
	if(*pos==5)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d108      	bne.n	80017aa <scrollDown+0x2e>
	{
		page++;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <scrollDown+0x3c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <scrollDown+0x3c>)
 80017a2:	701a      	strb	r2, [r3, #0]
		*pos = 0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	}
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200000a8 	.word	0x200000a8

080017bc <scrollUp>:
void scrollUp(uint8_t *pos)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	if(*pos>0 && *pos <255)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <scrollUp+0x26>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bff      	cmp	r3, #255	; 0xff
 80017d2:	d006      	beq.n	80017e2 <scrollUp+0x26>
	{
		*pos=*pos -1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	701a      	strb	r2, [r3, #0]
			*pos=4;
			page--;
			scanDir(dir, titles, 5, page);
		}
	}
}
 80017e0:	e014      	b.n	800180c <scrollUp+0x50>
		if(page>0)
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <scrollUp+0x58>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d010      	beq.n	800180c <scrollUp+0x50>
			*pos=4;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2204      	movs	r2, #4
 80017ee:	701a      	strb	r2, [r3, #0]
			page--;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <scrollUp+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <scrollUp+0x58>)
 80017fa:	701a      	strb	r2, [r3, #0]
			scanDir(dir, titles, 5, page);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <scrollUp+0x5c>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <scrollUp+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2205      	movs	r2, #5
 8001806:	4905      	ldr	r1, [pc, #20]	; (800181c <scrollUp+0x60>)
 8001808:	f002 f9fc 	bl	8003c04 <scanDir>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200000a8 	.word	0x200000a8
 8001818:	20000004 	.word	0x20000004
 800181c:	20000734 	.word	0x20000734

08001820 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b21a      	sxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b21b      	sxth	r3, r3
 8001840:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001842:	89fb      	ldrh	r3, [r7, #14]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3303      	adds	r3, #3
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	3202      	adds	r2, #2
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	3201      	adds	r2, #1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	4313      	orrs	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
	return rv;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	701a      	strb	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	1c53      	adds	r3, r2, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1c59      	adds	r1, r3, #1
 8001948:	6179      	str	r1, [r7, #20]
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f1      	bne.n	800193e <mem_cpy+0x1a>
	}
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001966:	b480      	push	{r7}
 8001968:	b087      	sub	sp, #28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	617a      	str	r2, [r7, #20]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3b01      	subs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f3      	bne.n	8001976 <mem_set+0x10>
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800199a:	b480      	push	{r7}
 800199c:	b089      	sub	sp, #36	; 0x24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	61fa      	str	r2, [r7, #28]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	61ba      	str	r2, [r7, #24]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	1acb      	subs	r3, r1, r3
 80019c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <mem_cmp+0x40>
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0eb      	beq.n	80019b2 <mem_cmp+0x18>

	return r;
 80019da:	697b      	ldr	r3, [r7, #20]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80019f2:	e002      	b.n	80019fa <chk_chr+0x12>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <chk_chr+0x26>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d1f2      	bne.n	80019f4 <chk_chr+0xc>
	return *str;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8001a28:	2281      	movs	r2, #129	; 0x81
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d30f      	bcc.n	8001a50 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001a30:	229f      	movs	r2, #159	; 0x9f
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d801      	bhi.n	8001a3c <dbc_1st+0x1e>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00a      	b.n	8001a52 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001a3c:	22e0      	movs	r2, #224	; 0xe0
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d305      	bcc.n	8001a50 <dbc_1st+0x32>
 8001a44:	22fc      	movs	r2, #252	; 0xfc
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d801      	bhi.n	8001a50 <dbc_1st+0x32>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001a68:	2240      	movs	r2, #64	; 0x40
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d319      	bcc.n	8001aa4 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001a70:	227e      	movs	r2, #126	; 0x7e
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d801      	bhi.n	8001a7c <dbc_2nd+0x1e>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e014      	b.n	8001aa6 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d305      	bcc.n	8001a90 <dbc_2nd+0x32>
 8001a84:	22fc      	movs	r2, #252	; 0xfc
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d801      	bhi.n	8001a90 <dbc_2nd+0x32>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00a      	b.n	8001aa6 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001a90:	2200      	movs	r2, #0
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d305      	bcc.n	8001aa4 <dbc_2nd+0x46>
 8001a98:	2200      	movs	r2, #0
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d801      	bhi.n	8001aa4 <dbc_2nd+0x46>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d02c      	beq.n	8001b20 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7858      	ldrb	r0, [r3, #1]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f7ff fa65 	bl	8000fa4 <disk_write>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11d      	bne.n	8001b1c <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d213      	bcs.n	8001b20 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	789b      	ldrb	r3, [r3, #2]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d10f      	bne.n	8001b20 <sync_window+0x6e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7858      	ldrb	r0, [r3, #1]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	441a      	add	r2, r3
 8001b14:	2301      	movs	r3, #1
 8001b16:	f7ff fa45 	bl	8000fa4 <disk_write>
 8001b1a:	e001      	b.n	8001b20 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d01b      	beq.n	8001b7a <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffb5 	bl	8001ab2 <sync_window>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d113      	bne.n	8001b7a <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7858      	ldrb	r0, [r3, #1]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	f7ff f9b6 	bl	8000ed0 <disk_read>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff90 	bl	8001ab2 <sync_window>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d158      	bne.n	8001c4e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d148      	bne.n	8001c36 <sync_fs+0xb2>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	791b      	ldrb	r3, [r3, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d144      	bne.n	8001c36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3330      	adds	r3, #48	; 0x30
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fed5 	bl	8001966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3330      	adds	r3, #48	; 0x30
 8001bc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001bc4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe64 	bl	8001896 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3330      	adds	r3, #48	; 0x30
 8001bd2:	4921      	ldr	r1, [pc, #132]	; (8001c58 <sync_fs+0xd4>)
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe79 	bl	80018cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3330      	adds	r3, #48	; 0x30
 8001bde:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001be2:	491e      	ldr	r1, [pc, #120]	; (8001c5c <sync_fs+0xd8>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe71 	bl	80018cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3330      	adds	r3, #48	; 0x30
 8001bee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f7ff fe67 	bl	80018cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3330      	adds	r3, #48	; 0x30
 8001c02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f7ff fe5d 	bl	80018cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7858      	ldrb	r0, [r3, #1]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f7ff f9ba 	bl	8000fa4 <disk_write>
			fs->fsi_flag = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa34 	bl	80010ac <disk_ioctl>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <sync_fs+0xca>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	41615252 	.word	0x41615252
 8001c5c:	61417272 	.word	0x61417272

08001c60 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3b02      	subs	r3, #2
 8001c6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	3b02      	subs	r3, #2
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d301      	bcc.n	8001c80 <clst2sect+0x20>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e008      	b.n	8001c92 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	895b      	ldrh	r3, [r3, #10]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	fb03 f301 	mul.w	r3, r3, r1
 8001c90:	4413      	add	r3, r2
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d904      	bls.n	8001cbe <get_fat+0x20>
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d302      	bcc.n	8001cc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e08c      	b.n	8001dde <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d045      	beq.n	8001d5e <get_fat+0xc0>
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d05d      	beq.n	8001d92 <get_fat+0xf4>
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d177      	bne.n	8001dca <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0a5b      	lsrs	r3, r3, #9
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6938      	ldr	r0, [r7, #16]
 8001cf6:	f7ff ff18 	bl	8001b2a <move_window>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d167      	bne.n	8001dd0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60fa      	str	r2, [r7, #12]
 8001d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d12:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	0a5b      	lsrs	r3, r3, #9
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6938      	ldr	r0, [r7, #16]
 8001d22:	f7ff ff02 	bl	8001b2a <move_window>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d153      	bne.n	8001dd4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4413      	add	r3, r2
 8001d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <get_fat+0xb6>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	e002      	b.n	8001d5a <get_fat+0xbc>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5a:	617b      	str	r3, [r7, #20]
			break;
 8001d5c:	e03f      	b.n	8001dde <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6a1a      	ldr	r2, [r3, #32]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	4413      	add	r3, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6938      	ldr	r0, [r7, #16]
 8001d6c:	f7ff fedd 	bl	8001b2a <move_window>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d130      	bne.n	8001dd8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001d84:	4413      	add	r3, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd4a 	bl	8001820 <ld_word>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	617b      	str	r3, [r7, #20]
			break;
 8001d90:	e025      	b.n	8001dde <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	09db      	lsrs	r3, r3, #7
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6938      	ldr	r0, [r7, #16]
 8001da0:	f7ff fec3 	bl	8001b2a <move_window>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001db8:	4413      	add	r3, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fd48 	bl	8001850 <ld_dword>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001dc6:	617b      	str	r3, [r7, #20]
			break;
 8001dc8:	e009      	b.n	8001dde <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e006      	b.n	8001dde <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001dd0:	bf00      	nop
 8001dd2:	e004      	b.n	8001dde <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001dd4:	bf00      	nop
 8001dd6:	e002      	b.n	8001dde <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001dd8:	bf00      	nop
 8001dda:	e000      	b.n	8001dde <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001ddc:	bf00      	nop
		}
	}

	return val;
 8001dde:	697b      	ldr	r3, [r7, #20]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001df4:	2302      	movs	r3, #2
 8001df6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f240 80d6 	bls.w	8001fac <put_fat+0x1c4>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	f080 80d0 	bcs.w	8001fac <put_fat+0x1c4>
		switch (fs->fs_type) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d073      	beq.n	8001efc <put_fat+0x114>
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	f000 8091 	beq.w	8001f3c <put_fat+0x154>
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f040 80c6 	bne.w	8001fac <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a1a      	ldr	r2, [r3, #32]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	0a5b      	lsrs	r3, r3, #9
 8001e36:	4413      	add	r3, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff fe75 	bl	8001b2a <move_window>
 8001e40:	4603      	mov	r3, r0
 8001e42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 80a9 	bne.w	8001f9e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	61b9      	str	r1, [r7, #24]
 8001e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5c:	4413      	add	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <put_fat+0x9e>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	b25a      	sxtb	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e001      	b.n	8001e8a <put_fat+0xa2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	0a5b      	lsrs	r3, r3, #9
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff fe42 	bl	8001b2a <move_window>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d178      	bne.n	8001fa2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <put_fat+0xea>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	e00e      	b.n	8001ef0 <put_fat+0x108>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	f023 030f 	bic.w	r3, r3, #15
 8001edc:	b25a      	sxtb	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	70da      	strb	r2, [r3, #3]
			break;
 8001efa:	e057      	b.n	8001fac <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	4413      	add	r3, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff fe0e 	bl	8001b2a <move_window>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d146      	bne.n	8001fa6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001f26:	4413      	add	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fcb1 	bl	8001896 <st_word>
			fs->wflag = 1;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	70da      	strb	r2, [r3, #3]
			break;
 8001f3a:	e037      	b.n	8001fac <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	09db      	lsrs	r3, r3, #7
 8001f44:	4413      	add	r3, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff fdee 	bl	8001b2a <move_window>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d128      	bne.n	8001faa <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fc6e 	bl	8001850 <ld_dword>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f7a:	4323      	orrs	r3, r4
 8001f7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001f8c:	4413      	add	r3, r2
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc9b 	bl	80018cc <st_dword>
			fs->wflag = 1;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	70da      	strb	r2, [r3, #3]
			break;
 8001f9c:	e006      	b.n	8001fac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001f9e:	bf00      	nop
 8001fa0:	e004      	b.n	8001fac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001faa:	bf00      	nop
		}
	}
	return res;
 8001fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}

08001fb6 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b088      	sub	sp, #32
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d904      	bls.n	8001fdc <remove_chain+0x26>
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d301      	bcc.n	8001fe0 <remove_chain+0x2a>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e04b      	b.n	8002078 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	69b8      	ldr	r0, [r7, #24]
 8001fee:	f7ff fefb 	bl	8001de8 <put_fat>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <remove_chain+0x4a>
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
 8001ffe:	e03b      	b.n	8002078 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff fe4b 	bl	8001c9e <get_fat>
 8002008:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d031      	beq.n	8002074 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <remove_chain+0x64>
 8002016:	2302      	movs	r3, #2
 8002018:	e02e      	b.n	8002078 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d101      	bne.n	8002026 <remove_chain+0x70>
 8002022:	2301      	movs	r3, #1
 8002024:	e028      	b.n	8002078 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002026:	2200      	movs	r2, #0
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	69b8      	ldr	r0, [r7, #24]
 800202c:	f7ff fedc 	bl	8001de8 <put_fat>
 8002030:	4603      	mov	r3, r0
 8002032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002034:	7ffb      	ldrb	r3, [r7, #31]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <remove_chain+0x88>
 800203a:	7ffb      	ldrb	r3, [r7, #31]
 800203c:	e01c      	b.n	8002078 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	3b02      	subs	r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d20b      	bcs.n	8002064 <remove_chain+0xae>
			fs->free_clst++;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	791b      	ldrb	r3, [r3, #4]
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3c6      	bcc.n	8002000 <remove_chain+0x4a>
 8002072:	e000      	b.n	8002076 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002074:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <create_chain+0x2c>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d31b      	bcc.n	80020e4 <create_chain+0x64>
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	e018      	b.n	80020e4 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fdf2 	bl	8001c9e <get_fat>
 80020ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d801      	bhi.n	80020c6 <create_chain+0x46>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0a9      	b.n	800221a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d101      	bne.n	80020d2 <create_chain+0x52>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	e0a3      	b.n	800221a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d201      	bcs.n	80020e0 <create_chain+0x60>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	e09c      	b.n	800221a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <create_chain+0x70>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e094      	b.n	800221a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d129      	bne.n	8002150 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	429a      	cmp	r2, r3
 800210a:	d301      	bcc.n	8002110 <create_chain+0x90>
 800210c:	2302      	movs	r3, #2
 800210e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002110:	69f9      	ldr	r1, [r7, #28]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fdc3 	bl	8001c9e <get_fat>
 8002118:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d003      	beq.n	8002128 <create_chain+0xa8>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d101      	bne.n	800212c <create_chain+0xac>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	e076      	b.n	800221a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00e      	beq.n	8002150 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d906      	bls.n	800214c <create_chain+0xcc>
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d201      	bcs.n	800214c <create_chain+0xcc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d129      	bne.n	80021aa <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	429a      	cmp	r2, r3
 8002168:	d307      	bcc.n	800217a <create_chain+0xfa>
					ncl = 2;
 800216a:	2302      	movs	r3, #2
 800216c:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	429a      	cmp	r2, r3
 8002174:	d901      	bls.n	800217a <create_chain+0xfa>
 8002176:	2300      	movs	r3, #0
 8002178:	e04f      	b.n	800221a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800217a:	69f9      	ldr	r1, [r7, #28]
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fd8e 	bl	8001c9e <get_fat>
 8002182:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d003      	beq.n	8002198 <create_chain+0x118>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d101      	bne.n	800219c <create_chain+0x11c>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	e03e      	b.n	800221a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1da      	bne.n	800215a <create_chain+0xda>
 80021a4:	2300      	movs	r3, #0
 80021a6:	e038      	b.n	800221a <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80021a8:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80021aa:	f04f 32ff 	mov.w	r2, #4294967295
 80021ae:	69f9      	ldr	r1, [r7, #28]
 80021b0:	6938      	ldr	r0, [r7, #16]
 80021b2:	f7ff fe19 	bl	8001de8 <put_fat>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <create_chain+0x154>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	6938      	ldr	r0, [r7, #16]
 80021cc:	f7ff fe0c 	bl	8001de8 <put_fat>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <create_chain+0x188>
		fs->last_clst = ncl;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	3b02      	subs	r3, #2
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d804      	bhi.n	80021f8 <create_chain+0x178>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	711a      	strb	r2, [r3, #4]
 8002206:	e007      	b.n	8002218 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <create_chain+0x194>
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	e000      	b.n	8002216 <create_chain+0x196>
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002218:	69fb      	ldr	r3, [r7, #28]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fc40 	bl	8001ab2 <sync_window>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <dir_clear+0x1a>
 8002238:	2301      	movs	r3, #1
 800223a:	e036      	b.n	80022aa <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fd0e 	bl	8001c60 <clst2sect>
 8002244:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3330      	adds	r3, #48	; 0x30
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb85 	bl	8001966 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3330      	adds	r3, #48	; 0x30
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	2301      	movs	r3, #1
 8002264:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e003      	b.n	8002274 <dir_clear+0x52>
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	895b      	ldrh	r3, [r3, #10]
 8002278:	461a      	mov	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4293      	cmp	r3, r2
 800227e:	d20b      	bcs.n	8002298 <dir_clear+0x76>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7858      	ldrb	r0, [r3, #1]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	441a      	add	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	f7fe fe89 	bl	8000fa4 <disk_write>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0e9      	beq.n	800226c <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	895b      	ldrh	r3, [r3, #10]
 800229c:	461a      	mov	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022c8:	d204      	bcs.n	80022d4 <dir_sdi+0x22>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80022d4:	2302      	movs	r3, #2
 80022d6:	e063      	b.n	80023a0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <dir_sdi+0x46>
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d902      	bls.n	80022f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	8912      	ldrh	r2, [r2, #8]
 8002306:	4293      	cmp	r3, r2
 8002308:	d301      	bcc.n	800230e <dir_sdi+0x5c>
 800230a:	2302      	movs	r3, #2
 800230c:	e048      	b.n	80023a0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
 8002316:	e029      	b.n	800236c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	895b      	ldrh	r3, [r3, #10]
 800231c:	025b      	lsls	r3, r3, #9
 800231e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002320:	e019      	b.n	8002356 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6979      	ldr	r1, [r7, #20]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fcb9 	bl	8001c9e <get_fat>
 800232c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d101      	bne.n	800233a <dir_sdi+0x88>
 8002336:	2301      	movs	r3, #1
 8002338:	e032      	b.n	80023a0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d904      	bls.n	800234a <dir_sdi+0x98>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d301      	bcc.n	800234e <dir_sdi+0x9c>
 800234a:	2302      	movs	r3, #2
 800234c:	e028      	b.n	80023a0 <dir_sdi+0xee>
			ofs -= csz;
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	429a      	cmp	r2, r3
 800235c:	d2e1      	bcs.n	8002322 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	6938      	ldr	r0, [r7, #16]
 8002362:	f7ff fc7d 	bl	8001c60 <clst2sect>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <dir_sdi+0xcc>
 800237a:	2302      	movs	r3, #2
 800237c:	e010      	b.n	80023a0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	0a5b      	lsrs	r3, r3, #9
 8002386:	441a      	add	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002398:	441a      	add	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	3320      	adds	r3, #32
 80023be:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023c6:	d302      	bcc.n	80023ce <dir_next+0x26>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <dir_next+0x32>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e078      	b.n	80024cc <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d166      	bne.n	80024b2 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	8912      	ldrh	r2, [r2, #8]
 80023fe:	4293      	cmp	r3, r2
 8002400:	d357      	bcc.n	80024b2 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	2304      	movs	r3, #4
 800240a:	e05f      	b.n	80024cc <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	8952      	ldrh	r2, [r2, #10]
 8002414:	3a01      	subs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d14a      	bne.n	80024b2 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7ff fc3a 	bl	8001c9e <get_fat>
 800242a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d801      	bhi.n	8002436 <dir_next+0x8e>
 8002432:	2302      	movs	r3, #2
 8002434:	e04a      	b.n	80024cc <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d101      	bne.n	8002442 <dir_next+0x9a>
 800243e:	2301      	movs	r3, #1
 8002440:	e044      	b.n	80024cc <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	d328      	bcc.n	800249e <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d104      	bne.n	800245c <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
 8002458:	2304      	movs	r3, #4
 800245a:	e037      	b.n	80024cc <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f7ff fe0b 	bl	8002080 <create_chain>
 800246a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <dir_next+0xce>
 8002472:	2307      	movs	r3, #7
 8002474:	e02a      	b.n	80024cc <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <dir_next+0xd8>
 800247c:	2302      	movs	r3, #2
 800247e:	e025      	b.n	80024cc <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d101      	bne.n	800248c <dir_next+0xe4>
 8002488:	2301      	movs	r3, #1
 800248a:	e01f      	b.n	80024cc <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800248c:	6979      	ldr	r1, [r7, #20]
 800248e:	6938      	ldr	r0, [r7, #16]
 8002490:	f7ff fec7 	bl	8002222 <dir_clear>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <dir_next+0xf6>
 800249a:	2301      	movs	r3, #1
 800249c:	e016      	b.n	80024cc <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80024a4:	6979      	ldr	r1, [r7, #20]
 80024a6:	6938      	ldr	r0, [r7, #16]
 80024a8:	f7ff fbda 	bl	8001c60 <clst2sect>
 80024ac:	4602      	mov	r2, r0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c4:	441a      	add	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fee3 	bl	80022b2 <dir_sdi>
 80024ec:	4603      	mov	r3, r0
 80024ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80024f0:	7dfb      	ldrb	r3, [r7, #23]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d12b      	bne.n	800254e <dir_alloc+0x7a>
		n = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4619      	mov	r1, r3
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fb12 	bl	8001b2a <move_window>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11d      	bne.n	800254c <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2be5      	cmp	r3, #229	; 0xe5
 8002518:	d004      	beq.n	8002524 <dir_alloc+0x50>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	3301      	adds	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d102      	bne.n	8002538 <dir_alloc+0x64>
 8002532:	e00c      	b.n	800254e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8002538:	2101      	movs	r1, #1
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff34 	bl	80023a8 <dir_next>
 8002540:	4603      	mov	r3, r0
 8002542:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0d7      	beq.n	80024fa <dir_alloc+0x26>
 800254a:	e000      	b.n	800254e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800254c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d101      	bne.n	8002558 <dir_alloc+0x84>
 8002554:	2307      	movs	r3, #7
 8002556:	75fb      	strb	r3, [r7, #23]
	return res;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	331a      	adds	r3, #26
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f955 	bl	8001820 <ld_word>
 8002576:	4603      	mov	r3, r0
 8002578:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d109      	bne.n	8002596 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	3314      	adds	r3, #20
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff f94a 	bl	8001820 <ld_word>
 800258c:	4603      	mov	r3, r0
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	331a      	adds	r3, #26
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	b292      	uxth	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f96d 	bl	8001896 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d109      	bne.n	80025d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f103 0214 	add.w	r2, r3, #20
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7ff f95f 	bl	8001896 <st_word>
	}
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80025ea:	2304      	movs	r3, #4
 80025ec:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80025f4:	e03c      	b.n	8002670 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6938      	ldr	r0, [r7, #16]
 80025fe:	f7ff fa94 	bl	8001b2a <move_window>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d136      	bne.n	800267a <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800261a:	2304      	movs	r3, #4
 800261c:	75fb      	strb	r3, [r7, #23]
 800261e:	e031      	b.n	8002684 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	330b      	adds	r3, #11
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800262c:	73bb      	strb	r3, [r7, #14]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7bba      	ldrb	r2, [r7, #14]
 8002632:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2be5      	cmp	r3, #229	; 0xe5
 8002638:	d011      	beq.n	800265e <dir_read+0x7e>
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b2e      	cmp	r3, #46	; 0x2e
 800263e:	d00e      	beq.n	800265e <dir_read+0x7e>
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	d00b      	beq.n	800265e <dir_read+0x7e>
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	f023 0320 	bic.w	r3, r3, #32
 800264c:	2b08      	cmp	r3, #8
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800265e:	2100      	movs	r1, #0
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fea1 	bl	80023a8 <dir_next>
 8002666:	4603      	mov	r3, r0
 8002668:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d108      	bne.n	8002682 <dir_read+0xa2>
	while (dp->sect) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1be      	bne.n	80025f6 <dir_read+0x16>
 8002678:	e004      	b.n	8002684 <dir_read+0xa4>
		if (res != FR_OK) break;
 800267a:	bf00      	nop
 800267c:	e002      	b.n	8002684 <dir_read+0xa4>
				break;
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <dir_read+0xa4>
		if (res != FR_OK) break;
 8002682:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <dir_read+0xb0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
	return res;
 8002690:	7dfb      	ldrb	r3, [r7, #23]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80026a8:	2100      	movs	r1, #0
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fe01 	bl	80022b2 <dir_sdi>
 80026b0:	4603      	mov	r3, r0
 80026b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <dir_find+0x24>
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	e03e      	b.n	800273c <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4619      	mov	r1, r3
 80026c4:	6938      	ldr	r0, [r7, #16]
 80026c6:	f7ff fa30 	bl	8001b2a <move_window>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d12f      	bne.n	8002734 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <dir_find+0x4e>
 80026e2:	2304      	movs	r3, #4
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	e028      	b.n	800273a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	330b      	adds	r3, #11
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	330b      	adds	r3, #11
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <dir_find+0x86>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69d8      	ldr	r0, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3320      	adds	r3, #32
 8002712:	220b      	movs	r2, #11
 8002714:	4619      	mov	r1, r3
 8002716:	f7ff f940 	bl	800199a <mem_cmp>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8002720:	2100      	movs	r1, #0
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fe40 	bl	80023a8 <dir_next>
 8002728:	4603      	mov	r3, r0
 800272a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0c5      	beq.n	80026be <dir_find+0x24>
 8002732:	e002      	b.n	800273a <dir_find+0xa0>
		if (res != FR_OK) break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002738:	bf00      	nop

	return res;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002752:	2101      	movs	r1, #1
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff febd 	bl	80024d4 <dir_alloc>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11c      	bne.n	800279e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4619      	mov	r1, r3
 800276a:	68b8      	ldr	r0, [r7, #8]
 800276c:	f7ff f9dd 	bl	8001b2a <move_window>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d111      	bne.n	800279e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2220      	movs	r2, #32
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f8ef 	bl	8001966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69d8      	ldr	r0, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3320      	adds	r3, #32
 8002790:	220b      	movs	r2, #11
 8002792:	4619      	mov	r1, r3
 8002794:	f7ff f8c6 	bl	8001924 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2201      	movs	r2, #1
 800279c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d052      	beq.n	8002866 <get_fileinfo+0xbe>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 80027c8:	e021      	b.n	800280e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1c59      	adds	r1, r3, #1
 80027d2:	6179      	str	r1, [r7, #20]
 80027d4:	4413      	add	r3, r2
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d100      	bne.n	80027e2 <get_fileinfo+0x3a>
 80027e0:	e015      	b.n	800280e <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d101      	bne.n	80027ec <get_fileinfo+0x44>
 80027e8:	23e5      	movs	r3, #229	; 0xe5
 80027ea:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	d106      	bne.n	8002800 <get_fileinfo+0x58>
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	613a      	str	r2, [r7, #16]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	222e      	movs	r2, #46	; 0x2e
 80027fe:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	613a      	str	r2, [r7, #16]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b0a      	cmp	r3, #10
 8002812:	d9da      	bls.n	80027ca <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	3309      	adds	r3, #9
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	7ada      	ldrb	r2, [r3, #11]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	331c      	adds	r3, #28
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f80d 	bl	8001850 <ld_dword>
 8002836:	4602      	mov	r2, r0
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	3316      	adds	r3, #22
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe ffec 	bl	8001820 <ld_word>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	3318      	adds	r3, #24
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe ffe2 	bl	8001820 <ld_word>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	809a      	strh	r2, [r3, #4]
 8002864:	e000      	b.n	8002868 <get_fileinfo+0xc0>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8002866:	bf00      	nop
}
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3320      	adds	r3, #32
 8002884:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8002886:	220b      	movs	r2, #11
 8002888:	2120      	movs	r1, #32
 800288a:	6938      	ldr	r0, [r7, #16]
 800288c:	f7ff f86b 	bl	8001966 <mem_set>
	si = i = 0; ni = 8;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	2308      	movs	r3, #8
 800289a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4413      	add	r3, r2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80028ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d97c      	bls.n	80029ae <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80028b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b8:	2b2f      	cmp	r3, #47	; 0x2f
 80028ba:	d007      	beq.n	80028cc <create_name+0x5c>
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c0:	2b5c      	cmp	r3, #92	; 0x5c
 80028c2:	d110      	bne.n	80028e6 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80028c4:	e002      	b.n	80028cc <create_name+0x5c>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b2f      	cmp	r3, #47	; 0x2f
 80028d6:	d0f6      	beq.n	80028c6 <create_name+0x56>
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b5c      	cmp	r3, #92	; 0x5c
 80028e2:	d0f0      	beq.n	80028c6 <create_name+0x56>
			break;
 80028e4:	e064      	b.n	80029b0 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80028e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ea:	2b2e      	cmp	r3, #46	; 0x2e
 80028ec:	d003      	beq.n	80028f6 <create_name+0x86>
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d30d      	bcc.n	8002912 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	2b0b      	cmp	r3, #11
 80028fa:	d003      	beq.n	8002904 <create_name+0x94>
 80028fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002900:	2b2e      	cmp	r3, #46	; 0x2e
 8002902:	d001      	beq.n	8002908 <create_name+0x98>
 8002904:	2306      	movs	r3, #6
 8002906:	e06f      	b.n	80029e8 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8002908:	2308      	movs	r3, #8
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	230b      	movs	r3, #11
 800290e:	623b      	str	r3, [r7, #32]
			continue;
 8002910:	e04c      	b.n	80029ac <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8002912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f881 	bl	8001a1e <dbc_1st>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f893 	bl	8001a5e <dbc_2nd>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <create_name+0xd8>
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	3b01      	subs	r3, #1
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	429a      	cmp	r2, r3
 8002946:	d301      	bcc.n	800294c <create_name+0xdc>
 8002948:	2306      	movs	r3, #6
 800294a:	e04d      	b.n	80029e8 <create_name+0x178>
			sfn[i++] = c;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	61ba      	str	r2, [r7, #24]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800295a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	61ba      	str	r2, [r7, #24]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e797      	b.n	800289c <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800296c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002970:	4619      	mov	r1, r3
 8002972:	481f      	ldr	r0, [pc, #124]	; (80029f0 <create_name+0x180>)
 8002974:	f7ff f838 	bl	80019e8 <chk_chr>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <create_name+0x112>
 800297e:	2306      	movs	r3, #6
 8002980:	e032      	b.n	80029e8 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002986:	2b60      	cmp	r3, #96	; 0x60
 8002988:	d908      	bls.n	800299c <create_name+0x12c>
 800298a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800298e:	2b7a      	cmp	r3, #122	; 0x7a
 8002990:	d804      	bhi.n	800299c <create_name+0x12c>
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002996:	3b20      	subs	r3, #32
 8002998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	61ba      	str	r2, [r7, #24]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4413      	add	r3, r2
 80029a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80029aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 80029ac:	e776      	b.n	800289c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80029ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	441a      	add	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <create_name+0x154>
 80029c0:	2306      	movs	r3, #6
 80029c2:	e011      	b.n	80029e8 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2be5      	cmp	r3, #229	; 0xe5
 80029ca:	d102      	bne.n	80029d2 <create_name+0x162>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2205      	movs	r2, #5
 80029d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80029d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d801      	bhi.n	80029de <create_name+0x16e>
 80029da:	2204      	movs	r2, #4
 80029dc:	e000      	b.n	80029e0 <create_name+0x170>
 80029de:	2200      	movs	r2, #0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	330b      	adds	r3, #11
 80029e4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80029e6:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	08009a20 	.word	0x08009a20

080029f4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002a04:	e002      	b.n	8002a0c <follow_path+0x18>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b2f      	cmp	r3, #47	; 0x2f
 8002a12:	d0f8      	beq.n	8002a06 <follow_path+0x12>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b5c      	cmp	r3, #92	; 0x5c
 8002a1a:	d0f4      	beq.n	8002a06 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b1f      	cmp	r3, #31
 8002a28:	d80a      	bhi.n	8002a40 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002a32:	2100      	movs	r1, #0
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fc3c 	bl	80022b2 <dir_sdi>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]
 8002a3e:	e043      	b.n	8002ac8 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002a40:	463b      	mov	r3, r7
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff13 	bl	8002870 <create_name>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d134      	bne.n	8002abe <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff fe20 	bl	800269a <dir_find>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002a64:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d127      	bne.n	8002ac2 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d122      	bne.n	8002ac2 <follow_path+0xce>
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002a80:	e01f      	b.n	8002ac2 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11c      	bne.n	8002ac6 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	799b      	ldrb	r3, [r3, #6]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8002a98:	2305      	movs	r3, #5
 8002a9a:	75fb      	strb	r3, [r7, #23]
 8002a9c:	e014      	b.n	8002ac8 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aac:	4413      	add	r3, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6938      	ldr	r0, [r7, #16]
 8002ab2:	f7ff fd56 	bl	8002562 <ld_clust>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002abc:	e7c0      	b.n	8002a40 <follow_path+0x4c>
			if (res != FR_OK) break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <follow_path+0xd4>
				break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002ac6:	bf00      	nop
			}
		}
	}

	return res;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b089      	sub	sp, #36	; 0x24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <get_ldnumber+0x22>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	e02d      	b.n	8002b50 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	61fa      	str	r2, [r7, #28]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d902      	bls.n	8002b0a <get_ldnumber+0x38>
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b3a      	cmp	r3, #58	; 0x3a
 8002b08:	d1f4      	bne.n	8002af4 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b3a      	cmp	r3, #58	; 0x3a
 8002b0e:	d11c      	bne.n	8002b4a <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002b10:	2301      	movs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b2f      	cmp	r3, #47	; 0x2f
 8002b1a:	d90c      	bls.n	8002b36 <get_ldnumber+0x64>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b39      	cmp	r3, #57	; 0x39
 8002b22:	d808      	bhi.n	8002b36 <get_ldnumber+0x64>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	3302      	adds	r3, #2
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d103      	bne.n	8002b36 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	3b30      	subs	r3, #48	; 0x30
 8002b34:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dc04      	bgt.n	8002b46 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	e002      	b.n	8002b50 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002b4e:	697b      	ldr	r3, [r7, #20]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3724      	adds	r7, #36	; 0x24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	70da      	strb	r2, [r3, #3]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe ffd7 	bl	8001b2a <move_window>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <check_fs+0x2a>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e038      	b.n	8002bf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3330      	adds	r3, #48	; 0x30
 8002b8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fe46 	bl	8001820 <ld_word>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <check_fs+0x48>
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e029      	b.n	8002bf8 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002baa:	2be9      	cmp	r3, #233	; 0xe9
 8002bac:	d009      	beq.n	8002bc2 <check_fs+0x66>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bb4:	2beb      	cmp	r3, #235	; 0xeb
 8002bb6:	d004      	beq.n	8002bc2 <check_fs+0x66>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bbe:	2be8      	cmp	r3, #232	; 0xe8
 8002bc0:	d119      	bne.n	8002bf6 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3330      	adds	r3, #48	; 0x30
 8002bc6:	3336      	adds	r3, #54	; 0x36
 8002bc8:	2203      	movs	r2, #3
 8002bca:	490d      	ldr	r1, [pc, #52]	; (8002c00 <check_fs+0xa4>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fee4 	bl	800199a <mem_cmp>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <check_fs+0x80>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e00d      	b.n	8002bf8 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3330      	adds	r3, #48	; 0x30
 8002be0:	3352      	adds	r3, #82	; 0x52
 8002be2:	2205      	movs	r2, #5
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <check_fs+0xa8>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fed7 	bl	800199a <mem_cmp>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <check_fs+0x9a>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002bf6:	2302      	movs	r3, #2
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08009a30 	.word	0x08009a30
 8002c04:	08009a34 	.word	0x08009a34

08002c08 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b096      	sub	sp, #88	; 0x58
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ff58 	bl	8002ad2 <get_ldnumber>
 8002c22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da01      	bge.n	8002c2e <find_volume+0x26>
 8002c2a:	230b      	movs	r3, #11
 8002c2c:	e238      	b.n	80030a0 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002c2e:	4aa8      	ldr	r2, [pc, #672]	; (8002ed0 <find_volume+0x2c8>)
 8002c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <find_volume+0x3a>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	e22e      	b.n	80030a0 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01a      	beq.n	8002c8e <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	785b      	ldrb	r3, [r3, #1]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe f921 	bl	8000ea4 <disk_status>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002c68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10c      	bne.n	8002c8e <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <find_volume+0x82>
 8002c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002c86:	230a      	movs	r3, #10
 8002c88:	e20a      	b.n	80030a0 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e208      	b.n	80030a0 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe f815 	bl	8000cd0 <disk_initialize>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1f1      	b.n	80030a0 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <find_volume+0xca>
 8002cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002cce:	230a      	movs	r3, #10
 8002cd0:	e1e6      	b.n	80030a0 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002cd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cda:	f7ff ff3f 	bl	8002b5c <check_fs>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d14b      	bne.n	8002d84 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf0:	e01f      	b.n	8002d32 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002d00:	4413      	add	r3, r2
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	3304      	adds	r3, #4
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <find_volume+0x114>
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	3308      	adds	r3, #8
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fd9c 	bl	8001850 <ld_dword>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	e000      	b.n	8002d1e <find_volume+0x116>
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d26:	440b      	add	r3, r1
 8002d28:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	3301      	adds	r3, #1
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d9dc      	bls.n	8002cf2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <find_volume+0x140>
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	3b01      	subs	r3, #1
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d50:	4413      	add	r3, r2
 8002d52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002d56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <find_volume+0x162>
 8002d5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d62:	f7ff fefb 	bl	8002b5c <check_fs>
 8002d66:	4603      	mov	r3, r0
 8002d68:	e000      	b.n	8002d6c <find_volume+0x164>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d905      	bls.n	8002d84 <find_volume+0x17c>
 8002d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d9e1      	bls.n	8002d48 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d101      	bne.n	8002d90 <find_volume+0x188>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e187      	b.n	80030a0 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d901      	bls.n	8002d9c <find_volume+0x194>
 8002d98:	230d      	movs	r3, #13
 8002d9a:	e181      	b.n	80030a0 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	3330      	adds	r3, #48	; 0x30
 8002da0:	330b      	adds	r3, #11
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fd3c 	bl	8001820 <ld_word>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dae:	d001      	beq.n	8002db4 <find_volume+0x1ac>
 8002db0:	230d      	movs	r3, #13
 8002db2:	e175      	b.n	80030a0 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	3330      	adds	r3, #48	; 0x30
 8002db8:	3316      	adds	r3, #22
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fd30 	bl	8001820 <ld_word>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <find_volume+0x1d0>
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	3330      	adds	r3, #48	; 0x30
 8002dce:	3324      	adds	r3, #36	; 0x24
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fd3d 	bl	8001850 <ld_dword>
 8002dd6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ddc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	789b      	ldrb	r3, [r3, #2]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d005      	beq.n	8002dfc <find_volume+0x1f4>
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	789b      	ldrb	r3, [r3, #2]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d001      	beq.n	8002dfc <find_volume+0x1f4>
 8002df8:	230d      	movs	r3, #13
 8002dfa:	e151      	b.n	80030a0 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	461a      	mov	r2, r3
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	895b      	ldrh	r3, [r3, #10]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <find_volume+0x228>
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	895b      	ldrh	r3, [r3, #10]
 8002e22:	461a      	mov	r2, r3
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	895b      	ldrh	r3, [r3, #10]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <find_volume+0x22c>
 8002e30:	230d      	movs	r3, #13
 8002e32:	e135      	b.n	80030a0 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	3330      	adds	r3, #48	; 0x30
 8002e38:	3311      	adds	r3, #17
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fcf0 	bl	8001820 <ld_word>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	891b      	ldrh	r3, [r3, #8]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <find_volume+0x252>
 8002e56:	230d      	movs	r3, #13
 8002e58:	e122      	b.n	80030a0 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	3330      	adds	r3, #48	; 0x30
 8002e5e:	3313      	adds	r3, #19
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe fcdd 	bl	8001820 <ld_word>
 8002e66:	4603      	mov	r3, r0
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <find_volume+0x276>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	3330      	adds	r3, #48	; 0x30
 8002e74:	3320      	adds	r3, #32
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fcea 	bl	8001850 <ld_dword>
 8002e7c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	3330      	adds	r3, #48	; 0x30
 8002e82:	330e      	adds	r3, #14
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fccb 	bl	8001820 <ld_word>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <find_volume+0x290>
 8002e94:	230d      	movs	r3, #13
 8002e96:	e103      	b.n	80030a0 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002e98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	4413      	add	r3, r2
 8002e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea0:	8912      	ldrh	r2, [r2, #8]
 8002ea2:	0912      	lsrs	r2, r2, #4
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d201      	bcs.n	8002eb6 <find_volume+0x2ae>
 8002eb2:	230d      	movs	r3, #13
 8002eb4:	e0f4      	b.n	80030a0 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ebe:	8952      	ldrh	r2, [r2, #10]
 8002ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <find_volume+0x2cc>
 8002ecc:	230d      	movs	r3, #13
 8002ece:	e0e7      	b.n	80030a0 <find_volume+0x498>
 8002ed0:	200000ac 	.word	0x200000ac
		fmt = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	4a72      	ldr	r2, [pc, #456]	; (80030a8 <find_volume+0x4a0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d802      	bhi.n	8002ee8 <find_volume+0x2e0>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d802      	bhi.n	8002ef8 <find_volume+0x2f0>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d802      	bhi.n	8002f08 <find_volume+0x300>
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <find_volume+0x30c>
 8002f10:	230d      	movs	r3, #13
 8002f12:	e0c5      	b.n	80030a0 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1c9a      	adds	r2, r3, #2
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f20:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002f22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f26:	441a      	add	r2, r3
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	441a      	add	r2, r3
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002f36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d11e      	bne.n	8002f7c <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	3330      	adds	r3, #48	; 0x30
 8002f42:	332a      	adds	r3, #42	; 0x2a
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fc6b 	bl	8001820 <ld_word>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <find_volume+0x34c>
 8002f50:	230d      	movs	r3, #13
 8002f52:	e0a5      	b.n	80030a0 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	891b      	ldrh	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <find_volume+0x358>
 8002f5c:	230d      	movs	r3, #13
 8002f5e:	e09f      	b.n	80030a0 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	3330      	adds	r3, #48	; 0x30
 8002f64:	332c      	adds	r3, #44	; 0x2c
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fc72 	bl	8001850 <ld_dword>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7a:	e01f      	b.n	8002fbc <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	891b      	ldrh	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <find_volume+0x380>
 8002f84:	230d      	movs	r3, #13
 8002f86:	e08b      	b.n	80030a0 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8e:	441a      	add	r2, r3
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d103      	bne.n	8002fa4 <find_volume+0x39c>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	e00a      	b.n	8002fba <find_volume+0x3b2>
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	085a      	lsrs	r2, r3, #1
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fc6:	0a5b      	lsrs	r3, r3, #9
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d201      	bcs.n	8002fd0 <find_volume+0x3c8>
 8002fcc:	230d      	movs	r3, #13
 8002fce:	e067      	b.n	80030a0 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	611a      	str	r2, [r3, #16]
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d149      	bne.n	8003082 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	3330      	adds	r3, #48	; 0x30
 8002ff2:	3330      	adds	r3, #48	; 0x30
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fc13 	bl	8001820 <ld_word>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d140      	bne.n	8003082 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003002:	3301      	adds	r3, #1
 8003004:	4619      	mov	r1, r3
 8003006:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003008:	f7fe fd8f 	bl	8001b2a <move_window>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d137      	bne.n	8003082 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	2200      	movs	r2, #0
 8003016:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	3330      	adds	r3, #48	; 0x30
 800301c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fbfd 	bl	8001820 <ld_word>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800302e:	429a      	cmp	r2, r3
 8003030:	d127      	bne.n	8003082 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	3330      	adds	r3, #48	; 0x30
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fc0a 	bl	8001850 <ld_dword>
 800303c:	4602      	mov	r2, r0
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <find_volume+0x4a4>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d11e      	bne.n	8003082 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	3330      	adds	r3, #48	; 0x30
 8003048:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fbff 	bl	8001850 <ld_dword>
 8003052:	4602      	mov	r2, r0
 8003054:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <find_volume+0x4a8>)
 8003056:	429a      	cmp	r2, r3
 8003058:	d113      	bne.n	8003082 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	3330      	adds	r3, #48	; 0x30
 800305e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fbf4 	bl	8001850 <ld_dword>
 8003068:	4602      	mov	r2, r0
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	3330      	adds	r3, #48	; 0x30
 8003072:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fbea 	bl	8001850 <ld_dword>
 800307c:	4602      	mov	r2, r0
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003088:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <find_volume+0x4ac>)
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <find_volume+0x4ac>)
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <find_volume+0x4ac>)
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3758      	adds	r7, #88	; 0x58
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	0ffffff5 	.word	0x0ffffff5
 80030ac:	41615252 	.word	0x41615252
 80030b0:	61417272 	.word	0x61417272
 80030b4:	200000b0 	.word	0x200000b0

080030b8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80030c2:	2309      	movs	r3, #9
 80030c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01c      	beq.n	8003106 <validate+0x4e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d018      	beq.n	8003106 <validate+0x4e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d013      	beq.n	8003106 <validate+0x4e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	889a      	ldrh	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	88db      	ldrh	r3, [r3, #6]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d10c      	bne.n	8003106 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fed6 	bl	8000ea4 <disk_status>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <validate+0x4e>
			res = FR_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <validate+0x5a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	e000      	b.n	8003114 <validate+0x5c>
 8003112:	2300      	movs	r3, #0
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	6013      	str	r3, [r2, #0]
	return res;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003136:	f107 0310 	add.w	r3, r7, #16
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fcc9 	bl	8002ad2 <get_ldnumber>
 8003140:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da01      	bge.n	800314c <f_mount+0x28>
 8003148:	230b      	movs	r3, #11
 800314a:	e025      	b.n	8003198 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <f_mount+0x7c>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	490b      	ldr	r1, [pc, #44]	; (80031a0 <f_mount+0x7c>)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <f_mount+0x5e>
 800317e:	2300      	movs	r3, #0
 8003180:	e00a      	b.n	8003198 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003182:	f107 010c 	add.w	r1, r7, #12
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	2200      	movs	r2, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fd3b 	bl	8002c08 <find_volume>
 8003192:	4603      	mov	r3, r0
 8003194:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200000ac 	.word	0x200000ac

080031a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b099      	sub	sp, #100	; 0x64
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <f_open+0x18>
 80031b8:	2309      	movs	r3, #9
 80031ba:	e172      	b.n	80034a2 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80031c4:	79fa      	ldrb	r2, [r7, #7]
 80031c6:	f107 0114 	add.w	r1, r7, #20
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd1a 	bl	8002c08 <find_volume>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80031da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8156 	bne.w	8003490 <f_open+0x2ec>
		dj.obj.fs = fs;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	f107 0318 	add.w	r3, r7, #24
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fbff 	bl	80029f4 <follow_path>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80031fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003204:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003208:	b25b      	sxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	da02      	bge.n	8003214 <f_open+0x70>
				res = FR_INVALID_NAME;
 800320e:	2306      	movs	r3, #6
 8003210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 031c 	and.w	r3, r3, #28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d073      	beq.n	8003306 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 800321e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003222:	2b00      	cmp	r3, #0
 8003224:	d010      	beq.n	8003248 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800322a:	2b04      	cmp	r3, #4
 800322c:	d107      	bne.n	800323e <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800322e:	f107 0318 	add.w	r3, r7, #24
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fa86 	bl	8002744 <dir_register>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	71fb      	strb	r3, [r7, #7]
 8003246:	e010      	b.n	800326a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003248:	7fbb      	ldrb	r3, [r7, #30]
 800324a:	f003 0311 	and.w	r3, r3, #17
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <f_open+0xb6>
					res = FR_DENIED;
 8003252:	2307      	movs	r3, #7
 8003254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003258:	e007      	b.n	800326a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <f_open+0xc6>
 8003264:	2308      	movs	r3, #8
 8003266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800326a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800326e:	2b00      	cmp	r3, #0
 8003270:	d163      	bne.n	800333a <f_open+0x196>
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05e      	beq.n	800333a <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f96d 	bl	8002562 <ld_clust>
 8003288:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328c:	f103 040e 	add.w	r4, r3, #14
 8003290:	f7fe f88c 	bl	80013ac <get_fattime>
 8003294:	4603      	mov	r3, r0
 8003296:	4619      	mov	r1, r3
 8003298:	4620      	mov	r0, r4
 800329a:	f7fe fb17 	bl	80018cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a0:	330b      	adds	r3, #11
 80032a2:	2220      	movs	r2, #32
 80032a4:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032aa:	2200      	movs	r2, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f977 	bl	80025a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	331c      	adds	r3, #28
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe fb07 	bl	80018cc <st_dword>
					fs->wflag = 1;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2201      	movs	r2, #1
 80032c2:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80032c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d037      	beq.n	800333a <f_open+0x196>
						dw = fs->winsect;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 80032d0:	f107 0318 	add.w	r3, r7, #24
 80032d4:	2200      	movs	r2, #0
 80032d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fe6c 	bl	8001fb6 <remove_chain>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80032e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d126      	bne.n	800333a <f_open+0x196>
							res = move_window(fs, dw);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fc1a 	bl	8001b2a <move_window>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003300:	3a01      	subs	r2, #1
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e019      	b.n	800333a <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8003306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800330e:	7fbb      	ldrb	r3, [r7, #30]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <f_open+0x17c>
					res = FR_NO_FILE;
 8003318:	2304      	movs	r3, #4
 800331a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800331e:	e00c      	b.n	800333a <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <f_open+0x196>
 800332a:	7fbb      	ldrb	r3, [r7, #30]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <f_open+0x196>
						res = FR_DENIED;
 8003334:	2307      	movs	r3, #7
 8003336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800333a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <f_open+0x1b0>
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003352:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800335c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8003362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 8092 	bne.w	8003490 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f8f5 	bl	8002562 <ld_clust>
 8003378:	4602      	mov	r2, r0
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003380:	331c      	adds	r3, #28
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fa64 	bl	8001850 <ld_dword>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	88da      	ldrh	r2, [r3, #6]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	79fa      	ldrb	r2, [r7, #7]
 80033a0:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3328      	adds	r3, #40	; 0x28
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fad1 	bl	8001966 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d060      	beq.n	8003490 <f_open+0x2ec>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d05c      	beq.n	8003490 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	895b      	ldrh	r3, [r3, #10]
 80033e2:	025b      	lsls	r3, r3, #9
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	657b      	str	r3, [r7, #84]	; 0x54
 80033f2:	e016      	b.n	8003422 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fc50 	bl	8001c9e <get_fat>
 80033fe:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003402:	2b01      	cmp	r3, #1
 8003404:	d802      	bhi.n	800340c <f_open+0x268>
 8003406:	2302      	movs	r3, #2
 8003408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800340c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d102      	bne.n	800341a <f_open+0x276>
 8003414:	2301      	movs	r3, #1
 8003416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800341a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800341c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	657b      	str	r3, [r7, #84]	; 0x54
 8003422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <f_open+0x28e>
 800342a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800342c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342e:	429a      	cmp	r2, r3
 8003430:	d8e0      	bhi.n	80033f4 <f_open+0x250>
				}
				fp->clust = clst;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003436:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800343c:	2b00      	cmp	r3, #0
 800343e:	d127      	bne.n	8003490 <f_open+0x2ec>
 8003440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	2b00      	cmp	r3, #0
 8003448:	d022      	beq.n	8003490 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe fc06 	bl	8001c60 <clst2sect>
 8003454:	6478      	str	r0, [r7, #68]	; 0x44
 8003456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <f_open+0x2c0>
						res = FR_INT_ERR;
 800345c:	2302      	movs	r3, #2
 800345e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003462:	e015      	b.n	8003490 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003466:	0a5a      	lsrs	r2, r3, #9
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	441a      	add	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	7858      	ldrb	r0, [r3, #1]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	2301      	movs	r3, #1
 8003480:	f7fd fd26 	bl	8000ed0 <disk_read>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <f_open+0x2ec>
 800348a:	2301      	movs	r3, #1
 800348c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <f_open+0x2fa>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800349e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3764      	adds	r7, #100	; 0x64
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}

080034aa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08e      	sub	sp, #56	; 0x38
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f107 0214 	add.w	r2, r7, #20
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fdf4 	bl	80030b8 <validate>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80034d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <f_read+0x44>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	7c5b      	ldrb	r3, [r3, #17]
 80034e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <f_read+0x4a>
 80034ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034f2:	e109      	b.n	8003708 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	7c1b      	ldrb	r3, [r3, #16]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <f_read+0x5a>
 8003500:	2307      	movs	r3, #7
 8003502:	e101      	b.n	8003708 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	429a      	cmp	r2, r3
 8003516:	f240 80f2 	bls.w	80036fe <f_read+0x254>
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 800351e:	e0ee      	b.n	80036fe <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 80ba 	bne.w	80036a2 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	0a5b      	lsrs	r3, r3, #9
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	8952      	ldrh	r2, [r2, #10]
 8003538:	3a01      	subs	r2, #1
 800353a:	4013      	ands	r3, r2
 800353c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d123      	bne.n	800358c <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
 8003552:	e007      	b.n	8003564 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fe fb9e 	bl	8001c9e <get_fat>
 8003562:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	2b01      	cmp	r3, #1
 8003568:	d804      	bhi.n	8003574 <f_read+0xca>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2202      	movs	r2, #2
 800356e:	745a      	strb	r2, [r3, #17]
 8003570:	2302      	movs	r3, #2
 8003572:	e0c9      	b.n	8003708 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d104      	bne.n	8003586 <f_read+0xdc>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	745a      	strb	r2, [r3, #17]
 8003582:	2301      	movs	r3, #1
 8003584:	e0c0      	b.n	8003708 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358a:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f7fe fb63 	bl	8001c60 <clst2sect>
 800359a:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <f_read+0x102>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	745a      	strb	r2, [r3, #17]
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0ad      	b.n	8003708 <f_read+0x25e>
			sect += csect;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0a5b      	lsrs	r3, r3, #9
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d039      	beq.n	8003634 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	4413      	add	r3, r2
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	8952      	ldrh	r2, [r2, #10]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d905      	bls.n	80035da <f_read+0x130>
					cc = fs->csize - csect;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	895b      	ldrh	r3, [r3, #10]
 80035d2:	461a      	mov	r2, r3
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	7858      	ldrb	r0, [r3, #1]
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e4:	f7fd fc74 	bl	8000ed0 <disk_read>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <f_read+0x14e>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	745a      	strb	r2, [r3, #17]
 80035f4:	2301      	movs	r3, #1
 80035f6:	e087      	b.n	8003708 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	7c1b      	ldrb	r3, [r3, #16]
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da14      	bge.n	800362c <f_read+0x182>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360c:	429a      	cmp	r2, r3
 800360e:	d90d      	bls.n	800362c <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	025b      	lsls	r3, r3, #9
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	18d0      	adds	r0, r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3328      	adds	r3, #40	; 0x28
 8003622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003626:	4619      	mov	r1, r3
 8003628:	f7fe f97c 	bl	8001924 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	025b      	lsls	r3, r3, #9
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8003632:	e050      	b.n	80036d6 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	429a      	cmp	r2, r3
 800363c:	d02e      	beq.n	800369c <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	7c1b      	ldrb	r3, [r3, #16]
 8003642:	b25b      	sxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	da18      	bge.n	800367a <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	7858      	ldrb	r0, [r3, #1]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	2301      	movs	r3, #1
 8003658:	f7fd fca4 	bl	8000fa4 <disk_write>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <f_read+0x1c2>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	745a      	strb	r2, [r3, #17]
 8003668:	2301      	movs	r3, #1
 800366a:	e04d      	b.n	8003708 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	7c1b      	ldrb	r3, [r3, #16]
 8003670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	7858      	ldrb	r0, [r3, #1]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003684:	2301      	movs	r3, #1
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	f7fd fc22 	bl	8000ed0 <disk_read>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <f_read+0x1f2>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	745a      	strb	r2, [r3, #17]
 8003698:	2301      	movs	r3, #1
 800369a:	e035      	b.n	8003708 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d901      	bls.n	80036bc <f_read+0x212>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	4413      	add	r3, r2
 80036cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ce:	4619      	mov	r1, r3
 80036d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d2:	f7fe f927 	bl	8001924 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	441a      	add	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	441a      	add	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af0d 	bne.w	8003520 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3738      	adds	r7, #56	; 0x38
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f107 0208 	add.w	r2, r7, #8
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fcc9 	bl	80030b8 <validate>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d168      	bne.n	8003802 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7c1b      	ldrb	r3, [r3, #16]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d062      	beq.n	8003802 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7c1b      	ldrb	r3, [r3, #16]
 8003740:	b25b      	sxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	da15      	bge.n	8003772 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	7858      	ldrb	r0, [r3, #1]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	2301      	movs	r3, #1
 8003756:	f7fd fc25 	bl	8000fa4 <disk_write>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <f_sync+0x54>
 8003760:	2301      	movs	r3, #1
 8003762:	e04f      	b.n	8003804 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7c1b      	ldrb	r3, [r3, #16]
 8003768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376c:	b2da      	uxtb	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003772:	f7fd fe1b 	bl	80013ac <get_fattime>
 8003776:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f7fe f9d2 	bl	8001b2a <move_window>
 8003786:	4603      	mov	r3, r0
 8003788:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d138      	bne.n	8003802 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	330b      	adds	r3, #11
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	330b      	adds	r3, #11
 80037a0:	f042 0220 	orr.w	r2, r2, #32
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	461a      	mov	r2, r3
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	f7fe fef4 	bl	80025a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f103 021c 	add.w	r2, r3, #28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7fe f881 	bl	80018cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3316      	adds	r3, #22
 80037ce:	6939      	ldr	r1, [r7, #16]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe f87b 	bl	80018cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3312      	adds	r3, #18
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe f85a 	bl	8001896 <st_word>
					fs->wflag = 1;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2201      	movs	r2, #1
 80037e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe f9ca 	bl	8001b84 <sync_fs>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7c1b      	ldrb	r3, [r3, #16]
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003802:	7dfb      	ldrb	r3, [r7, #23]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff7b 	bl	8003710 <f_sync>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10e      	bne.n	8003842 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f107 0208 	add.w	r2, r7, #8
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fc43 	bl	80030b8 <validate>
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f107 0208 	add.w	r2, r7, #8
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fc2a 	bl	80030b8 <validate>
 8003864:	4603      	mov	r3, r0
 8003866:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003868:	7ffb      	ldrb	r3, [r7, #31]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <f_lseek+0x28>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7c5b      	ldrb	r3, [r3, #17]
 8003872:	77fb      	strb	r3, [r7, #31]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <f_lseek+0x32>
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	e10f      	b.n	8003a9e <f_lseek+0x252>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d908      	bls.n	800389a <f_lseek+0x4e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7c1b      	ldrb	r3, [r3, #16]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	615a      	str	r2, [r3, #20]
		if (ofs > 0) {
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a7 	beq.w	8003a00 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	895b      	ldrh	r3, [r3, #10]
 80038b6:	025b      	lsls	r3, r3, #9
 80038b8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1e59      	subs	r1, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d30f      	bcc.n	80038f8 <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	425b      	negs	r3, r3
 80038e0:	401a      	ands	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e022      	b.n	800393e <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d119      	bne.n	8003938 <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fbb9 	bl	8002080 <create_chain>
 800390e:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d104      	bne.n	8003920 <f_lseek+0xd4>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	745a      	strb	r2, [r3, #17]
 800391c:	2302      	movs	r3, #2
 800391e:	e0be      	b.n	8003a9e <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d104      	bne.n	8003932 <f_lseek+0xe6>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	745a      	strb	r2, [r3, #17]
 800392e:	2301      	movs	r3, #1
 8003930:	e0b5      	b.n	8003a9e <f_lseek+0x252>
					fp->obj.sclust = clst;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05d      	beq.n	8003a00 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 8003944:	e03a      	b.n	80039bc <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7c1b      	ldrb	r3, [r3, #16]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <f_lseek+0x132>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69b9      	ldr	r1, [r7, #24]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fb88 	bl	8002080 <create_chain>
 8003970:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <f_lseek+0x13e>
							ofs = 0; break;
 8003978:	2300      	movs	r3, #0
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	e022      	b.n	80039c4 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe f98b 	bl	8001c9e <get_fat>
 8003988:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d104      	bne.n	800399c <f_lseek+0x150>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	745a      	strb	r2, [r3, #17]
 8003998:	2301      	movs	r3, #1
 800399a:	e080      	b.n	8003a9e <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d904      	bls.n	80039ac <f_lseek+0x160>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d304      	bcc.n	80039b6 <f_lseek+0x16a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	745a      	strb	r2, [r3, #17]
 80039b2:	2302      	movs	r3, #2
 80039b4:	e073      	b.n	8003a9e <f_lseek+0x252>
					fp->clust = clst;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d8c0      	bhi.n	8003946 <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <f_lseek+0x1b4>
					nsect = clst2sect(fs, clst);	/* Current sector */
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	69b9      	ldr	r1, [r7, #24]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe f93e 	bl	8001c60 <clst2sect>
 80039e4:	6178      	str	r0, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <f_lseek+0x1aa>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	745a      	strb	r2, [r3, #17]
 80039f2:	2302      	movs	r3, #2
 80039f4:	e053      	b.n	8003a9e <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	0a5b      	lsrs	r3, r3, #9
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d90a      	bls.n	8003a22 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7c1b      	ldrb	r3, [r3, #16]
 8003a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d036      	beq.n	8003a9c <f_lseek+0x250>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d031      	beq.n	8003a9c <f_lseek+0x250>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7c1b      	ldrb	r3, [r3, #16]
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da18      	bge.n	8003a74 <f_lseek+0x228>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	7858      	ldrb	r0, [r3, #1]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	2301      	movs	r3, #1
 8003a52:	f7fd faa7 	bl	8000fa4 <disk_write>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <f_lseek+0x21a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	745a      	strb	r2, [r3, #17]
 8003a62:	2301      	movs	r3, #1
 8003a64:	e01b      	b.n	8003a9e <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7c1b      	ldrb	r3, [r3, #16]
 8003a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	7858      	ldrb	r0, [r3, #1]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003a7e:	2301      	movs	r3, #1
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	f7fd fa25 	bl	8000ed0 <disk_read>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <f_lseek+0x24a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	745a      	strb	r2, [r3, #17]
 8003a92:	2301      	movs	r3, #1
 8003a94:	e003      	b.n	8003a9e <f_lseek+0x252>
#endif
			fp->sect = nsect;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 8003a9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <f_opendir+0x14>
 8003ab6:	2309      	movs	r3, #9
 8003ab8:	e04a      	b.n	8003b50 <f_opendir+0xaa>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8003aba:	f107 0108 	add.w	r1, r7, #8
 8003abe:	463b      	mov	r3, r7
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f8a0 	bl	8002c08 <find_volume>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d137      	bne.n	8003b42 <f_opendir+0x9c>
		dp->obj.fs = fs;
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fe ff89 	bl	80029f4 <follow_path>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d125      	bne.n	8003b38 <f_opendir+0x92>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003af2:	b25b      	sxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db12      	blt.n	8003b1e <f_opendir+0x78>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	799b      	ldrb	r3, [r3, #6]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <f_opendir+0x74>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fe fd28 	bl	8002562 <ld_clust>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	e001      	b.n	8003b1e <f_opendir+0x78>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <f_opendir+0x92>
				dp->obj.id = fs->id;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	88da      	ldrh	r2, [r3, #6]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fbbf 	bl	80022b2 <dir_sdi>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d101      	bne.n	8003b42 <f_opendir+0x9c>
 8003b3e:	2305      	movs	r3, #5
 8003b40:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <f_opendir+0xa8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f107 0208 	add.w	r2, r7, #8
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff faa5 	bl	80030b8 <validate>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <f_closedir+0x26>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f107 0208 	add.w	r2, r7, #8
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fa8c 	bl	80030b8 <validate>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d126      	bne.n	8003bf8 <f_readdir+0x70>
		if (!fno) {
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fb7d 	bl	80022b2 <dir_sdi>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e01c      	b.n	8003bf8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7fe fd0d 	bl	80025e0 <dir_read>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d101      	bne.n	8003bd4 <f_readdir+0x4c>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10e      	bne.n	8003bf8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fe fde3 	bl	80027a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8003be2:	2100      	movs	r1, #0
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fe fbdf 	bl	80023a8 <dir_next>
 8003bea:	4603      	mov	r3, r0
 8003bec:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d101      	bne.n	8003bf8 <f_readdir+0x70>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <scanDir>:

int pOpen = 0;
int mOpen = 0;

FRESULT scanDir(char* path, char *t[], uint8_t size, uint8_t page)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b093      	sub	sp, #76	; 0x4c
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	461a      	mov	r2, r3
 8003c12:	460b      	mov	r3, r1
 8003c14:	71fb      	strb	r3, [r7, #7]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
	FRESULT res;
	DIR dir;
	static FILINFO fno;
	volatile int ile = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]

	res = f_opendir(&dir,path);
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff3c 	bl	8003aa6 <f_opendir>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if(res == FR_OK)
 8003c34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d13f      	bne.n	8003cbc <scanDir+0xb8>
	{
		dir.dptr = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
		while(i<size)
 8003c40:	e038      	b.n	8003cb4 <scanDir+0xb0>
		{
			res = f_readdir(&dir,&fno);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4923      	ldr	r1, [pc, #140]	; (8003cd4 <scanDir+0xd0>)
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff9d 	bl	8003b88 <f_readdir>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if(res != FR_OK || fno.fname[0] == 0){
 8003c54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <scanDir+0x60>
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <scanDir+0xd0>)
 8003c5e:	7a5b      	ldrb	r3, [r3, #9]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <scanDir+0x72>
				t[i++]="";
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	647a      	str	r2, [r7, #68]	; 0x44
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4413      	add	r3, r2
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <scanDir+0xd4>)
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e01e      	b.n	8003cb4 <scanDir+0xb0>
			}
			else if(fno.fattrib & AM_SYS) continue;
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <scanDir+0xd0>)
 8003c78:	7a1b      	ldrb	r3, [r3, #8]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d000      	beq.n	8003c84 <scanDir+0x80>
 8003c82:	e017      	b.n	8003cb4 <scanDir+0xb0>
			else{
				t[i] = strdup(fno.fname);
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	18d4      	adds	r4, r2, r3
 8003c8c:	4813      	ldr	r0, [pc, #76]	; (8003cdc <scanDir+0xd8>)
 8003c8e:	f005 fe87 	bl	80099a0 <strdup>
 8003c92:	4603      	mov	r3, r0
 8003c94:	6023      	str	r3, [r4, #0]
				i++;
 8003c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c98:	3301      	adds	r3, #1
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
				if(page > 0 && i == 5)
 8003c9c:	79bb      	ldrb	r3, [r7, #6]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <scanDir+0xae>
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d104      	bne.n	8003cb2 <scanDir+0xae>
				{
					page--;
 8003ca8:	79bb      	ldrb	r3, [r7, #6]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	71bb      	strb	r3, [r7, #6]
					i=0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
				}
				continue;
 8003cb2:	bf00      	nop
		while(i<size)
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbc2      	blt.n	8003c42 <scanDir+0x3e>
		if(i<size)
		{

		}
	}
	f_closedir(&dir);
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff49 	bl	8003b58 <f_closedir>
	return res;
 8003cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	374c      	adds	r7, #76	; 0x4c
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200000bc 	.word	0x200000bc
 8003cd8:	08009a3c 	.word	0x08009a3c
 8003cdc:	200000c5 	.word	0x200000c5

08003ce0 <openFile>:

FRESULT openFile(char *fName, FIL* pFile)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
	f_close (pFile);
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f7ff fd8e 	bl	800380c <f_close>
	unsigned snl = strlen(fName);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fc fa73 	bl	80001dc <strlen>
 8003cf6:	6138      	str	r0, [r7, #16]
	FRESULT fResult;
	UINT r;
	if(snl>5)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b05      	cmp	r3, #5
 8003cfc:	d938      	bls.n	8003d70 <openFile+0x90>
	{
		char tmp[5];
		//memcpy(tmp,&fName[sizeof(fName)-5],4);
		memcpy(tmp,&fName[snl-4],4);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3b04      	subs	r3, #4
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60bb      	str	r3, [r7, #8]
		tmp[4]='\0';
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	733b      	strb	r3, [r7, #12]
		if(strcmp(tmp,".wav")==0)
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	491b      	ldr	r1, [pc, #108]	; (8003d80 <openFile+0xa0>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fa57 	bl	80001c8 <strcmp>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <openFile+0x48>
		{
			mOpen = 1;
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <openFile+0xa4>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e01b      	b.n	8003d60 <openFile+0x80>
		}
		else if(strcmp(tmp,".mp3")==0)
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4916      	ldr	r1, [pc, #88]	; (8003d88 <openFile+0xa8>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fa4a 	bl	80001c8 <strcmp>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <openFile+0x62>
		{
			mOpen = 1;
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <openFile+0xa4>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e00e      	b.n	8003d60 <openFile+0x80>
		}
		else if(strcmp(tmp,".txt")==0)
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	4911      	ldr	r1, [pc, #68]	; (8003d8c <openFile+0xac>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fa3d 	bl	80001c8 <strcmp>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <openFile+0x7c>
		{
			pOpen = 1;
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <openFile+0xb0>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e001      	b.n	8003d60 <openFile+0x80>
		}
		else
		{
			return FR_INVALID_PARAMETER;
 8003d5c:	2313      	movs	r3, #19
 8003d5e:	e00a      	b.n	8003d76 <openFile+0x96>
		}
		fResult = f_open(pFile, fName, FA_READ );
 8003d60:	2201      	movs	r2, #1
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	6838      	ldr	r0, [r7, #0]
 8003d66:	f7ff fa1d 	bl	80031a4 <f_open>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]
 8003d6e:	e001      	b.n	8003d74 <openFile+0x94>
	}
	else fResult = FR_INVALID_PARAMETER;
 8003d70:	2313      	movs	r3, #19
 8003d72:	75fb      	strb	r3, [r7, #23]
	return fResult;
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08009a40 	.word	0x08009a40
 8003d84:	200000b8 	.word	0x200000b8
 8003d88:	08009a48 	.word	0x08009a48
 8003d8c:	08009a50 	.word	0x08009a50
 8003d90:	200000b4 	.word	0x200000b4

08003d94 <setUp>:
	FRESULT fResult = f_close (&pFile);
	return fResult;
}

unsigned long setUp(FIL* pFile, I2S_HandleTypeDef *hi2s3, unsigned *ch)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
	unsigned br;
	FRESULT f;
	uint8_t data1[1];
	uint16_t data2[1];
	uint32_t data4[1];
	for (int i = 0; i < 4; i++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	e00a      	b.n	8003dbc <setUp+0x28>
	{
		f_read(pFile,data1,1,&br);
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	f107 0118 	add.w	r1, r7, #24
 8003dae:	2201      	movs	r2, #1
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff fb7a 	bl	80034aa <f_read>
	for (int i = 0; i < 4; i++)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	3301      	adds	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	ddf1      	ble.n	8003da6 <setUp+0x12>
	}
	f_read(pFile,data4,4,&br);
 8003dc2:	f107 031c 	add.w	r3, r7, #28
 8003dc6:	f107 0110 	add.w	r1, r7, #16
 8003dca:	2204      	movs	r2, #4
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fb6c 	bl	80034aa <f_read>
	f_read(pFile,data4,4,&br);
 8003dd2:	f107 031c 	add.w	r3, r7, #28
 8003dd6:	f107 0110 	add.w	r1, r7, #16
 8003dda:	2204      	movs	r2, #4
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff fb64 	bl	80034aa <f_read>
	f_read(pFile,data4,4,&br);
 8003de2:	f107 031c 	add.w	r3, r7, #28
 8003de6:	f107 0110 	add.w	r1, r7, #16
 8003dea:	2204      	movs	r2, #4
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff fb5c 	bl	80034aa <f_read>
	f_read(pFile,data4,4,&br);
 8003df2:	f107 031c 	add.w	r3, r7, #28
 8003df6:	f107 0110 	add.w	r1, r7, #16
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff fb54 	bl	80034aa <f_read>
	f_read(pFile,data2,2,&br);
 8003e02:	f107 031c 	add.w	r3, r7, #28
 8003e06:	f107 0114 	add.w	r1, r7, #20
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fb4c 	bl	80034aa <f_read>
	f_lseek(pFile,22);
 8003e12:	2116      	movs	r1, #22
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fd19 	bl	800384c <f_lseek>

	f_read(pFile,data2,2,&br);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	f107 0114 	add.w	r1, r7, #20
 8003e22:	2202      	movs	r2, #2
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff fb40 	bl	80034aa <f_read>

	*ch = (unsigned)data2[0];
 8003e2a:	8abb      	ldrh	r3, [r7, #20]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]

	f_read(pFile,data4,4,&br);
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	f107 0110 	add.w	r1, r7, #16
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fb34 	bl	80034aa <f_read>
	switch(data4[0])
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003e48:	d025      	beq.n	8003e96 <setUp+0x102>
 8003e4a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003e4e:	d807      	bhi.n	8003e60 <setUp+0xcc>
 8003e50:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003e54:	d029      	beq.n	8003eaa <setUp+0x116>
 8003e56:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d020      	beq.n	8003ea0 <setUp+0x10c>
		break;
	case 8000:
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_8K;
		break;
	default:
		break;
 8003e5e:	e029      	b.n	8003eb4 <setUp+0x120>
	switch(data4[0])
 8003e60:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003e64:	d00d      	beq.n	8003e82 <setUp+0xee>
 8003e66:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <setUp+0xe4>
 8003e6e:	f245 6222 	movw	r2, #22050	; 0x5622
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00a      	beq.n	8003e8c <setUp+0xf8>
		break;
 8003e76:	e01d      	b.n	8003eb4 <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003e7e:	615a      	str	r2, [r3, #20]
		break;
 8003e80:	e018      	b.n	8003eb4 <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003e88:	615a      	str	r2, [r3, #20]
		break;
 8003e8a:	e013      	b.n	8003eb4 <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_22K;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f245 6222 	movw	r2, #22050	; 0x5622
 8003e92:	615a      	str	r2, [r3, #20]
		break;
 8003e94:	e00e      	b.n	8003eb4 <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003e9c:	615a      	str	r2, [r3, #20]
		break;
 8003e9e:	e009      	b.n	8003eb4 <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_11K;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003ea6:	615a      	str	r2, [r3, #20]
		break;
 8003ea8:	e004      	b.n	8003eb4 <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003eb0:	615a      	str	r2, [r3, #20]
		break;
 8003eb2:	bf00      	nop
	}
	f_lseek(pFile, 34);
 8003eb4:	2122      	movs	r1, #34	; 0x22
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fcc8 	bl	800384c <f_lseek>
	// 8 | 16
	f_read(pFile,data2,2,&br);
 8003ebc:	f107 031c 	add.w	r3, r7, #28
 8003ec0:	f107 0114 	add.w	r1, r7, #20
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff faef 	bl	80034aa <f_read>
	f_lseek(pFile, 40);
 8003ecc:	2128      	movs	r1, #40	; 0x28
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff fcbc 	bl	800384c <f_lseek>
	f_read(pFile,data4,4,&br);
 8003ed4:	f107 031c 	add.w	r3, r7, #28
 8003ed8:	f107 0110 	add.w	r1, r7, #16
 8003edc:	2204      	movs	r2, #4
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff fae3 	bl	80034aa <f_read>
	unsigned long sdata = data4[0];
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	623b      	str	r3, [r7, #32]
	return sdata;
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3728      	adds	r7, #40	; 0x28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <readData>:

//FRESULT readData(uint16_t *data1, uint16_t *data2, FIL* pFile, unsigned size)
FRESULT readData(uint16_t *data, FIL* pFile, unsigned size)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
	UINT br;
	FRESULT fResult = f_read(pFile,data,size,&br);
 8003efe:	f107 0310 	add.w	r3, r7, #16
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	68b8      	ldr	r0, [r7, #8]
 8003f08:	f7ff facf 	bl	80034aa <f_read>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	75fb      	strb	r3, [r7, #23]



	return fResult;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <fatInit>:

FRESULT fatInit(FATFS *fat)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	FRESULT fResult = f_mount(fat, "", 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	4905      	ldr	r1, [pc, #20]	; (8003f3c <fatInit+0x20>)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff f8fb 	bl	8003124 <f_mount>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
	return fResult;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	08009a3c 	.word	0x08009a3c

08003f40 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM4_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d133      	bne.n	8003fba <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		if(filesize>0 && stop==0)
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02f      	beq.n	8003fba <HAL_TIM_PeriodElapsedCallback+0x7a>
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12b      	bne.n	8003fba <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
			while(HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_BUSY_TX)
 8003f62:	bf00      	nop
 8003f64:	481a      	ldr	r0, [pc, #104]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003f66:	f003 fb5f 	bl	8007628 <HAL_I2S_GetState>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d0f9      	beq.n	8003f64 <HAL_TIM_PeriodElapsedCallback+0x24>
			{
				filesize = 0;
				closeFile(&mfile);
			}*/

			if(filesize<SM)
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f64a 4243 	movw	r2, #44099	; 0xac43
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d80b      	bhi.n	8003f94 <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				HAL_I2S_Transmit_DMA(&hi2s3, audio, filesize);
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	4913      	ldr	r1, [pc, #76]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003f86:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003f88:	f003 fa7e 	bl	8007488 <HAL_I2S_Transmit_DMA>
				filesize = 0;
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
				filesize -= SM;
				readData(audio, &mfile,SM);
			}
		}
	}
}
 8003f92:	e012      	b.n	8003fba <HAL_TIM_PeriodElapsedCallback+0x7a>
				HAL_I2S_Transmit_DMA(&hi2s3, audio, SM);
 8003f94:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003f98:	490e      	ldr	r1, [pc, #56]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003f9a:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003f9c:	f003 fa74 	bl	8007488 <HAL_I2S_Transmit_DMA>
				filesize -= SM;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f5a3 432c 	sub.w	r3, r3, #44032	; 0xac00
 8003fa8:	3b44      	subs	r3, #68	; 0x44
 8003faa:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003fac:	6013      	str	r3, [r2, #0]
				readData(audio, &mfile,SM);
 8003fae:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003fb2:	4909      	ldr	r1, [pc, #36]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003fb4:	4807      	ldr	r0, [pc, #28]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003fb6:	f7ff ff9c 	bl	8003ef2 <readData>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	20000304 	.word	0x20000304
 8003fcc:	2000030d 	.word	0x2000030d
 8003fd0:	20016344 	.word	0x20016344
 8003fd4:	200009f8 	.word	0x200009f8
 8003fd8:	2001638c 	.word	0x2001638c

08003fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fe2:	f001 fa67 	bl	80054b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fe6:	f000 f9e7 	bl	80043b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fea:	f000 fbe5 	bl	80047b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fee:	f000 fb77 	bl	80046e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8003ff2:	f000 fabd 	bl	8004570 <MX_SPI1_Init>
  MX_I2C1_Init();
 8003ff6:	f000 fa5f 	bl	80044b8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8003ffa:	f000 fa8b 	bl	8004514 <MX_I2S3_Init>
  MX_TIM4_Init();
 8003ffe:	f000 fb23 	bl	8004648 <MX_TIM4_Init>
  MX_SPI2_Init();
 8004002:	f000 faeb 	bl	80045dc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  char* ts = "au.wav";
 8004006:	4baf      	ldr	r3, [pc, #700]	; (80042c4 <main+0x2e8>)
 8004008:	60bb      	str	r3, [r7, #8]




  fresult = fatInit(&FatFs);
 800400a:	48af      	ldr	r0, [pc, #700]	; (80042c8 <main+0x2ec>)
 800400c:	f7ff ff86 	bl	8003f1c <fatInit>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4bad      	ldr	r3, [pc, #692]	; (80042cc <main+0x2f0>)
 8004016:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1);
 8004018:	2001      	movs	r0, #1
 800401a:	f001 fabd 	bl	8005598 <HAL_Delay>
  fresult = openFile(ts, &mfile);
 800401e:	49ac      	ldr	r1, [pc, #688]	; (80042d0 <main+0x2f4>)
 8004020:	68b8      	ldr	r0, [r7, #8]
 8004022:	f7ff fe5d 	bl	8003ce0 <openFile>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	4ba8      	ldr	r3, [pc, #672]	; (80042cc <main+0x2f0>)
 800402c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1);
 800402e:	2001      	movs	r0, #1
 8004030:	f001 fab2 	bl	8005598 <HAL_Delay>
  filesize = setUp(&mfile, &hi2s3, &chs);
 8004034:	4aa7      	ldr	r2, [pc, #668]	; (80042d4 <main+0x2f8>)
 8004036:	49a8      	ldr	r1, [pc, #672]	; (80042d8 <main+0x2fc>)
 8004038:	48a5      	ldr	r0, [pc, #660]	; (80042d0 <main+0x2f4>)
 800403a:	f7ff feab 	bl	8003d94 <setUp>
 800403e:	4602      	mov	r2, r0
 8004040:	4ba6      	ldr	r3, [pc, #664]	; (80042dc <main+0x300>)
 8004042:	601a      	str	r2, [r3, #0]
  HAL_Delay(1);
 8004044:	2001      	movs	r0, #1
 8004046:	f001 faa7 	bl	8005598 <HAL_Delay>
    volatile int v1 = 1;*/


  	//readData(read,&mfile,SM);
  	//HAL_DMA_Start(&hdma_memtomem_dma2_stream0, *read, *sample, SM);
  	readData(audio,&mfile,SM);
 800404a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800404e:	49a0      	ldr	r1, [pc, #640]	; (80042d0 <main+0x2f4>)
 8004050:	48a3      	ldr	r0, [pc, #652]	; (80042e0 <main+0x304>)
 8004052:	f7ff ff4e 	bl	8003ef2 <readData>
  	//readData(read,&mfile,SM);
    CS43_Start(&hi2c1);
 8004056:	48a3      	ldr	r0, [pc, #652]	; (80042e4 <main+0x308>)
 8004058:	f7fc fa48 	bl	80004ec <CS43_Start>

    int lll = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
    setVolume(&hi2c1,100);
 8004060:	2164      	movs	r1, #100	; 0x64
 8004062:	48a0      	ldr	r0, [pc, #640]	; (80042e4 <main+0x308>)
 8004064:	f7fc fc12 	bl	800088c <setVolume>


    //HAL_TIM_Base_Start_IT(&htim4);
    //filesize = 1;
    displayInit();
 8004068:	f7fd f9aa 	bl	80013c0 <displayInit>
	  HAL_Delay(500);*/

	  //HAL_I2S_Transmit_DMA(&hi2s3, sample, 2);
		//while(HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_BUSY_TX)
		//{}
	  	  if(stop==0)
 800406c:	4b9e      	ldr	r3, [pc, #632]	; (80042e8 <main+0x30c>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d135      	bne.n	80040e0 <main+0x104>
	  	  {
	  		if(lll<SM)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f64a 4243 	movw	r2, #44099	; 0xac43
 800407a:	4293      	cmp	r3, r2
 800407c:	dc10      	bgt.n	80040a0 <main+0xc4>
	  			  	{
	  			  		//HAL_I2S_Transmit(&hi2s3, &audio[lll], 2, 20);
	  			  		//HAL_I2S_Transmit_DMA(&hi2s3, audio, SM);
	  			  		HAL_I2S_Transmit_DMA(&hi2s3, audio, SM);
 800407e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004082:	4997      	ldr	r1, [pc, #604]	; (80042e0 <main+0x304>)
 8004084:	4894      	ldr	r0, [pc, #592]	; (80042d8 <main+0x2fc>)
 8004086:	f003 f9ff 	bl	8007488 <HAL_I2S_Transmit_DMA>
	  			  		//HAL_I2S_Transmit_DMA(&hi2s3, &audio[lll++], 1);
	  			  		//HAL_I2S_Transmit_DMA(&hi2s3, &audio[lll++], 1);
	  			  		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 800408a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800408e:	4897      	ldr	r0, [pc, #604]	; (80042ec <main+0x310>)
 8004090:	f002 f8ef 	bl	8006272 <HAL_GPIO_TogglePin>
	  			  		//HAL_I2S_Transmit_DMA(&hi2s3, &audio[lll], 2);
	  			  		//HAL_I2S_Transmit(&hi2s3, &audio[lll], 2, 5);
	  			  		lll+=SM;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 432c 	add.w	r3, r3, #44032	; 0xac00
 800409a:	3344      	adds	r3, #68	; 0x44
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e01f      	b.n	80040e0 <main+0x104>
	  			  	}
	  			  	else
	  			  	{
	  			  		lll=0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
	  			  		if(filesize<SM)
 80040a4:	4b8d      	ldr	r3, [pc, #564]	; (80042dc <main+0x300>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f64a 4243 	movw	r2, #44099	; 0xac43
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d80a      	bhi.n	80040c6 <main+0xea>
	  					{
	  						readData(audio,&mfile,filesize);
 80040b0:	4b8a      	ldr	r3, [pc, #552]	; (80042dc <main+0x300>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4986      	ldr	r1, [pc, #536]	; (80042d0 <main+0x2f4>)
 80040b8:	4889      	ldr	r0, [pc, #548]	; (80042e0 <main+0x304>)
 80040ba:	f7ff ff1a 	bl	8003ef2 <readData>
	  						filesize=0;
 80040be:	4b87      	ldr	r3, [pc, #540]	; (80042dc <main+0x300>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e00c      	b.n	80040e0 <main+0x104>
	  					}
	  					else
	  					{
	  						readData(audio,&mfile,SM);
 80040c6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80040ca:	4981      	ldr	r1, [pc, #516]	; (80042d0 <main+0x2f4>)
 80040cc:	4884      	ldr	r0, [pc, #528]	; (80042e0 <main+0x304>)
 80040ce:	f7ff ff10 	bl	8003ef2 <readData>
	  						filesize-=SM;
 80040d2:	4b82      	ldr	r3, [pc, #520]	; (80042dc <main+0x300>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f5a3 432c 	sub.w	r3, r3, #44032	; 0xac00
 80040da:	3b44      	subs	r3, #68	; 0x44
 80040dc:	4a7f      	ldr	r2, [pc, #508]	; (80042dc <main+0x300>)
 80040de:	6013      	str	r3, [r2, #0]
	  			  	}
	  	  }



	  if(K0)
 80040e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040e4:	4882      	ldr	r0, [pc, #520]	; (80042f0 <main+0x314>)
 80040e6:	f002 f893 	bl	8006210 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d127      	bne.n	8004140 <main+0x164>
	  {
		  if(pr) continue;
 80040f0:	4b80      	ldr	r3, [pc, #512]	; (80042f4 <main+0x318>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 8146 	bne.w	8004386 <main+0x3aa>
		  pr=1;
 80040fa:	4b7e      	ldr	r3, [pc, #504]	; (80042f4 <main+0x318>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
		  if(fresult!=FR_OK)
 8004100:	4b72      	ldr	r3, [pc, #456]	; (80042cc <main+0x2f0>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d009      	beq.n	800411c <main+0x140>
		  {
			  fresult = fatInit(&FatFs);
 8004108:	486f      	ldr	r0, [pc, #444]	; (80042c8 <main+0x2ec>)
 800410a:	f7ff ff07 	bl	8003f1c <fatInit>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <main+0x2f0>)
 8004114:	701a      	strb	r2, [r3, #0]
			  displayInit();
 8004116:	f7fd f953 	bl	80013c0 <displayInit>
 800411a:	e7a7      	b.n	800406c <main+0x90>
		  }
		  else
		  {
			  mode = (mode+1)%2;
 800411c:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <main+0x31c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	bfb8      	it	lt
 800412a:	425b      	neglt	r3, r3
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b72      	ldr	r3, [pc, #456]	; (80042f8 <main+0x31c>)
 8004130:	701a      	strb	r2, [r3, #0]
			  //change mode
			  fpos = 0;
 8004132:	4b72      	ldr	r3, [pc, #456]	; (80042fc <main+0x320>)
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
			  update(&fpos);
 8004138:	4870      	ldr	r0, [pc, #448]	; (80042fc <main+0x320>)
 800413a:	f7fd fa99 	bl	8001670 <update>
 800413e:	e795      	b.n	800406c <main+0x90>
		  }

	  }
	  else if(K1)	//stop play
 8004140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004144:	486a      	ldr	r0, [pc, #424]	; (80042f0 <main+0x314>)
 8004146:	f002 f863 	bl	8006210 <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d142      	bne.n	80041d6 <main+0x1fa>
	  {
		  HAL_StatusTypeDef status;
		 if(pr) continue;
 8004150:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <main+0x318>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 8118 	bne.w	800438a <main+0x3ae>
		 pr=1;
 800415a:	4b66      	ldr	r3, [pc, #408]	; (80042f4 <main+0x318>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]
		 stop = (++stop)%2;
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <main+0x30c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b5f      	ldr	r3, [pc, #380]	; (80042e8 <main+0x30c>)
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <main+0x30c>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b5c      	ldr	r3, [pc, #368]	; (80042e8 <main+0x30c>)
 8004178:	701a      	strb	r2, [r3, #0]
		 if(stop){
 800417a:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <main+0x30c>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d011      	beq.n	80041a6 <main+0x1ca>
			 while ((status = HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x0F, 1, 253, 1, 100)) != HAL_OK);
 8004182:	2364      	movs	r3, #100	; 0x64
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	2301      	movs	r3, #1
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	23fd      	movs	r3, #253	; 0xfd
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2301      	movs	r3, #1
 8004190:	220f      	movs	r2, #15
 8004192:	2194      	movs	r1, #148	; 0x94
 8004194:	4853      	ldr	r0, [pc, #332]	; (80042e4 <main+0x308>)
 8004196:	f002 f9bf 	bl	8006518 <HAL_I2C_Mem_Write>
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ee      	bne.n	8004182 <main+0x1a6>
 80041a4:	e762      	b.n	800406c <main+0x90>
		 }
		 else{
			 while ((status = HAL_I2C_Mem_Write(&hi2c1, 0x94, 0x0F, 1, 0, 1, 100)) != HAL_OK);
 80041a6:	2364      	movs	r3, #100	; 0x64
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	2301      	movs	r3, #1
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2301      	movs	r3, #1
 80041b4:	220f      	movs	r2, #15
 80041b6:	2194      	movs	r1, #148	; 0x94
 80041b8:	484a      	ldr	r0, [pc, #296]	; (80042e4 <main+0x308>)
 80041ba:	f002 f9ad 	bl	8006518 <HAL_I2C_Mem_Write>
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ee      	bne.n	80041a6 <main+0x1ca>
			 setVolume(&hi2c1,volume);
 80041c8:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <main+0x324>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	4845      	ldr	r0, [pc, #276]	; (80042e4 <main+0x308>)
 80041d0:	f7fc fb5c 	bl	800088c <setVolume>
 80041d4:	e74a      	b.n	800406c <main+0x90>
		 }
	  }
	  else if(K2)
 80041d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041da:	4845      	ldr	r0, [pc, #276]	; (80042f0 <main+0x314>)
 80041dc:	f002 f818 	bl	8006210 <HAL_GPIO_ReadPin>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d117      	bne.n	8004216 <main+0x23a>
	  {
		  if(pr) continue;
 80041e6:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <main+0x318>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 80cf 	bne.w	800438e <main+0x3b2>
		  pr=1;
 80041f0:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <main+0x318>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
		  if(volume<100) volume+=10;
 80041f6:	4b42      	ldr	r3, [pc, #264]	; (8004300 <main+0x324>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b63      	cmp	r3, #99	; 0x63
 80041fc:	dc04      	bgt.n	8004208 <main+0x22c>
 80041fe:	4b40      	ldr	r3, [pc, #256]	; (8004300 <main+0x324>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330a      	adds	r3, #10
 8004204:	4a3e      	ldr	r2, [pc, #248]	; (8004300 <main+0x324>)
 8004206:	6013      	str	r3, [r2, #0]
		  setVolume(&hi2c1,volume);
 8004208:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <main+0x324>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	4835      	ldr	r0, [pc, #212]	; (80042e4 <main+0x308>)
 8004210:	f7fc fb3c 	bl	800088c <setVolume>
 8004214:	e72a      	b.n	800406c <main+0x90>
	  }
	  else if(K3)
 8004216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800421a:	4835      	ldr	r0, [pc, #212]	; (80042f0 <main+0x314>)
 800421c:	f001 fff8 	bl	8006210 <HAL_GPIO_ReadPin>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d117      	bne.n	8004256 <main+0x27a>
	  {
		  if(pr) continue;
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <main+0x318>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 80b1 	bne.w	8004392 <main+0x3b6>
		  pr=1;
 8004230:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <main+0x318>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
		  if(volume>0) volume-=10;
 8004236:	4b32      	ldr	r3, [pc, #200]	; (8004300 <main+0x324>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	dd04      	ble.n	8004248 <main+0x26c>
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <main+0x324>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3b0a      	subs	r3, #10
 8004244:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <main+0x324>)
 8004246:	6013      	str	r3, [r2, #0]
		  setVolume(&hi2c1,volume);
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <main+0x324>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	4825      	ldr	r0, [pc, #148]	; (80042e4 <main+0x308>)
 8004250:	f7fc fb1c 	bl	800088c <setVolume>
 8004254:	e70a      	b.n	800406c <main+0x90>
	  }
	  else if(K4)
 8004256:	2102      	movs	r1, #2
 8004258:	4825      	ldr	r0, [pc, #148]	; (80042f0 <main+0x314>)
 800425a:	f001 ffd9 	bl	8006210 <HAL_GPIO_ReadPin>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <main+0x2ac>
	  {
		  if(pr) continue;
 8004264:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <main+0x318>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8094 	bne.w	8004396 <main+0x3ba>
		  pr=1;
 800426e:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <main+0x318>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]
		  goBack(&fpos);
 8004274:	4821      	ldr	r0, [pc, #132]	; (80042fc <main+0x320>)
 8004276:	f7fd f9af 	bl	80015d8 <goBack>
		  fpos=0;
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <main+0x320>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
		  update(&fpos);
 8004280:	481e      	ldr	r0, [pc, #120]	; (80042fc <main+0x320>)
 8004282:	f7fd f9f5 	bl	8001670 <update>
 8004286:	e6f1      	b.n	800406c <main+0x90>
	  }
	  else if(K5)
 8004288:	2101      	movs	r1, #1
 800428a:	4819      	ldr	r0, [pc, #100]	; (80042f0 <main+0x314>)
 800428c:	f001 ffc0 	bl	8006210 <HAL_GPIO_ReadPin>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d136      	bne.n	8004304 <main+0x328>
	  {
		  if(pr) continue;
 8004296:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <main+0x318>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d17d      	bne.n	800439a <main+0x3be>
		  pr=1;
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <main+0x318>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
		  //open
		  if(open(&fpos, &mfile)==1) {
 80042a4:	490a      	ldr	r1, [pc, #40]	; (80042d0 <main+0x2f4>)
 80042a6:	4815      	ldr	r0, [pc, #84]	; (80042fc <main+0x320>)
 80042a8:	f7fd f8de 	bl	8001468 <open>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f47f aedc 	bne.w	800406c <main+0x90>
			  fpos=0;
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <main+0x320>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
			  update(&fpos);
 80042ba:	4810      	ldr	r0, [pc, #64]	; (80042fc <main+0x320>)
 80042bc:	f7fd f9d8 	bl	8001670 <update>
 80042c0:	e6d4      	b.n	800406c <main+0x90>
 80042c2:	bf00      	nop
 80042c4:	08009a5c 	.word	0x08009a5c
 80042c8:	200000d4 	.word	0x200000d4
 80042cc:	20016280 	.word	0x20016280
 80042d0:	2001638c 	.word	0x2001638c
 80042d4:	20000008 	.word	0x20000008
 80042d8:	20016344 	.word	0x20016344
 80042dc:	20000304 	.word	0x20000304
 80042e0:	200009f8 	.word	0x200009f8
 80042e4:	20000840 	.word	0x20000840
 80042e8:	2000030d 	.word	0x2000030d
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40020400 	.word	0x40020400
 80042f4:	20000308 	.word	0x20000308
 80042f8:	2000030c 	.word	0x2000030c
 80042fc:	2000030e 	.word	0x2000030e
 8004300:	2000000c 	.word	0x2000000c
		  }
	  }
	  else if(K6)
 8004304:	2108      	movs	r1, #8
 8004306:	4828      	ldr	r0, [pc, #160]	; (80043a8 <main+0x3cc>)
 8004308:	f001 ff82 	bl	8006210 <HAL_GPIO_ReadPin>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <main+0x368>
	  {
		  if(pr) continue;
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <main+0x3d0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d141      	bne.n	800439e <main+0x3c2>
		  pr=1;
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <main+0x3d0>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
		  scrollUp(&fpos);
 8004320:	4823      	ldr	r0, [pc, #140]	; (80043b0 <main+0x3d4>)
 8004322:	f7fd fa4b 	bl	80017bc <scrollUp>
		  if(fpos==4) open(&fpos, &mfile);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <main+0x3d4>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b04      	cmp	r3, #4
 800432c:	d103      	bne.n	8004336 <main+0x35a>
 800432e:	4921      	ldr	r1, [pc, #132]	; (80043b4 <main+0x3d8>)
 8004330:	481f      	ldr	r0, [pc, #124]	; (80043b0 <main+0x3d4>)
 8004332:	f7fd f899 	bl	8001468 <open>
		  update(&fpos);
 8004336:	481e      	ldr	r0, [pc, #120]	; (80043b0 <main+0x3d4>)
 8004338:	f7fd f99a 	bl	8001670 <update>
		  HAL_Delay(1);
 800433c:	2001      	movs	r0, #1
 800433e:	f001 f92b 	bl	8005598 <HAL_Delay>
 8004342:	e693      	b.n	800406c <main+0x90>
	  }
	  else if(K7)
 8004344:	2104      	movs	r1, #4
 8004346:	4818      	ldr	r0, [pc, #96]	; (80043a8 <main+0x3cc>)
 8004348:	f001 ff62 	bl	8006210 <HAL_GPIO_ReadPin>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d115      	bne.n	800437e <main+0x3a2>
	  {
		  if(pr) continue;
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <main+0x3d0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d123      	bne.n	80043a2 <main+0x3c6>
		  pr=1;
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <main+0x3d0>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
		  scrollDown(&fpos);
 8004360:	4813      	ldr	r0, [pc, #76]	; (80043b0 <main+0x3d4>)
 8004362:	f7fd fa0b 	bl	800177c <scrollDown>
		  if(fpos==0) {
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <main+0x3d4>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <main+0x39a>
			  open(&fpos, &mfile);
 800436e:	4911      	ldr	r1, [pc, #68]	; (80043b4 <main+0x3d8>)
 8004370:	480f      	ldr	r0, [pc, #60]	; (80043b0 <main+0x3d4>)
 8004372:	f7fd f879 	bl	8001468 <open>
		  }
		  update(&fpos);
 8004376:	480e      	ldr	r0, [pc, #56]	; (80043b0 <main+0x3d4>)
 8004378:	f7fd f97a 	bl	8001670 <update>
 800437c:	e676      	b.n	800406c <main+0x90>
	  }
	  else pr=0;
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <main+0x3d0>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e672      	b.n	800406c <main+0x90>
		  if(pr) continue;
 8004386:	bf00      	nop
 8004388:	e670      	b.n	800406c <main+0x90>
		 if(pr) continue;
 800438a:	bf00      	nop
 800438c:	e66e      	b.n	800406c <main+0x90>
		  if(pr) continue;
 800438e:	bf00      	nop
 8004390:	e66c      	b.n	800406c <main+0x90>
		  if(pr) continue;
 8004392:	bf00      	nop
 8004394:	e66a      	b.n	800406c <main+0x90>
		  if(pr) continue;
 8004396:	bf00      	nop
 8004398:	e668      	b.n	800406c <main+0x90>
		  if(pr) continue;
 800439a:	bf00      	nop
 800439c:	e666      	b.n	800406c <main+0x90>
		  if(pr) continue;
 800439e:	bf00      	nop
 80043a0:	e664      	b.n	800406c <main+0x90>
		  if(pr) continue;
 80043a2:	bf00      	nop
	  	  if(stop==0)
 80043a4:	e662      	b.n	800406c <main+0x90>
 80043a6:	bf00      	nop
 80043a8:	40020000 	.word	0x40020000
 80043ac:	20000308 	.word	0x20000308
 80043b0:	2000030e 	.word	0x2000030e
 80043b4:	2001638c 	.word	0x2001638c

080043b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b098      	sub	sp, #96	; 0x60
 80043bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043c2:	2230      	movs	r2, #48	; 0x30
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f005 fa60 	bl	800988c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043cc:	f107 031c 	add.w	r3, r7, #28
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <SystemClock_Config+0xf8>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <SystemClock_Config+0xf8>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b2d      	ldr	r3, [pc, #180]	; (80044b0 <SystemClock_Config+0xf8>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <SystemClock_Config+0xfc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <SystemClock_Config+0xfc>)
 8004410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <SystemClock_Config+0xfc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441e:	607b      	str	r3, [r7, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004422:	2301      	movs	r3, #1
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800442c:	2302      	movs	r3, #2
 800442e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004430:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004436:	2304      	movs	r3, #4
 8004438:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800443a:	23a8      	movs	r3, #168	; 0xa8
 800443c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800443e:	2302      	movs	r3, #2
 8004440:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004442:	2304      	movs	r3, #4
 8004444:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fc90 	bl	8007d70 <HAL_RCC_OscConfig>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004456:	f000 fa73 	bl	8004940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800445a:	230f      	movs	r3, #15
 800445c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800445e:	2302      	movs	r3, #2
 8004460:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004466:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800446c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004472:	f107 031c 	add.w	r3, r7, #28
 8004476:	2105      	movs	r1, #5
 8004478:	4618      	mov	r0, r3
 800447a:	f003 fee9 	bl	8008250 <HAL_RCC_ClockConfig>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004484:	f000 fa5c 	bl	8004940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004488:	2301      	movs	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800448c:	23c0      	movs	r3, #192	; 0xc0
 800448e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004490:	2302      	movs	r3, #2
 8004492:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	4618      	mov	r0, r3
 800449a:	f004 f8b7 	bl	800860c <HAL_RCCEx_PeriphCLKConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80044a4:	f000 fa4c 	bl	8004940 <Error_Handler>
  }
}
 80044a8:	bf00      	nop
 80044aa:	3760      	adds	r7, #96	; 0x60
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000

080044b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <MX_I2C1_Init+0x50>)
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <MX_I2C1_Init+0x54>)
 80044c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <MX_I2C1_Init+0x50>)
 80044c4:	4a12      	ldr	r2, [pc, #72]	; (8004510 <MX_I2C1_Init+0x58>)
 80044c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <MX_I2C1_Init+0x50>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <MX_I2C1_Init+0x50>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <MX_I2C1_Init+0x50>)
 80044d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <MX_I2C1_Init+0x50>)
 80044de:	2200      	movs	r2, #0
 80044e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <MX_I2C1_Init+0x50>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <MX_I2C1_Init+0x50>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <MX_I2C1_Init+0x50>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044f4:	4804      	ldr	r0, [pc, #16]	; (8004508 <MX_I2C1_Init+0x50>)
 80044f6:	f001 fed7 	bl	80062a8 <HAL_I2C_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004500:	f000 fa1e 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000840 	.word	0x20000840
 800450c:	40005400 	.word	0x40005400
 8004510:	000186a0 	.word	0x000186a0

08004514 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <MX_I2S3_Init+0x54>)
 800451a:	4a14      	ldr	r2, [pc, #80]	; (800456c <MX_I2S3_Init+0x58>)
 800451c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <MX_I2S3_Init+0x54>)
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <MX_I2S3_Init+0x54>)
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <MX_I2S3_Init+0x54>)
 800452e:	2200      	movs	r2, #0
 8004530:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <MX_I2S3_Init+0x54>)
 8004534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004538:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <MX_I2S3_Init+0x54>)
 800453c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004540:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <MX_I2S3_Init+0x54>)
 8004544:	2200      	movs	r2, #0
 8004546:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <MX_I2S3_Init+0x54>)
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <MX_I2S3_Init+0x54>)
 8004550:	2200      	movs	r2, #0
 8004552:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004554:	4804      	ldr	r0, [pc, #16]	; (8004568 <MX_I2S3_Init+0x54>)
 8004556:	f002 fe57 	bl	8007208 <HAL_I2S_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8004560:	f000 f9ee 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8004564:	bf00      	nop
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20016344 	.word	0x20016344
 800456c:	40003c00 	.word	0x40003c00

08004570 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004574:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <MX_SPI1_Init+0x64>)
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <MX_SPI1_Init+0x68>)
 8004578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <MX_SPI1_Init+0x64>)
 800457c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <MX_SPI1_Init+0x64>)
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <MX_SPI1_Init+0x64>)
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <MX_SPI1_Init+0x64>)
 8004590:	2200      	movs	r2, #0
 8004592:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <MX_SPI1_Init+0x64>)
 8004596:	2200      	movs	r2, #0
 8004598:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800459a:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <MX_SPI1_Init+0x64>)
 800459c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <MX_SPI1_Init+0x64>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <MX_SPI1_Init+0x64>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <MX_SPI1_Init+0x64>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <MX_SPI1_Init+0x64>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <MX_SPI1_Init+0x64>)
 80045bc:	220a      	movs	r2, #10
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045c0:	4804      	ldr	r0, [pc, #16]	; (80045d4 <MX_SPI1_Init+0x64>)
 80045c2:	f004 f961 	bl	8008888 <HAL_SPI_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80045cc:	f000 f9b8 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20016284 	.word	0x20016284
 80045d8:	40013000 	.word	0x40013000

080045dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <MX_SPI2_Init+0x64>)
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <MX_SPI2_Init+0x68>)
 80045e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <MX_SPI2_Init+0x64>)
 80045e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <MX_SPI2_Init+0x64>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <MX_SPI2_Init+0x64>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <MX_SPI2_Init+0x64>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <MX_SPI2_Init+0x64>)
 8004602:	2200      	movs	r2, #0
 8004604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004606:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <MX_SPI2_Init+0x64>)
 8004608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <MX_SPI2_Init+0x64>)
 8004610:	2200      	movs	r2, #0
 8004612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <MX_SPI2_Init+0x64>)
 8004616:	2200      	movs	r2, #0
 8004618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <MX_SPI2_Init+0x64>)
 800461c:	2200      	movs	r2, #0
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <MX_SPI2_Init+0x64>)
 8004622:	2200      	movs	r2, #0
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <MX_SPI2_Init+0x64>)
 8004628:	220a      	movs	r2, #10
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800462c:	4804      	ldr	r0, [pc, #16]	; (8004640 <MX_SPI2_Init+0x64>)
 800462e:	f004 f92b 	bl	8008888 <HAL_SPI_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004638:	f000 f982 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000748 	.word	0x20000748
 8004644:	40003800 	.word	0x40003800

08004648 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800464e:	f107 0308 	add.w	r3, r7, #8
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800465c:	463b      	mov	r3, r7
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004664:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <MX_TIM4_Init+0x90>)
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <MX_TIM4_Init+0x94>)
 8004668:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <MX_TIM4_Init+0x90>)
 800466c:	2229      	movs	r2, #41	; 0x29
 800466e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <MX_TIM4_Init+0x90>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <MX_TIM4_Init+0x90>)
 8004678:	2201      	movs	r2, #1
 800467a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800467c:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <MX_TIM4_Init+0x90>)
 800467e:	2200      	movs	r2, #0
 8004680:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <MX_TIM4_Init+0x90>)
 8004684:	2200      	movs	r2, #0
 8004686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004688:	4813      	ldr	r0, [pc, #76]	; (80046d8 <MX_TIM4_Init+0x90>)
 800468a:	f004 fcf1 	bl	8009070 <HAL_TIM_Base_Init>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8004694:	f000 f954 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800469c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	4619      	mov	r1, r3
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <MX_TIM4_Init+0x90>)
 80046a6:	f004 fe16 	bl	80092d6 <HAL_TIM_ConfigClockSource>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80046b0:	f000 f946 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046bc:	463b      	mov	r3, r7
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	; (80046d8 <MX_TIM4_Init+0x90>)
 80046c2:	f005 f821 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80046cc:	f000 f938 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000800 	.word	0x20000800
 80046dc:	40000800 	.word	0x40000800

080046e0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void) 
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	4b30      	ldr	r3, [pc, #192]	; (80047ac <MX_DMA_Init+0xcc>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <MX_DMA_Init+0xcc>)
 80046f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046f4:	6313      	str	r3, [r2, #48]	; 0x30
 80046f6:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <MX_DMA_Init+0xcc>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <MX_DMA_Init+0xcc>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a28      	ldr	r2, [pc, #160]	; (80047ac <MX_DMA_Init+0xcc>)
 800470c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004710:	6313      	str	r3, [r2, #48]	; 0x30
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <MX_DMA_Init+0xcc>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004720:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <MX_DMA_Init+0xd4>)
 8004722:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8004724:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800472a:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <MX_DMA_Init+0xd0>)
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8004730:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004736:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <MX_DMA_Init+0xd0>)
 800473a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800473e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004746:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <MX_DMA_Init+0xd0>)
 800474a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800474e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004758:	2200      	movs	r2, #0
 800475a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800475c:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <MX_DMA_Init+0xd0>)
 800475e:	2204      	movs	r2, #4
 8004760:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004764:	2203      	movs	r2, #3
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <MX_DMA_Init+0xd0>)
 800476a:	2200      	movs	r2, #0
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8004774:	480e      	ldr	r0, [pc, #56]	; (80047b0 <MX_DMA_Init+0xd0>)
 8004776:	f001 f843 	bl	8005800 <HAL_DMA_Init>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8004780:	f000 f8de 	bl	8004940 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	2010      	movs	r0, #16
 800478a:	f001 f802 	bl	8005792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800478e:	2010      	movs	r0, #16
 8004790:	f001 f81b 	bl	80057ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2100      	movs	r1, #0
 8004798:	203a      	movs	r0, #58	; 0x3a
 800479a:	f000 fffa 	bl	8005792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800479e:	203a      	movs	r0, #58	; 0x3a
 80047a0:	f001 f813 	bl	80057ca <HAL_NVIC_EnableIRQ>

}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	200007a0 	.word	0x200007a0
 80047b4:	40026410 	.word	0x40026410

080047b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	609a      	str	r2, [r3, #8]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	4b56      	ldr	r3, [pc, #344]	; (800492c <MX_GPIO_Init+0x174>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a55      	ldr	r2, [pc, #340]	; (800492c <MX_GPIO_Init+0x174>)
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b53      	ldr	r3, [pc, #332]	; (800492c <MX_GPIO_Init+0x174>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	4b4f      	ldr	r3, [pc, #316]	; (800492c <MX_GPIO_Init+0x174>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	4a4e      	ldr	r2, [pc, #312]	; (800492c <MX_GPIO_Init+0x174>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	6313      	str	r3, [r2, #48]	; 0x30
 80047fa:	4b4c      	ldr	r3, [pc, #304]	; (800492c <MX_GPIO_Init+0x174>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	4b48      	ldr	r3, [pc, #288]	; (800492c <MX_GPIO_Init+0x174>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4a47      	ldr	r2, [pc, #284]	; (800492c <MX_GPIO_Init+0x174>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
 8004816:	4b45      	ldr	r3, [pc, #276]	; (800492c <MX_GPIO_Init+0x174>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <MX_GPIO_Init+0x174>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <MX_GPIO_Init+0x174>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	6313      	str	r3, [r2, #48]	; 0x30
 8004832:	4b3e      	ldr	r3, [pc, #248]	; (800492c <MX_GPIO_Init+0x174>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4b3a      	ldr	r3, [pc, #232]	; (800492c <MX_GPIO_Init+0x174>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	4a39      	ldr	r2, [pc, #228]	; (800492c <MX_GPIO_Init+0x174>)
 8004848:	f043 0308 	orr.w	r3, r3, #8
 800484c:	6313      	str	r3, [r2, #48]	; 0x30
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <MX_GPIO_Init+0x174>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_Pin|CS_Pin, GPIO_PIN_RESET);
 800485a:	2200      	movs	r2, #0
 800485c:	2130      	movs	r1, #48	; 0x30
 800485e:	4834      	ldr	r0, [pc, #208]	; (8004930 <MX_GPIO_Init+0x178>)
 8004860:	f001 fcee 	bl	8006240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8004864:	2200      	movs	r2, #0
 8004866:	2104      	movs	r1, #4
 8004868:	4832      	ldr	r0, [pc, #200]	; (8004934 <MX_GPIO_Init+0x17c>)
 800486a:	f001 fce9 	bl	8006240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800486e:	2200      	movs	r2, #0
 8004870:	f24f 0190 	movw	r1, #61584	; 0xf090
 8004874:	4830      	ldr	r0, [pc, #192]	; (8004938 <MX_GPIO_Init+0x180>)
 8004876:	f001 fce3 	bl	8006240 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : K7_Pin K6_Pin */
  GPIO_InitStruct.Pin = K7_Pin|K6_Pin;
 800487a:	230c      	movs	r3, #12
 800487c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004882:	2301      	movs	r3, #1
 8004884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004886:	f107 0314 	add.w	r3, r7, #20
 800488a:	4619      	mov	r1, r3
 800488c:	482b      	ldr	r0, [pc, #172]	; (800493c <MX_GPIO_Init+0x184>)
 800488e:	f001 fb25 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_Pin CS_Pin */
  GPIO_InitStruct.Pin = D_C_Pin|CS_Pin;
 8004892:	2330      	movs	r3, #48	; 0x30
 8004894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004896:	2301      	movs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a2:	f107 0314 	add.w	r3, r7, #20
 80048a6:	4619      	mov	r1, r3
 80048a8:	4821      	ldr	r0, [pc, #132]	; (8004930 <MX_GPIO_Init+0x178>)
 80048aa:	f001 fb17 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pins : K5_Pin K4_Pin K3_Pin K2_Pin 
                           K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K5_Pin|K4_Pin|K3_Pin|K2_Pin 
 80048ae:	f647 0303 	movw	r3, #30723	; 0x7803
 80048b2:	617b      	str	r3, [r7, #20]
                          |K1_Pin|K0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b8:	2301      	movs	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4619      	mov	r1, r3
 80048c2:	481c      	ldr	r0, [pc, #112]	; (8004934 <MX_GPIO_Init+0x17c>)
 80048c4:	f001 fb0a 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_Pin */
  GPIO_InitStruct.Pin = RES_Pin;
 80048c8:	2304      	movs	r3, #4
 80048ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4619      	mov	r1, r3
 80048de:	4815      	ldr	r0, [pc, #84]	; (8004934 <MX_GPIO_Init+0x17c>)
 80048e0:	f001 fafc 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80048e4:	f24f 0390 	movw	r3, #61584	; 0xf090
 80048e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ea:	2301      	movs	r3, #1
 80048ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4619      	mov	r1, r3
 80048fc:	480e      	ldr	r0, [pc, #56]	; (8004938 <MX_GPIO_Init+0x180>)
 80048fe:	f001 faed 	bl	8005edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004910:	2300      	movs	r3, #0
 8004912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004914:	2305      	movs	r3, #5
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	4619      	mov	r1, r3
 800491e:	4804      	ldr	r0, [pc, #16]	; (8004930 <MX_GPIO_Init+0x178>)
 8004920:	f001 fadc 	bl	8005edc <HAL_GPIO_Init>

}
 8004924:	bf00      	nop
 8004926:	3728      	adds	r7, #40	; 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	40020800 	.word	0x40020800
 8004934:	40020400 	.word	0x40020400
 8004938:	40020c00 	.word	0x40020c00
 800493c:	40020000 	.word	0x40020000

08004940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <ssd1306_Reset>:
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8004954:	2201      	movs	r2, #1
 8004956:	2120      	movs	r1, #32
 8004958:	480a      	ldr	r0, [pc, #40]	; (8004984 <ssd1306_Reset+0x34>)
 800495a:	f001 fc71 	bl	8006240 <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800495e:	2200      	movs	r2, #0
 8004960:	2104      	movs	r1, #4
 8004962:	4809      	ldr	r0, [pc, #36]	; (8004988 <ssd1306_Reset+0x38>)
 8004964:	f001 fc6c 	bl	8006240 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004968:	200a      	movs	r0, #10
 800496a:	f000 fe15 	bl	8005598 <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800496e:	2201      	movs	r2, #1
 8004970:	2104      	movs	r1, #4
 8004972:	4805      	ldr	r0, [pc, #20]	; (8004988 <ssd1306_Reset+0x38>)
 8004974:	f001 fc64 	bl	8006240 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004978:	200a      	movs	r0, #10
 800497a:	f000 fe0d 	bl	8005598 <HAL_Delay>
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40020800 	.word	0x40020800
 8004988:	40020400 	.word	0x40020400

0800498c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8004996:	2200      	movs	r2, #0
 8004998:	2120      	movs	r1, #32
 800499a:	480c      	ldr	r0, [pc, #48]	; (80049cc <ssd1306_WriteCommand+0x40>)
 800499c:	f001 fc50 	bl	8006240 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80049a0:	2200      	movs	r2, #0
 80049a2:	2110      	movs	r1, #16
 80049a4:	4809      	ldr	r0, [pc, #36]	; (80049cc <ssd1306_WriteCommand+0x40>)
 80049a6:	f001 fc4b 	bl	8006240 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80049aa:	1df9      	adds	r1, r7, #7
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	2201      	movs	r2, #1
 80049b2:	4807      	ldr	r0, [pc, #28]	; (80049d0 <ssd1306_WriteCommand+0x44>)
 80049b4:	f003 ffcc 	bl	8008950 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80049b8:	2201      	movs	r2, #1
 80049ba:	2120      	movs	r1, #32
 80049bc:	4803      	ldr	r0, [pc, #12]	; (80049cc <ssd1306_WriteCommand+0x40>)
 80049be:	f001 fc3f 	bl	8006240 <HAL_GPIO_WritePin>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40020800 	.word	0x40020800
 80049d0:	20000748 	.word	0x20000748

080049d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80049de:	2200      	movs	r2, #0
 80049e0:	2120      	movs	r1, #32
 80049e2:	480c      	ldr	r0, [pc, #48]	; (8004a14 <ssd1306_WriteData+0x40>)
 80049e4:	f001 fc2c 	bl	8006240 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80049e8:	2201      	movs	r2, #1
 80049ea:	2110      	movs	r1, #16
 80049ec:	4809      	ldr	r0, [pc, #36]	; (8004a14 <ssd1306_WriteData+0x40>)
 80049ee:	f001 fc27 	bl	8006240 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4806      	ldr	r0, [pc, #24]	; (8004a18 <ssd1306_WriteData+0x44>)
 80049fe:	f003 ffa7 	bl	8008950 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004a02:	2201      	movs	r2, #1
 8004a04:	2120      	movs	r1, #32
 8004a06:	4803      	ldr	r0, [pc, #12]	; (8004a14 <ssd1306_WriteData+0x40>)
 8004a08:	f001 fc1a 	bl	8006240 <HAL_GPIO_WritePin>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40020800 	.word	0x40020800
 8004a18:	20000748 	.word	0x20000748

08004a1c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8004a20:	f7ff ff96 	bl	8004950 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004a24:	2064      	movs	r0, #100	; 0x64
 8004a26:	f000 fdb7 	bl	8005598 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8004a2a:	20ae      	movs	r0, #174	; 0xae
 8004a2c:	f7ff ffae 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004a30:	2020      	movs	r0, #32
 8004a32:	f7ff ffab 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7ff ffa8 	bl	800498c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004a3c:	20b0      	movs	r0, #176	; 0xb0
 8004a3e:	f7ff ffa5 	bl	800498c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004a42:	20c8      	movs	r0, #200	; 0xc8
 8004a44:	f7ff ffa2 	bl	800498c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7ff ff9f 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004a4e:	2010      	movs	r0, #16
 8004a50:	f7ff ff9c 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004a54:	2040      	movs	r0, #64	; 0x40
 8004a56:	f7ff ff99 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8004a5a:	2081      	movs	r0, #129	; 0x81
 8004a5c:	f7ff ff96 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8004a60:	20ff      	movs	r0, #255	; 0xff
 8004a62:	f7ff ff93 	bl	800498c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004a66:	20a1      	movs	r0, #161	; 0xa1
 8004a68:	f7ff ff90 	bl	800498c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004a6c:	20a6      	movs	r0, #166	; 0xa6
 8004a6e:	f7ff ff8d 	bl	800498c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004a72:	20a8      	movs	r0, #168	; 0xa8
 8004a74:	f7ff ff8a 	bl	800498c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004a78:	203f      	movs	r0, #63	; 0x3f
 8004a7a:	f7ff ff87 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004a7e:	20a4      	movs	r0, #164	; 0xa4
 8004a80:	f7ff ff84 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004a84:	20d3      	movs	r0, #211	; 0xd3
 8004a86:	f7ff ff81 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7ff ff7e 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004a90:	20d5      	movs	r0, #213	; 0xd5
 8004a92:	f7ff ff7b 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004a96:	20f0      	movs	r0, #240	; 0xf0
 8004a98:	f7ff ff78 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004a9c:	20d9      	movs	r0, #217	; 0xd9
 8004a9e:	f7ff ff75 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004aa2:	2022      	movs	r0, #34	; 0x22
 8004aa4:	f7ff ff72 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004aa8:	20da      	movs	r0, #218	; 0xda
 8004aaa:	f7ff ff6f 	bl	800498c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004aae:	2012      	movs	r0, #18
 8004ab0:	f7ff ff6c 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004ab4:	20db      	movs	r0, #219	; 0xdb
 8004ab6:	f7ff ff69 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004aba:	2020      	movs	r0, #32
 8004abc:	f7ff ff66 	bl	800498c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004ac0:	208d      	movs	r0, #141	; 0x8d
 8004ac2:	f7ff ff63 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004ac6:	2014      	movs	r0, #20
 8004ac8:	f7ff ff60 	bl	800498c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004acc:	20af      	movs	r0, #175	; 0xaf
 8004ace:	f7ff ff5d 	bl	800498c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 f810 	bl	8004af8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004ad8:	f000 f830 	bl	8004b3c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <ssd1306_Init+0xd8>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <ssd1306_Init+0xd8>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004ae8:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <ssd1306_Init+0xd8>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	715a      	strb	r2, [r3, #5]
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000720 	.word	0x20000720

08004af8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e00d      	b.n	8004b24 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <ssd1306_Fill+0x1a>
 8004b0e:	2100      	movs	r1, #0
 8004b10:	e000      	b.n	8004b14 <ssd1306_Fill+0x1c>
 8004b12:	21ff      	movs	r1, #255	; 0xff
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <ssd1306_Fill+0x40>)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004b2a:	d3ed      	bcc.n	8004b08 <ssd1306_Fill+0x10>
    }
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	20000310 	.word	0x20000310

08004b3c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b42:	2300      	movs	r3, #0
 8004b44:	71fb      	strb	r3, [r7, #7]
 8004b46:	e01a      	b.n	8004b7e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	3b50      	subs	r3, #80	; 0x50
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff1c 	bl	800498c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff ff19 	bl	800498c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8004b5a:	2010      	movs	r0, #16
 8004b5c:	f7ff ff16 	bl	800498c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004b60:	79fa      	ldrb	r2, [r7, #7]
 8004b62:	4613      	mov	r3, r2
 8004b64:	019b      	lsls	r3, r3, #6
 8004b66:	4413      	add	r3, r2
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <ssd1306_UpdateScreen+0x50>)
 8004b6e:	4413      	add	r3, r2
 8004b70:	2182      	movs	r1, #130	; 0x82
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff ff2e 	bl	80049d4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	71fb      	strb	r3, [r7, #7]
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	2b07      	cmp	r3, #7
 8004b82:	d9e1      	bls.n	8004b48 <ssd1306_UpdateScreen+0xc>
    }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000310 	.word	0x20000310

08004b90 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004b90:	b490      	push	{r4, r7}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	71bb      	strb	r3, [r7, #6]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b81      	cmp	r3, #129	; 0x81
 8004ba6:	d854      	bhi.n	8004c52 <ssd1306_DrawPixel+0xc2>
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	2b3f      	cmp	r3, #63	; 0x3f
 8004bac:	d851      	bhi.n	8004c52 <ssd1306_DrawPixel+0xc2>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <ssd1306_DrawPixel+0xcc>)
 8004bb0:	791b      	ldrb	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 8004bb6:	797b      	ldrb	r3, [r7, #5]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8004bc4:	797b      	ldrb	r3, [r7, #5]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d120      	bne.n	8004c0c <ssd1306_DrawPixel+0x7c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004bca:	79fa      	ldrb	r2, [r7, #7]
 8004bcc:	79bb      	ldrb	r3, [r7, #6]
 8004bce:	08db      	lsrs	r3, r3, #3
 8004bd0:	b2d8      	uxtb	r0, r3
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	019b      	lsls	r3, r3, #6
 8004bd8:	440b      	add	r3, r1
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <ssd1306_DrawPixel+0xd0>)
 8004be0:	5cd3      	ldrb	r3, [r2, r3]
 8004be2:	b25a      	sxtb	r2, r3
 8004be4:	79bb      	ldrb	r3, [r7, #6]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	b25c      	sxtb	r4, r3
 8004bf6:	79fa      	ldrb	r2, [r7, #7]
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	019b      	lsls	r3, r3, #6
 8004bfe:	440b      	add	r3, r1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	b2e1      	uxtb	r1, r4
 8004c06:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <ssd1306_DrawPixel+0xd0>)
 8004c08:	54d1      	strb	r1, [r2, r3]
 8004c0a:	e023      	b.n	8004c54 <ssd1306_DrawPixel+0xc4>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004c0c:	79fa      	ldrb	r2, [r7, #7]
 8004c0e:	79bb      	ldrb	r3, [r7, #6]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	b2d8      	uxtb	r0, r3
 8004c14:	4601      	mov	r1, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	440b      	add	r3, r1
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <ssd1306_DrawPixel+0xd0>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	b25a      	sxtb	r2, r3
 8004c26:	79bb      	ldrb	r3, [r7, #6]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	b25b      	sxtb	r3, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	b25b      	sxtb	r3, r3
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b25c      	sxtb	r4, r3
 8004c3c:	79fa      	ldrb	r2, [r7, #7]
 8004c3e:	4601      	mov	r1, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	019b      	lsls	r3, r3, #6
 8004c44:	440b      	add	r3, r1
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	b2e1      	uxtb	r1, r4
 8004c4c:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <ssd1306_DrawPixel+0xd0>)
 8004c4e:	54d1      	strb	r1, [r2, r3]
 8004c50:	e000      	b.n	8004c54 <ssd1306_DrawPixel+0xc4>
        return;
 8004c52:	bf00      	nop
    }
}
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc90      	pop	{r4, r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	20000720 	.word	0x20000720
 8004c60:	20000310 	.word	0x20000310

08004c64 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	1d38      	adds	r0, r7, #4
 8004c6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004c72:	461a      	mov	r2, r3
 8004c74:	4623      	mov	r3, r4
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b1f      	cmp	r3, #31
 8004c80:	d902      	bls.n	8004c88 <ssd1306_WriteChar+0x24>
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b7e      	cmp	r3, #126	; 0x7e
 8004c86:	d901      	bls.n	8004c8c <ssd1306_WriteChar+0x28>
        return 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e06d      	b.n	8004d68 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004c8c:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	793b      	ldrb	r3, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	2b82      	cmp	r3, #130	; 0x82
 8004c98:	dc06      	bgt.n	8004ca8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004c9a:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004c9c:	885b      	ldrh	r3, [r3, #2]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	797b      	ldrb	r3, [r7, #5]
 8004ca2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	dd01      	ble.n	8004cac <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e05d      	b.n	8004d68 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	e04c      	b.n	8004d4c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	3b20      	subs	r3, #32
 8004cb8:	7979      	ldrb	r1, [r7, #5]
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	440b      	add	r3, r1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e034      	b.n	8004d3c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d012      	beq.n	8004d08 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	b2d8      	uxtb	r0, r3
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004cf2:	885b      	ldrh	r3, [r3, #2]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	7bba      	ldrb	r2, [r7, #14]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7ff ff45 	bl	8004b90 <ssd1306_DrawPixel>
 8004d06:	e016      	b.n	8004d36 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	b2d8      	uxtb	r0, r3
 8004d16:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004d18:	885b      	ldrh	r3, [r3, #2]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	b2d9      	uxtb	r1, r3
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	f7ff ff2d 	bl	8004b90 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	793b      	ldrb	r3, [r7, #4]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d3c5      	bcc.n	8004cd2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	797b      	ldrb	r3, [r7, #5]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d3ad      	bcc.n	8004cb2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	793b      	ldrb	r3, [r7, #4]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <ssd1306_WriteChar+0x10c>)
 8004d64:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3724      	adds	r7, #36	; 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd90      	pop	{r4, r7, pc}
 8004d70:	20000720 	.word	0x20000720

08004d74 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	1d38      	adds	r0, r7, #4
 8004d7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004d82:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8004d84:	e012      	b.n	8004dac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	7818      	ldrb	r0, [r3, #0]
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	1d3a      	adds	r2, r7, #4
 8004d8e:	ca06      	ldmia	r2, {r1, r2}
 8004d90:	f7ff ff68 	bl	8004c64 <ssd1306_WriteChar>
 8004d94:	4603      	mov	r3, r0
 8004d96:	461a      	mov	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d002      	beq.n	8004da6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	e008      	b.n	8004db8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e8      	bne.n	8004d86 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	781b      	ldrb	r3, [r3, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460a      	mov	r2, r1
 8004dca:	71fb      	strb	r3, [r7, #7]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <ssd1306_SetCursor+0x2c>)
 8004dd6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004dd8:	79bb      	ldrb	r3, [r7, #6]
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <ssd1306_SetCursor+0x2c>)
 8004dde:	805a      	strh	r2, [r3, #2]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	20000720 	.word	0x20000720

08004df0 <ssd1306_DrawArrowR>:
  return;
}

//Draw right arrow
void ssd1306_DrawArrowR(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	71bb      	strb	r3, [r7, #6]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<6;i++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	e00e      	b.n	8004e26 <ssd1306_DrawArrowR+0x36>
	{
		ssd1306_DrawPixel(x+i,y+2,color);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	4413      	add	r3, r2
 8004e10:	b2d8      	uxtb	r0, r3
 8004e12:	79bb      	ldrb	r3, [r7, #6]
 8004e14:	3302      	adds	r3, #2
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	797a      	ldrb	r2, [r7, #5]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7ff feb8 	bl	8004b90 <ssd1306_DrawPixel>
	for(int i=0;i<6;i++)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	dded      	ble.n	8004e08 <ssd1306_DrawArrowR+0x18>
	}
	ssd1306_DrawPixel(x+3,y,color);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	3303      	adds	r3, #3
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	797a      	ldrb	r2, [r7, #5]
 8004e34:	79b9      	ldrb	r1, [r7, #6]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff feaa 	bl	8004b90 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x+4,y+1,color);
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	b2d8      	uxtb	r0, r3
 8004e42:	79bb      	ldrb	r3, [r7, #6]
 8004e44:	3301      	adds	r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	797a      	ldrb	r2, [r7, #5]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f7ff fea0 	bl	8004b90 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x+4,y+3,color);
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	3304      	adds	r3, #4
 8004e54:	b2d8      	uxtb	r0, r3
 8004e56:	79bb      	ldrb	r3, [r7, #6]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	797a      	ldrb	r2, [r7, #5]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f7ff fe96 	bl	8004b90 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x+3,y+4,color);
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	3303      	adds	r3, #3
 8004e68:	b2d8      	uxtb	r0, r3
 8004e6a:	79bb      	ldrb	r3, [r7, #6]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	797a      	ldrb	r2, [r7, #5]
 8004e72:	4619      	mov	r1, r3
 8004e74:	f7ff fe8c 	bl	8004b90 <ssd1306_DrawPixel>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <ssd1306_DrawStrLine>:

void ssd1306_DrawStrLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color)
{
 8004e80:	b590      	push	{r4, r7, lr}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	71fb      	strb	r3, [r7, #7]
 8004e92:	4603      	mov	r3, r0
 8004e94:	71bb      	strb	r3, [r7, #6]
 8004e96:	460b      	mov	r3, r1
 8004e98:	717b      	strb	r3, [r7, #5]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	713b      	strb	r3, [r7, #4]
	if(x1==x2)
 8004e9e:	79fa      	ldrb	r2, [r7, #7]
 8004ea0:	797b      	ldrb	r3, [r7, #5]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d116      	bne.n	8004ed4 <ssd1306_DrawStrLine+0x54>
	{
		for(int i=0;i<y2-y1;i++)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e00d      	b.n	8004ec8 <ssd1306_DrawStrLine+0x48>
		{
			ssd1306_DrawPixel(x1,y1+i,color);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	79bb      	ldrb	r3, [r7, #6]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	b2d9      	uxtb	r1, r3
 8004eb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fe67 	bl	8004b90 <ssd1306_DrawPixel>
		for(int i=0;i<y2-y1;i++)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	793a      	ldrb	r2, [r7, #4]
 8004eca:	79bb      	ldrb	r3, [r7, #6]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	dbeb      	blt.n	8004eac <ssd1306_DrawStrLine+0x2c>
		}
	}
	if(y1==y2)
 8004ed4:	79ba      	ldrb	r2, [r7, #6]
 8004ed6:	793b      	ldrb	r3, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d116      	bne.n	8004f0a <ssd1306_DrawStrLine+0x8a>
	{
		for(int i=0;i<x2-x1;i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	e00d      	b.n	8004efe <ssd1306_DrawStrLine+0x7e>
		{
			ssd1306_DrawPixel(x1+i,y1,color);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	4413      	add	r3, r2
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ef0:	79b9      	ldrb	r1, [r7, #6]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fe4c 	bl	8004b90 <ssd1306_DrawPixel>
		for(int i=0;i<x2-x1;i++)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	797a      	ldrb	r2, [r7, #5]
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	dbeb      	blt.n	8004ee2 <ssd1306_DrawStrLine+0x62>
		}
	}
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}
	...

08004f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_MspInit+0x4c>)
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <HAL_MspInit+0x4c>)
 8004f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f28:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <HAL_MspInit+0x4c>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_MspInit+0x4c>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <HAL_MspInit+0x4c>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_MspInit+0x4c>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800

08004f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_I2C_MspInit+0x84>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d12c      	bne.n	8004fe0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_I2C_MspInit+0x88>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_I2C_MspInit+0x88>)
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	6313      	str	r3, [r2, #48]	; 0x30
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <HAL_I2C_MspInit+0x88>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004fa2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fa8:	2312      	movs	r3, #18
 8004faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	480c      	ldr	r0, [pc, #48]	; (8004ff0 <HAL_I2C_MspInit+0x8c>)
 8004fc0:	f000 ff8c 	bl	8005edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_I2C_MspInit+0x88>)
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	4a07      	ldr	r2, [pc, #28]	; (8004fec <HAL_I2C_MspInit+0x88>)
 8004fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_I2C_MspInit+0x88>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fe0:	bf00      	nop
 8004fe2:	3728      	adds	r7, #40	; 0x28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40005400 	.word	0x40005400
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40020400 	.word	0x40020400

08004ff4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a46      	ldr	r2, [pc, #280]	; (800512c <HAL_I2S_MspInit+0x138>)
 8005012:	4293      	cmp	r3, r2
 8005014:	f040 8085 	bne.w	8005122 <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	4b44      	ldr	r3, [pc, #272]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	4a43      	ldr	r2, [pc, #268]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 8005022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005026:	6413      	str	r3, [r2, #64]	; 0x40
 8005028:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	4b3d      	ldr	r3, [pc, #244]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6313      	str	r3, [r2, #48]	; 0x30
 8005044:	4b3a      	ldr	r3, [pc, #232]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	4b36      	ldr	r3, [pc, #216]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	4a35      	ldr	r2, [pc, #212]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 800505a:	f043 0304 	orr.w	r3, r3, #4
 800505e:	6313      	str	r3, [r2, #48]	; 0x30
 8005060:	4b33      	ldr	r3, [pc, #204]	; (8005130 <HAL_I2S_MspInit+0x13c>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800506c:	2310      	movs	r3, #16
 800506e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005070:	2302      	movs	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005078:	2300      	movs	r3, #0
 800507a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800507c:	2306      	movs	r3, #6
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	4619      	mov	r1, r3
 8005086:	482b      	ldr	r0, [pc, #172]	; (8005134 <HAL_I2S_MspInit+0x140>)
 8005088:	f000 ff28 	bl	8005edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800508c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005092:	2302      	movs	r3, #2
 8005094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509a:	2300      	movs	r3, #0
 800509c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800509e:	2306      	movs	r3, #6
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a2:	f107 0314 	add.w	r3, r7, #20
 80050a6:	4619      	mov	r1, r3
 80050a8:	4823      	ldr	r0, [pc, #140]	; (8005138 <HAL_I2S_MspInit+0x144>)
 80050aa:	f000 ff17 	bl	8005edc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80050ae:	4b23      	ldr	r3, [pc, #140]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050b0:	4a23      	ldr	r2, [pc, #140]	; (8005140 <HAL_I2S_MspInit+0x14c>)
 80050b2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80050b4:	4b21      	ldr	r3, [pc, #132]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050bc:	2240      	movs	r2, #64	; 0x40
 80050be:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050c0:	4b1e      	ldr	r3, [pc, #120]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050cc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ce:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050d4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050d6:	4b19      	ldr	r3, [pc, #100]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050dc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050e4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050ec:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050f0:	2204      	movs	r2, #4
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050f4:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050f6:	2203      	movs	r2, #3
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <HAL_I2S_MspInit+0x148>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005100:	4b0e      	ldr	r3, [pc, #56]	; (800513c <HAL_I2S_MspInit+0x148>)
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8005106:	480d      	ldr	r0, [pc, #52]	; (800513c <HAL_I2S_MspInit+0x148>)
 8005108:	f000 fb7a 	bl	8005800 <HAL_DMA_Init>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_I2S_MspInit+0x122>
    {
      Error_Handler();
 8005112:	f7ff fc15 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <HAL_I2S_MspInit+0x148>)
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
 800511c:	4a07      	ldr	r2, [pc, #28]	; (800513c <HAL_I2S_MspInit+0x148>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005122:	bf00      	nop
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40003c00 	.word	0x40003c00
 8005130:	40023800 	.word	0x40023800
 8005134:	40020000 	.word	0x40020000
 8005138:	40020800 	.word	0x40020800
 800513c:	20000894 	.word	0x20000894
 8005140:	40026088 	.word	0x40026088

08005144 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08c      	sub	sp, #48	; 0x30
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800514c:	f107 031c 	add.w	r3, r7, #28
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5d      	ldr	r2, [pc, #372]	; (80052d8 <HAL_SPI_MspInit+0x194>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d163      	bne.n	800522e <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	4b5c      	ldr	r3, [pc, #368]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	4a5b      	ldr	r2, [pc, #364]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005174:	6453      	str	r3, [r2, #68]	; 0x44
 8005176:	4b59      	ldr	r3, [pc, #356]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	4b55      	ldr	r3, [pc, #340]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a54      	ldr	r2, [pc, #336]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b52      	ldr	r3, [pc, #328]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800519e:	2338      	movs	r3, #56	; 0x38
 80051a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051aa:	2303      	movs	r3, #3
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051ae:	2305      	movs	r3, #5
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b2:	f107 031c 	add.w	r3, r7, #28
 80051b6:	4619      	mov	r1, r3
 80051b8:	4849      	ldr	r0, [pc, #292]	; (80052e0 <HAL_SPI_MspInit+0x19c>)
 80051ba:	f000 fe8f 	bl	8005edc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80051be:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051c0:	4a49      	ldr	r2, [pc, #292]	; (80052e8 <HAL_SPI_MspInit+0x1a4>)
 80051c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80051c4:	4b47      	ldr	r3, [pc, #284]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80051ca:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051d2:	4b44      	ldr	r3, [pc, #272]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051de:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051e0:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051e6:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80051ec:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051f2:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051f8:	4b3a      	ldr	r3, [pc, #232]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 80051fa:	2204      	movs	r2, #4
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 8005200:	2203      	movs	r2, #3
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005204:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 8005206:	2200      	movs	r2, #0
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800520a:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005210:	4834      	ldr	r0, [pc, #208]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 8005212:	f000 faf5 	bl	8005800 <HAL_DMA_Init>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 800521c:	f7ff fb90 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 8005224:	64da      	str	r2, [r3, #76]	; 0x4c
 8005226:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <HAL_SPI_MspInit+0x1a0>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800522c:	e04f      	b.n	80052ce <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2e      	ldr	r2, [pc, #184]	; (80052ec <HAL_SPI_MspInit+0x1a8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d14a      	bne.n	80052ce <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	4b27      	ldr	r3, [pc, #156]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	4a26      	ldr	r2, [pc, #152]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005246:	6413      	str	r3, [r2, #64]	; 0x40
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	6313      	str	r3, [r2, #48]	; 0x30
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005270:	2300      	movs	r3, #0
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_SPI_MspInit+0x198>)
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	6313      	str	r3, [r2, #48]	; 0x30
 8005280:	4b16      	ldr	r3, [pc, #88]	; (80052dc <HAL_SPI_MspInit+0x198>)
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800528c:	2308      	movs	r3, #8
 800528e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005290:	2302      	movs	r3, #2
 8005292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005294:	2300      	movs	r3, #0
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005298:	2303      	movs	r3, #3
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800529c:	2305      	movs	r3, #5
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052a0:	f107 031c 	add.w	r3, r7, #28
 80052a4:	4619      	mov	r1, r3
 80052a6:	4812      	ldr	r0, [pc, #72]	; (80052f0 <HAL_SPI_MspInit+0x1ac>)
 80052a8:	f000 fe18 	bl	8005edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	2302      	movs	r3, #2
 80052b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ba:	2303      	movs	r3, #3
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052be:	2305      	movs	r3, #5
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c2:	f107 031c 	add.w	r3, r7, #28
 80052c6:	4619      	mov	r1, r3
 80052c8:	4805      	ldr	r0, [pc, #20]	; (80052e0 <HAL_SPI_MspInit+0x19c>)
 80052ca:	f000 fe07 	bl	8005edc <HAL_GPIO_Init>
}
 80052ce:	bf00      	nop
 80052d0:	3730      	adds	r7, #48	; 0x30
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40013000 	.word	0x40013000
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40020400 	.word	0x40020400
 80052e4:	200162dc 	.word	0x200162dc
 80052e8:	40026440 	.word	0x40026440
 80052ec:	40003800 	.word	0x40003800
 80052f0:	40020800 	.word	0x40020800

080052f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0e      	ldr	r2, [pc, #56]	; (800533c <HAL_TIM_Base_MspInit+0x48>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d115      	bne.n	8005332 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <HAL_TIM_Base_MspInit+0x4c>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <HAL_TIM_Base_MspInit+0x4c>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_TIM_Base_MspInit+0x4c>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	201e      	movs	r0, #30
 8005328:	f000 fa33 	bl	8005792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800532c:	201e      	movs	r0, #30
 800532e:	f000 fa4c 	bl	80057ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40000800 	.word	0x40000800
 8005340:	40023800 	.word	0x40023800

08005344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005356:	e7fe      	b.n	8005356 <HardFault_Handler+0x4>

08005358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800535c:	e7fe      	b.n	800535c <MemManage_Handler+0x4>

0800535e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800535e:	b480      	push	{r7}
 8005360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005362:	e7fe      	b.n	8005362 <BusFault_Handler+0x4>

08005364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005368:	e7fe      	b.n	8005368 <UsageFault_Handler+0x4>

0800536a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800536a:	b480      	push	{r7}
 800536c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005398:	f000 f8de 	bl	8005558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}

080053a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80053a4:	4802      	ldr	r0, [pc, #8]	; (80053b0 <DMA1_Stream5_IRQHandler+0x10>)
 80053a6:	f000 fb31 	bl	8005a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000894 	.word	0x20000894

080053b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80053b8:	4802      	ldr	r0, [pc, #8]	; (80053c4 <TIM4_IRQHandler+0x10>)
 80053ba:	f003 fe84 	bl	80090c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000800 	.word	0x20000800

080053c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80053cc:	4802      	ldr	r0, [pc, #8]	; (80053d8 <DMA2_Stream2_IRQHandler+0x10>)
 80053ce:	f000 fb1d 	bl	8005a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200162dc 	.word	0x200162dc

080053dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <_sbrk+0x50>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <_sbrk+0x16>
		heap_end = &end;
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <_sbrk+0x50>)
 80053ee:	4a10      	ldr	r2, [pc, #64]	; (8005430 <_sbrk+0x54>)
 80053f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <_sbrk+0x50>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <_sbrk+0x50>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4413      	add	r3, r2
 8005400:	466a      	mov	r2, sp
 8005402:	4293      	cmp	r3, r2
 8005404:	d907      	bls.n	8005416 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005406:	f004 fa0f 	bl	8009828 <__errno>
 800540a:	4602      	mov	r2, r0
 800540c:	230c      	movs	r3, #12
 800540e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	e006      	b.n	8005424 <_sbrk+0x48>
	}

	heap_end += incr;
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <_sbrk+0x50>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	4a03      	ldr	r2, [pc, #12]	; (800542c <_sbrk+0x50>)
 8005420:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000728 	.word	0x20000728
 8005430:	200165c0 	.word	0x200165c0

08005434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005438:	4b08      	ldr	r3, [pc, #32]	; (800545c <SystemInit+0x28>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	4a07      	ldr	r2, [pc, #28]	; (800545c <SystemInit+0x28>)
 8005440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <SystemInit+0x28>)
 800544a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800544e:	609a      	str	r2, [r3, #8]
#endif
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	e000ed00 	.word	0xe000ed00

08005460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005498 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005464:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005466:	e003      	b.n	8005470 <LoopCopyDataInit>

08005468 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800546a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800546c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800546e:	3104      	adds	r1, #4

08005470 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005470:	480b      	ldr	r0, [pc, #44]	; (80054a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005474:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005476:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005478:	d3f6      	bcc.n	8005468 <CopyDataInit>
  ldr  r2, =_sbss
 800547a:	4a0b      	ldr	r2, [pc, #44]	; (80054a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800547c:	e002      	b.n	8005484 <LoopFillZerobss>

0800547e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800547e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005480:	f842 3b04 	str.w	r3, [r2], #4

08005484 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005486:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005488:	d3f9      	bcc.n	800547e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800548a:	f7ff ffd3 	bl	8005434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800548e:	f004 f9d1 	bl	8009834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005492:	f7fe fda3 	bl	8003fdc <main>
  bx  lr    
 8005496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005498:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800549c:	0800a084 	.word	0x0800a084
  ldr  r0, =_sdata
 80054a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80054a4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80054a8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80054ac:	200165bc 	.word	0x200165bc

080054b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054b0:	e7fe      	b.n	80054b0 <ADC_IRQHandler>
	...

080054b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054b8:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <HAL_Init+0x40>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a0d      	ldr	r2, [pc, #52]	; (80054f4 <HAL_Init+0x40>)
 80054be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_Init+0x40>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <HAL_Init+0x40>)
 80054ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_Init+0x40>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <HAL_Init+0x40>)
 80054d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054dc:	2003      	movs	r0, #3
 80054de:	f000 f94d 	bl	800577c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f000 f808 	bl	80054f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054e8:	f7ff fd14 	bl	8004f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40023c00 	.word	0x40023c00

080054f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005500:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_InitTick+0x54>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_InitTick+0x58>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800550e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f965 	bl	80057e6 <HAL_SYSTICK_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e00e      	b.n	8005544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d80a      	bhi.n	8005542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800552c:	2200      	movs	r2, #0
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	f000 f92d 	bl	8005792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005538:	4a06      	ldr	r2, [pc, #24]	; (8005554 <HAL_InitTick+0x5c>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000018 	.word	0x20000018
 8005550:	20000020 	.word	0x20000020
 8005554:	2000001c 	.word	0x2000001c

08005558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_IncTick+0x20>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_IncTick+0x24>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4413      	add	r3, r2
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <HAL_IncTick+0x24>)
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000020 	.word	0x20000020
 800557c:	200165b4 	.word	0x200165b4

08005580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return uwTick;
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <HAL_GetTick+0x14>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	200165b4 	.word	0x200165b4

08005598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055a0:	f7ff ffee 	bl	8005580 <HAL_GetTick>
 80055a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d005      	beq.n	80055be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055b2:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_Delay+0x40>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055be:	bf00      	nop
 80055c0:	f7ff ffde 	bl	8005580 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d8f7      	bhi.n	80055c0 <HAL_Delay+0x28>
  {
  }
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000020 	.word	0x20000020

080055dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <__NVIC_SetPriorityGrouping+0x44>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055f8:	4013      	ands	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800560e:	4a04      	ldr	r2, [pc, #16]	; (8005620 <__NVIC_SetPriorityGrouping+0x44>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	60d3      	str	r3, [r2, #12]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <__NVIC_GetPriorityGrouping+0x18>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	0a1b      	lsrs	r3, r3, #8
 800562e:	f003 0307 	and.w	r3, r3, #7
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	db0b      	blt.n	800566a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	4907      	ldr	r1, [pc, #28]	; (8005678 <__NVIC_EnableIRQ+0x38>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2001      	movs	r0, #1
 8005662:	fa00 f202 	lsl.w	r2, r0, r2
 8005666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000e100 	.word	0xe000e100

0800567c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	6039      	str	r1, [r7, #0]
 8005686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568c:	2b00      	cmp	r3, #0
 800568e:	db0a      	blt.n	80056a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	490c      	ldr	r1, [pc, #48]	; (80056c8 <__NVIC_SetPriority+0x4c>)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	0112      	lsls	r2, r2, #4
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	440b      	add	r3, r1
 80056a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056a4:	e00a      	b.n	80056bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4908      	ldr	r1, [pc, #32]	; (80056cc <__NVIC_SetPriority+0x50>)
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	3b04      	subs	r3, #4
 80056b4:	0112      	lsls	r2, r2, #4
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	440b      	add	r3, r1
 80056ba:	761a      	strb	r2, [r3, #24]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	e000e100 	.word	0xe000e100
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	; 0x24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f1c3 0307 	rsb	r3, r3, #7
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	bf28      	it	cs
 80056ee:	2304      	movcs	r3, #4
 80056f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3304      	adds	r3, #4
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d902      	bls.n	8005700 <NVIC_EncodePriority+0x30>
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3b03      	subs	r3, #3
 80056fe:	e000      	b.n	8005702 <NVIC_EncodePriority+0x32>
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	401a      	ands	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005718:	f04f 31ff 	mov.w	r1, #4294967295
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	43d9      	mvns	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005728:	4313      	orrs	r3, r2
         );
}
 800572a:	4618      	mov	r0, r3
 800572c:	3724      	adds	r7, #36	; 0x24
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005748:	d301      	bcc.n	800574e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800574a:	2301      	movs	r3, #1
 800574c:	e00f      	b.n	800576e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <SysTick_Config+0x40>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3b01      	subs	r3, #1
 8005754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005756:	210f      	movs	r1, #15
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	f7ff ff8e 	bl	800567c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <SysTick_Config+0x40>)
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005766:	4b04      	ldr	r3, [pc, #16]	; (8005778 <SysTick_Config+0x40>)
 8005768:	2207      	movs	r2, #7
 800576a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	e000e010 	.word	0xe000e010

0800577c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ff29 	bl	80055dc <__NVIC_SetPriorityGrouping>
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	607a      	str	r2, [r7, #4]
 800579e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057a4:	f7ff ff3e 	bl	8005624 <__NVIC_GetPriorityGrouping>
 80057a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7ff ff8e 	bl	80056d0 <NVIC_EncodePriority>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ba:	4611      	mov	r1, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff5d 	bl	800567c <__NVIC_SetPriority>
}
 80057c2:	bf00      	nop
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	4603      	mov	r3, r0
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff ff31 	bl	8005640 <__NVIC_EnableIRQ>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ffa2 	bl	8005738 <SysTick_Config>
 80057f4:	4603      	mov	r3, r0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800580c:	f7ff feb8 	bl	8005580 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e099      	b.n	8005950 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800583c:	e00f      	b.n	800585e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800583e:	f7ff fe9f 	bl	8005580 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b05      	cmp	r3, #5
 800584a:	d908      	bls.n	800585e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2203      	movs	r2, #3
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e078      	b.n	8005950 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e8      	bne.n	800583e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4b38      	ldr	r3, [pc, #224]	; (8005958 <HAL_DMA_Init+0x158>)
 8005878:	4013      	ands	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800588a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d107      	bne.n	80058c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	4313      	orrs	r3, r2
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0307 	bic.w	r3, r3, #7
 80058de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d117      	bne.n	8005922 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fa6f 	bl	8005de8 <DMA_CheckFifoParam>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2240      	movs	r2, #64	; 0x40
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800591e:	2301      	movs	r3, #1
 8005920:	e016      	b.n	8005950 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa26 	bl	8005d7c <DMA_CalcBaseAndBitshift>
 8005930:	4603      	mov	r3, r0
 8005932:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	223f      	movs	r2, #63	; 0x3f
 800593a:	409a      	lsls	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	f010803f 	.word	0xf010803f

0800595c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_DMA_Start_IT+0x26>
 800597e:	2302      	movs	r3, #2
 8005980:	e040      	b.n	8005a04 <HAL_DMA_Start_IT+0xa8>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d12f      	bne.n	80059f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f9b8 	bl	8005d20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	223f      	movs	r2, #63	; 0x3f
 80059b6:	409a      	lsls	r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0216 	orr.w	r2, r2, #22
 80059ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0208 	orr.w	r2, r2, #8
 80059e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e005      	b.n	8005a02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
 8005a00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a18:	4b92      	ldr	r3, [pc, #584]	; (8005c64 <HAL_DMA_IRQHandler+0x258>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a92      	ldr	r2, [pc, #584]	; (8005c68 <HAL_DMA_IRQHandler+0x25c>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0a9b      	lsrs	r3, r3, #10
 8005a24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a36:	2208      	movs	r2, #8
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01a      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0204 	bic.w	r2, r2, #4
 8005a5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	2208      	movs	r2, #8
 8005a66:	409a      	lsls	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	f043 0201 	orr.w	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d012      	beq.n	8005aae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f043 0202 	orr.w	r2, r3, #2
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d012      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	f043 0204 	orr.w	r2, r3, #4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	2210      	movs	r2, #16
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d043      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d03c      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b06:	2210      	movs	r2, #16
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d018      	beq.n	8005b4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d108      	bne.n	8005b3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d024      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
 8005b3a:	e01f      	b.n	8005b7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
 8005b4c:	e016      	b.n	8005b7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0208 	bic.w	r2, r2, #8
 8005b6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b80:	2220      	movs	r2, #32
 8005b82:	409a      	lsls	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 808e 	beq.w	8005caa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8086 	beq.w	8005caa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	409a      	lsls	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d136      	bne.n	8005c24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0216 	bic.w	r2, r2, #22
 8005bc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <HAL_DMA_IRQHandler+0x1da>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0208 	bic.w	r2, r2, #8
 8005bf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfa:	223f      	movs	r2, #63	; 0x3f
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d07d      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
        }
        return;
 8005c22:	e078      	b.n	8005d16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01c      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d030      	beq.n	8005caa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
 8005c50:	e02b      	b.n	8005caa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d027      	beq.n	8005caa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	e022      	b.n	8005caa <HAL_DMA_IRQHandler+0x29e>
 8005c64:	20000018 	.word	0x20000018
 8005c68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10f      	bne.n	8005c9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0210 	bic.w	r2, r2, #16
 8005c88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d032      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d022      	beq.n	8005d04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d307      	bcc.n	8005cf2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f2      	bne.n	8005cd6 <HAL_DMA_IRQHandler+0x2ca>
 8005cf0:	e000      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005cf2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
 8005d14:	e000      	b.n	8005d18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d16:	bf00      	nop
    }
  }
}
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b40      	cmp	r3, #64	; 0x40
 8005d4c:	d108      	bne.n	8005d60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d5e:	e007      	b.n	8005d70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	3b10      	subs	r3, #16
 8005d8c:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <DMA_CalcBaseAndBitshift+0x64>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d96:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <DMA_CalcBaseAndBitshift+0x68>)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d909      	bls.n	8005dbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	659a      	str	r2, [r3, #88]	; 0x58
 8005dbc:	e007      	b.n	8005dce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	aaaaaaab 	.word	0xaaaaaaab
 8005de4:	0800a06c 	.word	0x0800a06c

08005de8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d11f      	bne.n	8005e42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d855      	bhi.n	8005eb4 <DMA_CheckFifoParam+0xcc>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <DMA_CheckFifoParam+0x28>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e33 	.word	0x08005e33
 8005e18:	08005e21 	.word	0x08005e21
 8005e1c:	08005eb5 	.word	0x08005eb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d045      	beq.n	8005eb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e30:	e042      	b.n	8005eb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e3a:	d13f      	bne.n	8005ebc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e40:	e03c      	b.n	8005ebc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4a:	d121      	bne.n	8005e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d836      	bhi.n	8005ec0 <DMA_CheckFifoParam+0xd8>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <DMA_CheckFifoParam+0x70>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005e6f 	.word	0x08005e6f
 8005e60:	08005e69 	.word	0x08005e69
 8005e64:	08005e81 	.word	0x08005e81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e02f      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d024      	beq.n	8005ec4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e7e:	e021      	b.n	8005ec4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e88:	d11e      	bne.n	8005ec8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e8e:	e01b      	b.n	8005ec8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d902      	bls.n	8005e9c <DMA_CheckFifoParam+0xb4>
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d003      	beq.n	8005ea2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e9a:	e018      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e015      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00e      	beq.n	8005ecc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb2:	e00b      	b.n	8005ecc <DMA_CheckFifoParam+0xe4>
      break;
 8005eb4:	bf00      	nop
 8005eb6:	e00a      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;
 8005eb8:	bf00      	nop
 8005eba:	e008      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;
 8005ebc:	bf00      	nop
 8005ebe:	e006      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;
 8005ec0:	bf00      	nop
 8005ec2:	e004      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;
 8005ec4:	bf00      	nop
 8005ec6:	e002      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;   
 8005ec8:	bf00      	nop
 8005eca:	e000      	b.n	8005ece <DMA_CheckFifoParam+0xe6>
      break;
 8005ecc:	bf00      	nop
    }
  } 
  
  return status; 
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	; 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	e16b      	b.n	80061d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ef8:	2201      	movs	r2, #1
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	f040 815a 	bne.w	80061ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d00b      	beq.n	8005f36 <HAL_GPIO_Init+0x5a>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d007      	beq.n	8005f36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f2a:	2b11      	cmp	r3, #17
 8005f2c:	d003      	beq.n	8005f36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b12      	cmp	r3, #18
 8005f34:	d130      	bne.n	8005f98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	2203      	movs	r2, #3
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	f003 0201 	and.w	r2, r3, #1
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d003      	beq.n	8005fd8 <HAL_GPIO_Init+0xfc>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b12      	cmp	r3, #18
 8005fd6:	d123      	bne.n	8006020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	08da      	lsrs	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3208      	adds	r2, #8
 8005fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	220f      	movs	r2, #15
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	08da      	lsrs	r2, r3, #3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3208      	adds	r2, #8
 800601a:	69b9      	ldr	r1, [r7, #24]
 800601c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	2203      	movs	r2, #3
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0203 	and.w	r2, r3, #3
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4313      	orrs	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80b4 	beq.w	80061ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	4b5f      	ldr	r3, [pc, #380]	; (80061e4 <HAL_GPIO_Init+0x308>)
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	4a5e      	ldr	r2, [pc, #376]	; (80061e4 <HAL_GPIO_Init+0x308>)
 800606c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006070:	6453      	str	r3, [r2, #68]	; 0x44
 8006072:	4b5c      	ldr	r3, [pc, #368]	; (80061e4 <HAL_GPIO_Init+0x308>)
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800607e:	4a5a      	ldr	r2, [pc, #360]	; (80061e8 <HAL_GPIO_Init+0x30c>)
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	089b      	lsrs	r3, r3, #2
 8006084:	3302      	adds	r3, #2
 8006086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	220f      	movs	r2, #15
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4013      	ands	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a51      	ldr	r2, [pc, #324]	; (80061ec <HAL_GPIO_Init+0x310>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02b      	beq.n	8006102 <HAL_GPIO_Init+0x226>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a50      	ldr	r2, [pc, #320]	; (80061f0 <HAL_GPIO_Init+0x314>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d025      	beq.n	80060fe <HAL_GPIO_Init+0x222>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a4f      	ldr	r2, [pc, #316]	; (80061f4 <HAL_GPIO_Init+0x318>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01f      	beq.n	80060fa <HAL_GPIO_Init+0x21e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a4e      	ldr	r2, [pc, #312]	; (80061f8 <HAL_GPIO_Init+0x31c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d019      	beq.n	80060f6 <HAL_GPIO_Init+0x21a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4d      	ldr	r2, [pc, #308]	; (80061fc <HAL_GPIO_Init+0x320>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_GPIO_Init+0x216>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4c      	ldr	r2, [pc, #304]	; (8006200 <HAL_GPIO_Init+0x324>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00d      	beq.n	80060ee <HAL_GPIO_Init+0x212>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a4b      	ldr	r2, [pc, #300]	; (8006204 <HAL_GPIO_Init+0x328>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d007      	beq.n	80060ea <HAL_GPIO_Init+0x20e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a4a      	ldr	r2, [pc, #296]	; (8006208 <HAL_GPIO_Init+0x32c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_GPIO_Init+0x20a>
 80060e2:	2307      	movs	r3, #7
 80060e4:	e00e      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060e6:	2308      	movs	r3, #8
 80060e8:	e00c      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060ea:	2306      	movs	r3, #6
 80060ec:	e00a      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060ee:	2305      	movs	r3, #5
 80060f0:	e008      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060f2:	2304      	movs	r3, #4
 80060f4:	e006      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060f6:	2303      	movs	r3, #3
 80060f8:	e004      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e002      	b.n	8006104 <HAL_GPIO_Init+0x228>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_GPIO_Init+0x228>
 8006102:	2300      	movs	r3, #0
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	f002 0203 	and.w	r2, r2, #3
 800610a:	0092      	lsls	r2, r2, #2
 800610c:	4093      	lsls	r3, r2
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006114:	4934      	ldr	r1, [pc, #208]	; (80061e8 <HAL_GPIO_Init+0x30c>)
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	089b      	lsrs	r3, r3, #2
 800611a:	3302      	adds	r3, #2
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006122:	4b3a      	ldr	r3, [pc, #232]	; (800620c <HAL_GPIO_Init+0x330>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	43db      	mvns	r3, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006146:	4a31      	ldr	r2, [pc, #196]	; (800620c <HAL_GPIO_Init+0x330>)
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800614c:	4b2f      	ldr	r3, [pc, #188]	; (800620c <HAL_GPIO_Init+0x330>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006170:	4a26      	ldr	r2, [pc, #152]	; (800620c <HAL_GPIO_Init+0x330>)
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006176:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_GPIO_Init+0x330>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	43db      	mvns	r3, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_GPIO_Init+0x330>)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061a0:	4b1a      	ldr	r3, [pc, #104]	; (800620c <HAL_GPIO_Init+0x330>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061c4:	4a11      	ldr	r2, [pc, #68]	; (800620c <HAL_GPIO_Init+0x330>)
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3301      	adds	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	f67f ae90 	bls.w	8005ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061d8:	bf00      	nop
 80061da:	3724      	adds	r7, #36	; 0x24
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40013800 	.word	0x40013800
 80061ec:	40020000 	.word	0x40020000
 80061f0:	40020400 	.word	0x40020400
 80061f4:	40020800 	.word	0x40020800
 80061f8:	40020c00 	.word	0x40020c00
 80061fc:	40021000 	.word	0x40021000
 8006200:	40021400 	.word	0x40021400
 8006204:	40021800 	.word	0x40021800
 8006208:	40021c00 	.word	0x40021c00
 800620c:	40013c00 	.word	0x40013c00

08006210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	887b      	ldrh	r3, [r7, #2]
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
 800622c:	e001      	b.n	8006232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	807b      	strh	r3, [r7, #2]
 800624c:	4613      	mov	r3, r2
 800624e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006250:	787b      	ldrb	r3, [r7, #1]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800625c:	e003      	b.n	8006266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800625e:	887b      	ldrh	r3, [r7, #2]
 8006260:	041a      	lsls	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	619a      	str	r2, [r3, #24]
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	887b      	ldrh	r3, [r7, #2]
 8006284:	401a      	ands	r2, r3
 8006286:	887b      	ldrh	r3, [r7, #2]
 8006288:	429a      	cmp	r2, r3
 800628a:	d104      	bne.n	8006296 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800628c:	887b      	ldrh	r3, [r7, #2]
 800628e:	041a      	lsls	r2, r3, #16
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006294:	e002      	b.n	800629c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	619a      	str	r2, [r3, #24]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e11f      	b.n	80064fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fe fe48 	bl	8004f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	; 0x24
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800630a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800630c:	f002 f96a 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 8006310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	4a7b      	ldr	r2, [pc, #492]	; (8006504 <HAL_I2C_Init+0x25c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d807      	bhi.n	800632c <HAL_I2C_Init+0x84>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a7a      	ldr	r2, [pc, #488]	; (8006508 <HAL_I2C_Init+0x260>)
 8006320:	4293      	cmp	r3, r2
 8006322:	bf94      	ite	ls
 8006324:	2301      	movls	r3, #1
 8006326:	2300      	movhi	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e006      	b.n	800633a <HAL_I2C_Init+0x92>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a77      	ldr	r2, [pc, #476]	; (800650c <HAL_I2C_Init+0x264>)
 8006330:	4293      	cmp	r3, r2
 8006332:	bf94      	ite	ls
 8006334:	2301      	movls	r3, #1
 8006336:	2300      	movhi	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0db      	b.n	80064fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a72      	ldr	r2, [pc, #456]	; (8006510 <HAL_I2C_Init+0x268>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	0c9b      	lsrs	r3, r3, #18
 800634c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a64      	ldr	r2, [pc, #400]	; (8006504 <HAL_I2C_Init+0x25c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d802      	bhi.n	800637c <HAL_I2C_Init+0xd4>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	3301      	adds	r3, #1
 800637a:	e009      	b.n	8006390 <HAL_I2C_Init+0xe8>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	4a63      	ldr	r2, [pc, #396]	; (8006514 <HAL_I2C_Init+0x26c>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	099b      	lsrs	r3, r3, #6
 800638e:	3301      	adds	r3, #1
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	430b      	orrs	r3, r1
 8006396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4956      	ldr	r1, [pc, #344]	; (8006504 <HAL_I2C_Init+0x25c>)
 80063ac:	428b      	cmp	r3, r1
 80063ae:	d80d      	bhi.n	80063cc <HAL_I2C_Init+0x124>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1e59      	subs	r1, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80063be:	3301      	adds	r3, #1
 80063c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	bf38      	it	cc
 80063c8:	2304      	movcc	r3, #4
 80063ca:	e04f      	b.n	800646c <HAL_I2C_Init+0x1c4>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d111      	bne.n	80063f8 <HAL_I2C_Init+0x150>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	1e58      	subs	r0, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6859      	ldr	r1, [r3, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	440b      	add	r3, r1
 80063e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e6:	3301      	adds	r3, #1
 80063e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e012      	b.n	800641e <HAL_I2C_Init+0x176>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	1e58      	subs	r0, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6859      	ldr	r1, [r3, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	0099      	lsls	r1, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	fbb0 f3f3 	udiv	r3, r0, r3
 800640e:	3301      	adds	r3, #1
 8006410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_I2C_Init+0x17e>
 8006422:	2301      	movs	r3, #1
 8006424:	e022      	b.n	800646c <HAL_I2C_Init+0x1c4>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10e      	bne.n	800644c <HAL_I2C_Init+0x1a4>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1e58      	subs	r0, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	440b      	add	r3, r1
 800643c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006440:	3301      	adds	r3, #1
 8006442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	e00f      	b.n	800646c <HAL_I2C_Init+0x1c4>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1e58      	subs	r0, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	0099      	lsls	r1, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006462:	3301      	adds	r3, #1
 8006464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	6809      	ldr	r1, [r1, #0]
 8006470:	4313      	orrs	r3, r2
 8006472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69da      	ldr	r2, [r3, #28]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800649a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6911      	ldr	r1, [r2, #16]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68d2      	ldr	r2, [r2, #12]
 80064a6:	4311      	orrs	r1, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	000186a0 	.word	0x000186a0
 8006508:	001e847f 	.word	0x001e847f
 800650c:	003d08ff 	.word	0x003d08ff
 8006510:	431bde83 	.word	0x431bde83
 8006514:	10624dd3 	.word	0x10624dd3

08006518 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	817b      	strh	r3, [r7, #10]
 800652a:	460b      	mov	r3, r1
 800652c:	813b      	strh	r3, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006532:	f7ff f825 	bl	8005580 <HAL_GetTick>
 8006536:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b20      	cmp	r3, #32
 8006542:	f040 80d9 	bne.w	80066f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2319      	movs	r3, #25
 800654c:	2201      	movs	r2, #1
 800654e:	496d      	ldr	r1, [pc, #436]	; (8006704 <HAL_I2C_Mem_Write+0x1ec>)
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fc7b 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
 800655e:	e0cc      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_I2C_Mem_Write+0x56>
 800656a:	2302      	movs	r3, #2
 800656c:	e0c5      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b01      	cmp	r3, #1
 8006582:	d007      	beq.n	8006594 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2221      	movs	r2, #33	; 0x21
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2240      	movs	r2, #64	; 0x40
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a4d      	ldr	r2, [pc, #308]	; (8006708 <HAL_I2C_Mem_Write+0x1f0>)
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065d6:	88f8      	ldrh	r0, [r7, #6]
 80065d8:	893a      	ldrh	r2, [r7, #8]
 80065da:	8979      	ldrh	r1, [r7, #10]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4603      	mov	r3, r0
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fab6 	bl	8006b58 <I2C_RequestMemoryWrite>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d052      	beq.n	8006698 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e081      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fcfc 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2b04      	cmp	r3, #4
 800660c:	d107      	bne.n	800661e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e06b      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b04      	cmp	r3, #4
 800665e:	d11b      	bne.n	8006698 <HAL_I2C_Mem_Write+0x180>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d017      	beq.n	8006698 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1aa      	bne.n	80065f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fce8 	bl	800707a <I2C_WaitOnBTFFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e016      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	00100002 	.word	0x00100002
 8006708:	ffff0000 	.word	0xffff0000

0800670c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	; 0x30
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	461a      	mov	r2, r3
 800671a:	4603      	mov	r3, r0
 800671c:	817b      	strh	r3, [r7, #10]
 800671e:	460b      	mov	r3, r1
 8006720:	813b      	strh	r3, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006726:	f7fe ff2b 	bl	8005580 <HAL_GetTick>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 8208 	bne.w	8006b4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	2319      	movs	r3, #25
 8006740:	2201      	movs	r2, #1
 8006742:	497b      	ldr	r1, [pc, #492]	; (8006930 <HAL_I2C_Mem_Read+0x224>)
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fb81 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
 8006752:	e1fb      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_I2C_Mem_Read+0x56>
 800675e:	2302      	movs	r3, #2
 8006760:	e1f4      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d007      	beq.n	8006788 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2222      	movs	r2, #34	; 0x22
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2240      	movs	r2, #64	; 0x40
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a5b      	ldr	r2, [pc, #364]	; (8006934 <HAL_I2C_Mem_Read+0x228>)
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067ca:	88f8      	ldrh	r0, [r7, #6]
 80067cc:	893a      	ldrh	r2, [r7, #8]
 80067ce:	8979      	ldrh	r1, [r7, #10]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	4603      	mov	r3, r0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fa50 	bl	8006c80 <I2C_RequestMemoryRead>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e1b0      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d113      	bne.n	800681a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f2:	2300      	movs	r3, #0
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	623b      	str	r3, [r7, #32]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	623b      	str	r3, [r7, #32]
 8006806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e184      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	2b01      	cmp	r3, #1
 8006820:	d11b      	bne.n	800685a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e164      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	2b02      	cmp	r3, #2
 8006860:	d11b      	bne.n	800689a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	e144      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068b0:	e138      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	f200 80f1 	bhi.w	8006a9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d123      	bne.n	800690c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fc17 	bl	80070fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e139      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800690a:	e10b      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b02      	cmp	r3, #2
 8006912:	d14e      	bne.n	80069b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	2200      	movs	r2, #0
 800691c:	4906      	ldr	r1, [pc, #24]	; (8006938 <HAL_I2C_Mem_Read+0x22c>)
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fa94 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e10e      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
 800692e:	bf00      	nop
 8006930:	00100002 	.word	0x00100002
 8006934:	ffff0000 	.word	0xffff0000
 8006938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069b0:	e0b8      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2200      	movs	r2, #0
 80069ba:	4966      	ldr	r1, [pc, #408]	; (8006b54 <HAL_I2C_Mem_Read+0x448>)
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fa45 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0bf      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	2200      	movs	r2, #0
 8006a16:	494f      	ldr	r1, [pc, #316]	; (8006b54 <HAL_I2C_Mem_Read+0x448>)
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fa17 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e091      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a9c:	e042      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fb2a 	bl	80070fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e04c      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d118      	bne.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f aec2 	bne.w	80068b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	; 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	00010004 	.word	0x00010004

08006b58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f95c 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e05f      	b.n	8006c74 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bb4:	897b      	ldrh	r3, [r7, #10]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	492c      	ldr	r1, [pc, #176]	; (8006c7c <I2C_RequestMemoryWrite+0x124>)
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f995 	bl	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e04c      	b.n	8006c74 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	6a39      	ldr	r1, [r7, #32]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f9ff 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00d      	beq.n	8006c1c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d107      	bne.n	8006c18 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e02b      	b.n	8006c74 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c22:	893b      	ldrh	r3, [r7, #8]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	611a      	str	r2, [r3, #16]
 8006c2c:	e021      	b.n	8006c72 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c2e:	893b      	ldrh	r3, [r7, #8]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	6a39      	ldr	r1, [r7, #32]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f9d9 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d107      	bne.n	8006c64 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e005      	b.n	8006c74 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c68:	893b      	ldrh	r3, [r7, #8]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	00010002 	.word	0x00010002

08006c80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	817b      	strh	r3, [r7, #10]
 8006c92:	460b      	mov	r3, r1
 8006c94:	813b      	strh	r3, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f8c0 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00c      	beq.n	8006cec <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0a9      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cec:	897b      	ldrh	r3, [r7, #10]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	4951      	ldr	r1, [pc, #324]	; (8006e48 <I2C_RequestMemoryRead+0x1c8>)
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f8f9 	bl	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e096      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	6a39      	ldr	r1, [r7, #32]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f963 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d107      	bne.n	8006d50 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e075      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d105      	bne.n	8006d66 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d5a:	893b      	ldrh	r3, [r7, #8]
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	611a      	str	r2, [r3, #16]
 8006d64:	e021      	b.n	8006daa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d66:	893b      	ldrh	r3, [r7, #8]
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	6a39      	ldr	r1, [r7, #32]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f93d 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00d      	beq.n	8006da0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d107      	bne.n	8006d9c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e04f      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006da0:	893b      	ldrh	r3, [r7, #8]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dac:	6a39      	ldr	r1, [r7, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f922 	bl	8006ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d107      	bne.n	8006dd2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e034      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f82a 	bl	8006e4c <I2C_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e013      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e18:	897b      	ldrh	r3, [r7, #10]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	6a3a      	ldr	r2, [r7, #32]
 8006e2c:	4906      	ldr	r1, [pc, #24]	; (8006e48 <I2C_RequestMemoryRead+0x1c8>)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f863 	bl	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	00010002 	.word	0x00010002

08006e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e5c:	e025      	b.n	8006eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e64:	d021      	beq.n	8006eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e66:	f7fe fb8b 	bl	8005580 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d302      	bcc.n	8006e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d116      	bne.n	8006eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e023      	b.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	0c1b      	lsrs	r3, r3, #16
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d10d      	bne.n	8006ed0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	43da      	mvns	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bf0c      	ite	eq
 8006ec6:	2301      	moveq	r3, #1
 8006ec8:	2300      	movne	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	e00c      	b.n	8006eea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	43da      	mvns	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4013      	ands	r3, r2
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf0c      	ite	eq
 8006ee2:	2301      	moveq	r3, #1
 8006ee4:	2300      	movne	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d0b6      	beq.n	8006e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
 8006f06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f08:	e051      	b.n	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	d123      	bne.n	8006f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f043 0204 	orr.w	r2, r3, #4
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e046      	b.n	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d021      	beq.n	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6a:	f7fe fb09 	bl	8005580 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d116      	bne.n	8006fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e020      	b.n	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d10c      	bne.n	8006fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	43da      	mvns	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf14      	ite	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	2300      	moveq	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	e00b      	b.n	8006fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	43da      	mvns	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d18d      	bne.n	8006f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007004:	e02d      	b.n	8007062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f8ce 	bl	80071a8 <I2C_IsAcknowledgeFailed>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e02d      	b.n	8007072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d021      	beq.n	8007062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fe faaf 	bl	8005580 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d116      	bne.n	8007062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f043 0220 	orr.w	r2, r3, #32
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e007      	b.n	8007072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706c:	2b80      	cmp	r3, #128	; 0x80
 800706e:	d1ca      	bne.n	8007006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007086:	e02d      	b.n	80070e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f88d 	bl	80071a8 <I2C_IsAcknowledgeFailed>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e02d      	b.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709e:	d021      	beq.n	80070e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a0:	f7fe fa6e 	bl	8005580 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d302      	bcc.n	80070b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d116      	bne.n	80070e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e007      	b.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d1ca      	bne.n	8007088 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007108:	e042      	b.n	8007190 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b10      	cmp	r3, #16
 8007116:	d119      	bne.n	800714c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0210 	mvn.w	r2, #16
 8007120:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e029      	b.n	80071a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714c:	f7fe fa18 	bl	8005580 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	429a      	cmp	r2, r3
 800715a:	d302      	bcc.n	8007162 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d116      	bne.n	8007190 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	f043 0220 	orr.w	r2, r3, #32
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e007      	b.n	80071a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d1b5      	bne.n	800710a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071be:	d11b      	bne.n	80071f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	f043 0204 	orr.w	r2, r3, #4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e128      	b.n	800746c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a90      	ldr	r2, [pc, #576]	; (8007474 <HAL_I2S_Init+0x26c>)
 8007232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fd fedd 	bl	8004ff4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007250:	f023 030f 	bic.w	r3, r3, #15
 8007254:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2202      	movs	r2, #2
 800725c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d060      	beq.n	8007328 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800726e:	2310      	movs	r3, #16
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	e001      	b.n	8007278 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007274:	2320      	movs	r3, #32
 8007276:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b20      	cmp	r3, #32
 800727e:	d802      	bhi.n	8007286 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007286:	2001      	movs	r0, #1
 8007288:	f001 faa2 	bl	80087d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800728c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007296:	d125      	bne.n	80072e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d010      	beq.n	80072c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072bc:	3305      	adds	r3, #5
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	e01f      	b.n	8007302 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	3305      	adds	r3, #5
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	e00e      	b.n	8007302 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	461a      	mov	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	3305      	adds	r3, #5
 8007300:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4a5c      	ldr	r2, [pc, #368]	; (8007478 <HAL_I2S_Init+0x270>)
 8007306:	fba2 2303 	umull	r2, r3, r2, r3
 800730a:	08db      	lsrs	r3, r3, #3
 800730c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e003      	b.n	8007330 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007328:	2302      	movs	r3, #2
 800732a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d902      	bls.n	800733c <HAL_I2S_Init+0x134>
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2bff      	cmp	r3, #255	; 0xff
 800733a:	d907      	bls.n	800734c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	f043 0210 	orr.w	r2, r3, #16
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e08f      	b.n	800746c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	ea42 0103 	orr.w	r1, r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	430a      	orrs	r2, r1
 800735e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800736a:	f023 030f 	bic.w	r3, r3, #15
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6851      	ldr	r1, [r2, #4]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6892      	ldr	r2, [r2, #8]
 8007376:	4311      	orrs	r1, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68d2      	ldr	r2, [r2, #12]
 800737c:	4311      	orrs	r1, r2
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6992      	ldr	r2, [r2, #24]
 8007382:	430a      	orrs	r2, r1
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d161      	bne.n	800745c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a38      	ldr	r2, [pc, #224]	; (800747c <HAL_I2S_Init+0x274>)
 800739c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a37      	ldr	r2, [pc, #220]	; (8007480 <HAL_I2S_Init+0x278>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d101      	bne.n	80073ac <HAL_I2S_Init+0x1a4>
 80073a8:	4b36      	ldr	r3, [pc, #216]	; (8007484 <HAL_I2S_Init+0x27c>)
 80073aa:	e001      	b.n	80073b0 <HAL_I2S_Init+0x1a8>
 80073ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	4932      	ldr	r1, [pc, #200]	; (8007480 <HAL_I2S_Init+0x278>)
 80073b8:	428a      	cmp	r2, r1
 80073ba:	d101      	bne.n	80073c0 <HAL_I2S_Init+0x1b8>
 80073bc:	4a31      	ldr	r2, [pc, #196]	; (8007484 <HAL_I2S_Init+0x27c>)
 80073be:	e001      	b.n	80073c4 <HAL_I2S_Init+0x1bc>
 80073c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80073c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80073c8:	f023 030f 	bic.w	r3, r3, #15
 80073cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2b      	ldr	r2, [pc, #172]	; (8007480 <HAL_I2S_Init+0x278>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d101      	bne.n	80073dc <HAL_I2S_Init+0x1d4>
 80073d8:	4b2a      	ldr	r3, [pc, #168]	; (8007484 <HAL_I2S_Init+0x27c>)
 80073da:	e001      	b.n	80073e0 <HAL_I2S_Init+0x1d8>
 80073dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073e0:	2202      	movs	r2, #2
 80073e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a25      	ldr	r2, [pc, #148]	; (8007480 <HAL_I2S_Init+0x278>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d101      	bne.n	80073f2 <HAL_I2S_Init+0x1ea>
 80073ee:	4b25      	ldr	r3, [pc, #148]	; (8007484 <HAL_I2S_Init+0x27c>)
 80073f0:	e001      	b.n	80073f6 <HAL_I2S_Init+0x1ee>
 80073f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	d003      	beq.n	800740c <HAL_I2S_Init+0x204>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800740c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e001      	b.n	8007418 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	b299      	uxth	r1, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800742e:	4303      	orrs	r3, r0
 8007430:	b29b      	uxth	r3, r3
 8007432:	430b      	orrs	r3, r1
 8007434:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8007436:	4313      	orrs	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	897b      	ldrh	r3, [r7, #10]
 800743c:	4313      	orrs	r3, r2
 800743e:	b29b      	uxth	r3, r3
 8007440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007444:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <HAL_I2S_Init+0x278>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d101      	bne.n	8007454 <HAL_I2S_Init+0x24c>
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <HAL_I2S_Init+0x27c>)
 8007452:	e001      	b.n	8007458 <HAL_I2S_Init+0x250>
 8007454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007458:	897a      	ldrh	r2, [r7, #10]
 800745a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3720      	adds	r7, #32
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	080077a9 	.word	0x080077a9
 8007478:	cccccccd 	.word	0xcccccccd
 800747c:	080078bd 	.word	0x080078bd
 8007480:	40003800 	.word	0x40003800
 8007484:	40003400 	.word	0x40003400

08007488 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_I2S_Transmit_DMA+0x1a>
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e08e      	b.n	80075c4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_I2S_Transmit_DMA+0x2e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e086      	b.n	80075c4 <HAL_I2S_Transmit_DMA+0x13c>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d005      	beq.n	80074d6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80074d2:	2302      	movs	r3, #2
 80074d4:	e076      	b.n	80075c4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2203      	movs	r2, #3
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d002      	beq.n	8007502 <HAL_I2S_Transmit_DMA+0x7a>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d10a      	bne.n	8007518 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007516:	e005      	b.n	8007524 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	88fa      	ldrh	r2, [r7, #6]
 800751c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	4a28      	ldr	r2, [pc, #160]	; (80075cc <HAL_I2S_Transmit_DMA+0x144>)
 800752a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <HAL_I2S_Transmit_DMA+0x148>)
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	4a26      	ldr	r2, [pc, #152]	; (80075d4 <HAL_I2S_Transmit_DMA+0x14c>)
 800753a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007544:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800754c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007552:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007554:	f7fe fa02 	bl	800595c <HAL_DMA_Start_IT>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00f      	beq.n	800757e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007562:	f043 0208 	orr.w	r2, r3, #8
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e022      	b.n	80075c4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007588:	2b00      	cmp	r3, #0
 800758a:	d107      	bne.n	800759c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69da      	ldr	r2, [r3, #28]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800759a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0202 	orr.w	r2, r2, #2
 80075b8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	08007687 	.word	0x08007687
 80075d0:	08007645 	.word	0x08007645
 80075d4:	080076a3 	.word	0x080076a3

080075d8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007636:	b2db      	uxtb	r3, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10e      	bne.n	8007678 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0202 	bic.w	r2, r2, #2
 8007668:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff ffb7 	bl	80075ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff ff9f 	bl	80075d8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0203 	bic.w	r2, r2, #3
 80076be:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	f043 0208 	orr.w	r2, r3, #8
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff ff97 	bl	8007614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80076e6:	bf00      	nop
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	881a      	ldrh	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	1c9a      	adds	r2, r3, #2
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10e      	bne.n	8007742 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007732:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff ff55 	bl	80075ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	b292      	uxth	r2, r2
 800775e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	1c9a      	adds	r2, r3, #2
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10e      	bne.n	80077a0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007790:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff ff30 	bl	8007600 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d13a      	bne.n	800783a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d109      	bne.n	80077e2 <I2S_IRQHandler+0x3a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	2b40      	cmp	r3, #64	; 0x40
 80077da:	d102      	bne.n	80077e2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ffb4 	bl	800774a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d126      	bne.n	800783a <I2S_IRQHandler+0x92>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d11f      	bne.n	800783a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007808:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782c:	f043 0202 	orr.w	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff feed 	bl	8007614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d136      	bne.n	80078b4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b02      	cmp	r3, #2
 800784e:	d109      	bne.n	8007864 <I2S_IRQHandler+0xbc>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d102      	bne.n	8007864 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff ff45 	bl	80076ee <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b08      	cmp	r3, #8
 800786c:	d122      	bne.n	80078b4 <I2S_IRQHandler+0x10c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b20      	cmp	r3, #32
 800787a:	d11b      	bne.n	80078b4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800788a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a6:	f043 0204 	orr.w	r2, r3, #4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff feb0 	bl	8007614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80078b4:	bf00      	nop
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4aa2      	ldr	r2, [pc, #648]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80078d6:	4ba2      	ldr	r3, [pc, #648]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078d8:	e001      	b.n	80078de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80078da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a9b      	ldr	r2, [pc, #620]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d101      	bne.n	80078f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80078f4:	4b9a      	ldr	r3, [pc, #616]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078f6:	e001      	b.n	80078fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80078f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007908:	d004      	beq.n	8007914 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f040 8099 	bne.w	8007a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b02      	cmp	r3, #2
 800791c:	d107      	bne.n	800792e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f925 	bl	8007b78 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d107      	bne.n	8007948 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9c8 	bl	8007cd8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	d13a      	bne.n	80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d035      	beq.n	80079c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a7e      	ldr	r2, [pc, #504]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d101      	bne.n	800796a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007966:	4b7e      	ldr	r3, [pc, #504]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007968:	e001      	b.n	800796e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800796a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4979      	ldr	r1, [pc, #484]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007976:	428b      	cmp	r3, r1
 8007978:	d101      	bne.n	800797e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800797a:	4b79      	ldr	r3, [pc, #484]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800797c:	e001      	b.n	8007982 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800797e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007986:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007996:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ba:	f043 0202 	orr.w	r2, r3, #2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fe26 	bl	8007614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	f040 80be 	bne.w	8007b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80b8 	beq.w	8007b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a59      	ldr	r2, [pc, #356]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d101      	bne.n	80079fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80079fa:	4b59      	ldr	r3, [pc, #356]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80079fc:	e001      	b.n	8007a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80079fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4954      	ldr	r1, [pc, #336]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007a0a:	428b      	cmp	r3, r1
 8007a0c:	d101      	bne.n	8007a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007a0e:	4b54      	ldr	r3, [pc, #336]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007a10:	e001      	b.n	8007a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a1a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	60bb      	str	r3, [r7, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	f043 0204 	orr.w	r2, r3, #4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fde8 	bl	8007614 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a44:	e084      	b.n	8007b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d107      	bne.n	8007a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8be 	bl	8007bdc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d107      	bne.n	8007a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8fd 	bl	8007c74 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d12f      	bne.n	8007ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02a      	beq.n	8007ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a9c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a2e      	ldr	r2, [pc, #184]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d101      	bne.n	8007aac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007aa8:	4b2d      	ldr	r3, [pc, #180]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007aaa:	e001      	b.n	8007ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4929      	ldr	r1, [pc, #164]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	d101      	bne.n	8007ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007abc:	4b28      	ldr	r3, [pc, #160]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007abe:	e001      	b.n	8007ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ac8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	f043 0202 	orr.w	r2, r3, #2
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fd98 	bl	8007614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b08      	cmp	r3, #8
 8007aec:	d131      	bne.n	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d02c      	beq.n	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d101      	bne.n	8007b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b04:	e001      	b.n	8007b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4912      	ldr	r1, [pc, #72]	; (8007b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b12:	428b      	cmp	r3, r1
 8007b14:	d101      	bne.n	8007b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b18:	e001      	b.n	8007b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b22:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b32:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b40:	f043 0204 	orr.w	r2, r3, #4
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fd63 	bl	8007614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b4e:	e000      	b.n	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b50:	bf00      	nop
}
 8007b52:	bf00      	nop
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40003800 	.word	0x40003800
 8007b60:	40003400 	.word	0x40003400

08007b64 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	1c99      	adds	r1, r3, #2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6251      	str	r1, [r2, #36]	; 0x24
 8007b8a:	881a      	ldrh	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d113      	bne.n	8007bd2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ffc9 	bl	8007b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	1c99      	adds	r1, r3, #2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	6251      	str	r1, [r2, #36]	; 0x24
 8007bee:	8819      	ldrh	r1, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	; (8007c6c <I2SEx_TxISR_I2SExt+0x90>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d101      	bne.n	8007bfe <I2SEx_TxISR_I2SExt+0x22>
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <I2SEx_TxISR_I2SExt+0x94>)
 8007bfc:	e001      	b.n	8007c02 <I2SEx_TxISR_I2SExt+0x26>
 8007bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c02:	460a      	mov	r2, r1
 8007c04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d121      	bne.n	8007c62 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <I2SEx_TxISR_I2SExt+0x90>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d101      	bne.n	8007c2c <I2SEx_TxISR_I2SExt+0x50>
 8007c28:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <I2SEx_TxISR_I2SExt+0x94>)
 8007c2a:	e001      	b.n	8007c30 <I2SEx_TxISR_I2SExt+0x54>
 8007c2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	490d      	ldr	r1, [pc, #52]	; (8007c6c <I2SEx_TxISR_I2SExt+0x90>)
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	d101      	bne.n	8007c40 <I2SEx_TxISR_I2SExt+0x64>
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <I2SEx_TxISR_I2SExt+0x94>)
 8007c3e:	e001      	b.n	8007c44 <I2SEx_TxISR_I2SExt+0x68>
 8007c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff81 	bl	8007b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40003800 	.word	0x40003800
 8007c70:	40003400 	.word	0x40003400

08007c74 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68d8      	ldr	r0, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	1c99      	adds	r1, r3, #2
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007c8c:	b282      	uxth	r2, r0
 8007c8e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d113      	bne.n	8007cd0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007cb6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff ff4a 	bl	8007b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a20      	ldr	r2, [pc, #128]	; (8007d68 <I2SEx_RxISR_I2SExt+0x90>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d101      	bne.n	8007cee <I2SEx_RxISR_I2SExt+0x16>
 8007cea:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <I2SEx_RxISR_I2SExt+0x94>)
 8007cec:	e001      	b.n	8007cf2 <I2SEx_RxISR_I2SExt+0x1a>
 8007cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cf2:	68d8      	ldr	r0, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	1c99      	adds	r1, r3, #2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007cfe:	b282      	uxth	r2, r0
 8007d00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d121      	bne.n	8007d5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a12      	ldr	r2, [pc, #72]	; (8007d68 <I2SEx_RxISR_I2SExt+0x90>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d101      	bne.n	8007d28 <I2SEx_RxISR_I2SExt+0x50>
 8007d24:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <I2SEx_RxISR_I2SExt+0x94>)
 8007d26:	e001      	b.n	8007d2c <I2SEx_RxISR_I2SExt+0x54>
 8007d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	490d      	ldr	r1, [pc, #52]	; (8007d68 <I2SEx_RxISR_I2SExt+0x90>)
 8007d34:	428b      	cmp	r3, r1
 8007d36:	d101      	bne.n	8007d3c <I2SEx_RxISR_I2SExt+0x64>
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <I2SEx_RxISR_I2SExt+0x94>)
 8007d3a:	e001      	b.n	8007d40 <I2SEx_RxISR_I2SExt+0x68>
 8007d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff03 	bl	8007b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40003800 	.word	0x40003800
 8007d6c:	40003400 	.word	0x40003400

08007d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e25b      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d075      	beq.n	8007e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d8e:	4ba3      	ldr	r3, [pc, #652]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 030c 	and.w	r3, r3, #12
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d00c      	beq.n	8007db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d9a:	4ba0      	ldr	r3, [pc, #640]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d112      	bne.n	8007dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007da6:	4b9d      	ldr	r3, [pc, #628]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007db2:	d10b      	bne.n	8007dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db4:	4b99      	ldr	r3, [pc, #612]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d05b      	beq.n	8007e78 <HAL_RCC_OscConfig+0x108>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d157      	bne.n	8007e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e236      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd4:	d106      	bne.n	8007de4 <HAL_RCC_OscConfig+0x74>
 8007dd6:	4b91      	ldr	r3, [pc, #580]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a90      	ldr	r2, [pc, #576]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	e01d      	b.n	8007e20 <HAL_RCC_OscConfig+0xb0>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dec:	d10c      	bne.n	8007e08 <HAL_RCC_OscConfig+0x98>
 8007dee:	4b8b      	ldr	r3, [pc, #556]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a8a      	ldr	r2, [pc, #552]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	4b88      	ldr	r3, [pc, #544]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a87      	ldr	r2, [pc, #540]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	e00b      	b.n	8007e20 <HAL_RCC_OscConfig+0xb0>
 8007e08:	4b84      	ldr	r3, [pc, #528]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a83      	ldr	r2, [pc, #524]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	4b81      	ldr	r3, [pc, #516]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a80      	ldr	r2, [pc, #512]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d013      	beq.n	8007e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e28:	f7fd fbaa 	bl	8005580 <HAL_GetTick>
 8007e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e30:	f7fd fba6 	bl	8005580 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b64      	cmp	r3, #100	; 0x64
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e1fb      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e42:	4b76      	ldr	r3, [pc, #472]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0xc0>
 8007e4e:	e014      	b.n	8007e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e50:	f7fd fb96 	bl	8005580 <HAL_GetTick>
 8007e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e58:	f7fd fb92 	bl	8005580 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b64      	cmp	r3, #100	; 0x64
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e1e7      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e6a:	4b6c      	ldr	r3, [pc, #432]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f0      	bne.n	8007e58 <HAL_RCC_OscConfig+0xe8>
 8007e76:	e000      	b.n	8007e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d063      	beq.n	8007f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e86:	4b65      	ldr	r3, [pc, #404]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 030c 	and.w	r3, r3, #12
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e92:	4b62      	ldr	r3, [pc, #392]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d11c      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e9e:	4b5f      	ldr	r3, [pc, #380]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d116      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eaa:	4b5c      	ldr	r3, [pc, #368]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x152>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d001      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e1bb      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec2:	4b56      	ldr	r3, [pc, #344]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	4952      	ldr	r1, [pc, #328]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ed6:	e03a      	b.n	8007f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d020      	beq.n	8007f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ee0:	4b4f      	ldr	r3, [pc, #316]	; (8008020 <HAL_RCC_OscConfig+0x2b0>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee6:	f7fd fb4b 	bl	8005580 <HAL_GetTick>
 8007eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eec:	e008      	b.n	8007f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eee:	f7fd fb47 	bl	8005580 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d901      	bls.n	8007f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e19c      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f00:	4b46      	ldr	r3, [pc, #280]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0f0      	beq.n	8007eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f0c:	4b43      	ldr	r3, [pc, #268]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	4940      	ldr	r1, [pc, #256]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	600b      	str	r3, [r1, #0]
 8007f20:	e015      	b.n	8007f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f22:	4b3f      	ldr	r3, [pc, #252]	; (8008020 <HAL_RCC_OscConfig+0x2b0>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f28:	f7fd fb2a 	bl	8005580 <HAL_GetTick>
 8007f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f30:	f7fd fb26 	bl	8005580 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e17b      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f42:	4b36      	ldr	r3, [pc, #216]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d030      	beq.n	8007fbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d016      	beq.n	8007f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f62:	4b30      	ldr	r3, [pc, #192]	; (8008024 <HAL_RCC_OscConfig+0x2b4>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f68:	f7fd fb0a 	bl	8005580 <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f70:	f7fd fb06 	bl	8005580 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e15b      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f82:	4b26      	ldr	r3, [pc, #152]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x200>
 8007f8e:	e015      	b.n	8007fbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f90:	4b24      	ldr	r3, [pc, #144]	; (8008024 <HAL_RCC_OscConfig+0x2b4>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f96:	f7fd faf3 	bl	8005580 <HAL_GetTick>
 8007f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f9e:	f7fd faef 	bl	8005580 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e144      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f0      	bne.n	8007f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80a0 	beq.w	800810a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10f      	bne.n	8007ffa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	4a0e      	ldr	r2, [pc, #56]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <HAL_RCC_OscConfig+0x2ac>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <HAL_RCC_OscConfig+0x2b8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d121      	bne.n	800804a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008006:	4b08      	ldr	r3, [pc, #32]	; (8008028 <HAL_RCC_OscConfig+0x2b8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a07      	ldr	r2, [pc, #28]	; (8008028 <HAL_RCC_OscConfig+0x2b8>)
 800800c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008012:	f7fd fab5 	bl	8005580 <HAL_GetTick>
 8008016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008018:	e011      	b.n	800803e <HAL_RCC_OscConfig+0x2ce>
 800801a:	bf00      	nop
 800801c:	40023800 	.word	0x40023800
 8008020:	42470000 	.word	0x42470000
 8008024:	42470e80 	.word	0x42470e80
 8008028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800802c:	f7fd faa8 	bl	8005580 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e0fd      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800803e:	4b81      	ldr	r3, [pc, #516]	; (8008244 <HAL_RCC_OscConfig+0x4d4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d106      	bne.n	8008060 <HAL_RCC_OscConfig+0x2f0>
 8008052:	4b7d      	ldr	r3, [pc, #500]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008056:	4a7c      	ldr	r2, [pc, #496]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	6713      	str	r3, [r2, #112]	; 0x70
 800805e:	e01c      	b.n	800809a <HAL_RCC_OscConfig+0x32a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b05      	cmp	r3, #5
 8008066:	d10c      	bne.n	8008082 <HAL_RCC_OscConfig+0x312>
 8008068:	4b77      	ldr	r3, [pc, #476]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 800806a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806c:	4a76      	ldr	r2, [pc, #472]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 800806e:	f043 0304 	orr.w	r3, r3, #4
 8008072:	6713      	str	r3, [r2, #112]	; 0x70
 8008074:	4b74      	ldr	r3, [pc, #464]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	4a73      	ldr	r2, [pc, #460]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 800807a:	f043 0301 	orr.w	r3, r3, #1
 800807e:	6713      	str	r3, [r2, #112]	; 0x70
 8008080:	e00b      	b.n	800809a <HAL_RCC_OscConfig+0x32a>
 8008082:	4b71      	ldr	r3, [pc, #452]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	4a70      	ldr	r2, [pc, #448]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	6713      	str	r3, [r2, #112]	; 0x70
 800808e:	4b6e      	ldr	r3, [pc, #440]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	4a6d      	ldr	r2, [pc, #436]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008094:	f023 0304 	bic.w	r3, r3, #4
 8008098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d015      	beq.n	80080ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a2:	f7fd fa6d 	bl	8005580 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080a8:	e00a      	b.n	80080c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080aa:	f7fd fa69 	bl	8005580 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e0bc      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080c0:	4b61      	ldr	r3, [pc, #388]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 80080c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0ee      	beq.n	80080aa <HAL_RCC_OscConfig+0x33a>
 80080cc:	e014      	b.n	80080f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ce:	f7fd fa57 	bl	8005580 <HAL_GetTick>
 80080d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080d4:	e00a      	b.n	80080ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080d6:	f7fd fa53 	bl	8005580 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e0a6      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080ec:	4b56      	ldr	r3, [pc, #344]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 80080ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1ee      	bne.n	80080d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d105      	bne.n	800810a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080fe:	4b52      	ldr	r3, [pc, #328]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	4a51      	ldr	r2, [pc, #324]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8092 	beq.w	8008238 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008114:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 030c 	and.w	r3, r3, #12
 800811c:	2b08      	cmp	r3, #8
 800811e:	d05c      	beq.n	80081da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d141      	bne.n	80081ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008128:	4b48      	ldr	r3, [pc, #288]	; (800824c <HAL_RCC_OscConfig+0x4dc>)
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800812e:	f7fd fa27 	bl	8005580 <HAL_GetTick>
 8008132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008134:	e008      	b.n	8008148 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008136:	f7fd fa23 	bl	8005580 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d901      	bls.n	8008148 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e078      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008148:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f0      	bne.n	8008136 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	019b      	lsls	r3, r3, #6
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	085b      	lsrs	r3, r3, #1
 800816c:	3b01      	subs	r3, #1
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	061b      	lsls	r3, r3, #24
 8008178:	4933      	ldr	r1, [pc, #204]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 800817a:	4313      	orrs	r3, r2
 800817c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800817e:	4b33      	ldr	r3, [pc, #204]	; (800824c <HAL_RCC_OscConfig+0x4dc>)
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008184:	f7fd f9fc 	bl	8005580 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800818c:	f7fd f9f8 	bl	8005580 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e04d      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800819e:	4b2a      	ldr	r3, [pc, #168]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0x41c>
 80081aa:	e045      	b.n	8008238 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ac:	4b27      	ldr	r3, [pc, #156]	; (800824c <HAL_RCC_OscConfig+0x4dc>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081b2:	f7fd f9e5 	bl	8005580 <HAL_GetTick>
 80081b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b8:	e008      	b.n	80081cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ba:	f7fd f9e1 	bl	8005580 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e036      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081cc:	4b1e      	ldr	r3, [pc, #120]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1f0      	bne.n	80081ba <HAL_RCC_OscConfig+0x44a>
 80081d8:	e02e      	b.n	8008238 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e029      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081e6:	4b18      	ldr	r3, [pc, #96]	; (8008248 <HAL_RCC_OscConfig+0x4d8>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d11c      	bne.n	8008234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008204:	429a      	cmp	r2, r3
 8008206:	d115      	bne.n	8008234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800820e:	4013      	ands	r3, r2
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008214:	4293      	cmp	r3, r2
 8008216:	d10d      	bne.n	8008234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008222:	429a      	cmp	r2, r3
 8008224:	d106      	bne.n	8008234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008230:	429a      	cmp	r2, r3
 8008232:	d001      	beq.n	8008238 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e000      	b.n	800823a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40007000 	.word	0x40007000
 8008248:	40023800 	.word	0x40023800
 800824c:	42470060 	.word	0x42470060

08008250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0cc      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008264:	4b68      	ldr	r3, [pc, #416]	; (8008408 <HAL_RCC_ClockConfig+0x1b8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d90c      	bls.n	800828c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008272:	4b65      	ldr	r3, [pc, #404]	; (8008408 <HAL_RCC_ClockConfig+0x1b8>)
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800827a:	4b63      	ldr	r3, [pc, #396]	; (8008408 <HAL_RCC_ClockConfig+0x1b8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d001      	beq.n	800828c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e0b8      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d020      	beq.n	80082da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082a4:	4b59      	ldr	r3, [pc, #356]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	4a58      	ldr	r2, [pc, #352]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082bc:	4b53      	ldr	r3, [pc, #332]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	4a52      	ldr	r2, [pc, #328]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082c8:	4b50      	ldr	r3, [pc, #320]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	494d      	ldr	r1, [pc, #308]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d044      	beq.n	8008370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d107      	bne.n	80082fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ee:	4b47      	ldr	r3, [pc, #284]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d119      	bne.n	800832e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e07f      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d003      	beq.n	800830e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800830a:	2b03      	cmp	r3, #3
 800830c:	d107      	bne.n	800831e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800830e:	4b3f      	ldr	r3, [pc, #252]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d109      	bne.n	800832e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e06f      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800831e:	4b3b      	ldr	r3, [pc, #236]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e067      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800832e:	4b37      	ldr	r3, [pc, #220]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f023 0203 	bic.w	r2, r3, #3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	4934      	ldr	r1, [pc, #208]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 800833c:	4313      	orrs	r3, r2
 800833e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008340:	f7fd f91e 	bl	8005580 <HAL_GetTick>
 8008344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008346:	e00a      	b.n	800835e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008348:	f7fd f91a 	bl	8005580 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	f241 3288 	movw	r2, #5000	; 0x1388
 8008356:	4293      	cmp	r3, r2
 8008358:	d901      	bls.n	800835e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e04f      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800835e:	4b2b      	ldr	r3, [pc, #172]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f003 020c 	and.w	r2, r3, #12
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	429a      	cmp	r2, r3
 800836e:	d1eb      	bne.n	8008348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008370:	4b25      	ldr	r3, [pc, #148]	; (8008408 <HAL_RCC_ClockConfig+0x1b8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 030f 	and.w	r3, r3, #15
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d20c      	bcs.n	8008398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837e:	4b22      	ldr	r3, [pc, #136]	; (8008408 <HAL_RCC_ClockConfig+0x1b8>)
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b20      	ldr	r3, [pc, #128]	; (8008408 <HAL_RCC_ClockConfig+0x1b8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e032      	b.n	80083fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d008      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083a4:	4b19      	ldr	r3, [pc, #100]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4916      	ldr	r1, [pc, #88]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0308 	and.w	r3, r3, #8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	490e      	ldr	r1, [pc, #56]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083d6:	f000 f821 	bl	800841c <HAL_RCC_GetSysClockFreq>
 80083da:	4601      	mov	r1, r0
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	091b      	lsrs	r3, r3, #4
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <HAL_RCC_ClockConfig+0x1c0>)
 80083e8:	5cd3      	ldrb	r3, [r2, r3]
 80083ea:	fa21 f303 	lsr.w	r3, r1, r3
 80083ee:	4a09      	ldr	r2, [pc, #36]	; (8008414 <HAL_RCC_ClockConfig+0x1c4>)
 80083f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083f2:	4b09      	ldr	r3, [pc, #36]	; (8008418 <HAL_RCC_ClockConfig+0x1c8>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fd f87e 	bl	80054f8 <HAL_InitTick>

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	40023c00 	.word	0x40023c00
 800840c:	40023800 	.word	0x40023800
 8008410:	0800a054 	.word	0x0800a054
 8008414:	20000018 	.word	0x20000018
 8008418:	2000001c 	.word	0x2000001c

0800841c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800841c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	2300      	movs	r3, #0
 800842c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008432:	4b63      	ldr	r3, [pc, #396]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 030c 	and.w	r3, r3, #12
 800843a:	2b04      	cmp	r3, #4
 800843c:	d007      	beq.n	800844e <HAL_RCC_GetSysClockFreq+0x32>
 800843e:	2b08      	cmp	r3, #8
 8008440:	d008      	beq.n	8008454 <HAL_RCC_GetSysClockFreq+0x38>
 8008442:	2b00      	cmp	r3, #0
 8008444:	f040 80b4 	bne.w	80085b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008448:	4b5e      	ldr	r3, [pc, #376]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800844a:	60bb      	str	r3, [r7, #8]
       break;
 800844c:	e0b3      	b.n	80085b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800844e:	4b5e      	ldr	r3, [pc, #376]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008450:	60bb      	str	r3, [r7, #8]
      break;
 8008452:	e0b0      	b.n	80085b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008454:	4b5a      	ldr	r3, [pc, #360]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800845c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800845e:	4b58      	ldr	r3, [pc, #352]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d04a      	beq.n	8008500 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800846a:	4b55      	ldr	r3, [pc, #340]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	099b      	lsrs	r3, r3, #6
 8008470:	f04f 0400 	mov.w	r4, #0
 8008474:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	ea03 0501 	and.w	r5, r3, r1
 8008480:	ea04 0602 	and.w	r6, r4, r2
 8008484:	4629      	mov	r1, r5
 8008486:	4632      	mov	r2, r6
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	f04f 0400 	mov.w	r4, #0
 8008490:	0154      	lsls	r4, r2, #5
 8008492:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008496:	014b      	lsls	r3, r1, #5
 8008498:	4619      	mov	r1, r3
 800849a:	4622      	mov	r2, r4
 800849c:	1b49      	subs	r1, r1, r5
 800849e:	eb62 0206 	sbc.w	r2, r2, r6
 80084a2:	f04f 0300 	mov.w	r3, #0
 80084a6:	f04f 0400 	mov.w	r4, #0
 80084aa:	0194      	lsls	r4, r2, #6
 80084ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80084b0:	018b      	lsls	r3, r1, #6
 80084b2:	1a5b      	subs	r3, r3, r1
 80084b4:	eb64 0402 	sbc.w	r4, r4, r2
 80084b8:	f04f 0100 	mov.w	r1, #0
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	00e2      	lsls	r2, r4, #3
 80084c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80084c6:	00d9      	lsls	r1, r3, #3
 80084c8:	460b      	mov	r3, r1
 80084ca:	4614      	mov	r4, r2
 80084cc:	195b      	adds	r3, r3, r5
 80084ce:	eb44 0406 	adc.w	r4, r4, r6
 80084d2:	f04f 0100 	mov.w	r1, #0
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	0262      	lsls	r2, r4, #9
 80084dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80084e0:	0259      	lsls	r1, r3, #9
 80084e2:	460b      	mov	r3, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	4621      	mov	r1, r4
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f04f 0400 	mov.w	r4, #0
 80084f0:	461a      	mov	r2, r3
 80084f2:	4623      	mov	r3, r4
 80084f4:	f7f7 fe7a 	bl	80001ec <__aeabi_uldivmod>
 80084f8:	4603      	mov	r3, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	e049      	b.n	8008594 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008500:	4b2f      	ldr	r3, [pc, #188]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	099b      	lsrs	r3, r3, #6
 8008506:	f04f 0400 	mov.w	r4, #0
 800850a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	ea03 0501 	and.w	r5, r3, r1
 8008516:	ea04 0602 	and.w	r6, r4, r2
 800851a:	4629      	mov	r1, r5
 800851c:	4632      	mov	r2, r6
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	f04f 0400 	mov.w	r4, #0
 8008526:	0154      	lsls	r4, r2, #5
 8008528:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800852c:	014b      	lsls	r3, r1, #5
 800852e:	4619      	mov	r1, r3
 8008530:	4622      	mov	r2, r4
 8008532:	1b49      	subs	r1, r1, r5
 8008534:	eb62 0206 	sbc.w	r2, r2, r6
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	f04f 0400 	mov.w	r4, #0
 8008540:	0194      	lsls	r4, r2, #6
 8008542:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008546:	018b      	lsls	r3, r1, #6
 8008548:	1a5b      	subs	r3, r3, r1
 800854a:	eb64 0402 	sbc.w	r4, r4, r2
 800854e:	f04f 0100 	mov.w	r1, #0
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	00e2      	lsls	r2, r4, #3
 8008558:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800855c:	00d9      	lsls	r1, r3, #3
 800855e:	460b      	mov	r3, r1
 8008560:	4614      	mov	r4, r2
 8008562:	195b      	adds	r3, r3, r5
 8008564:	eb44 0406 	adc.w	r4, r4, r6
 8008568:	f04f 0100 	mov.w	r1, #0
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	02a2      	lsls	r2, r4, #10
 8008572:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008576:	0299      	lsls	r1, r3, #10
 8008578:	460b      	mov	r3, r1
 800857a:	4614      	mov	r4, r2
 800857c:	4618      	mov	r0, r3
 800857e:	4621      	mov	r1, r4
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f04f 0400 	mov.w	r4, #0
 8008586:	461a      	mov	r2, r3
 8008588:	4623      	mov	r3, r4
 800858a:	f7f7 fe2f 	bl	80001ec <__aeabi_uldivmod>
 800858e:	4603      	mov	r3, r0
 8008590:	460c      	mov	r4, r1
 8008592:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	3301      	adds	r3, #1
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ac:	60bb      	str	r3, [r7, #8]
      break;
 80085ae:	e002      	b.n	80085b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80085b2:	60bb      	str	r3, [r7, #8]
      break;
 80085b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085b6:	68bb      	ldr	r3, [r7, #8]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c0:	40023800 	.word	0x40023800
 80085c4:	00f42400 	.word	0x00f42400
 80085c8:	007a1200 	.word	0x007a1200

080085cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085d0:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80085d2:	681b      	ldr	r3, [r3, #0]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000018 	.word	0x20000018

080085e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085e8:	f7ff fff0 	bl	80085cc <HAL_RCC_GetHCLKFreq>
 80085ec:	4601      	mov	r1, r0
 80085ee:	4b05      	ldr	r3, [pc, #20]	; (8008604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	0a9b      	lsrs	r3, r3, #10
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	4a03      	ldr	r2, [pc, #12]	; (8008608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085fa:	5cd3      	ldrb	r3, [r2, r3]
 80085fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40023800 	.word	0x40023800
 8008608:	0800a064 	.word	0x0800a064

0800860c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d105      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008630:	2b00      	cmp	r3, #0
 8008632:	d035      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008634:	4b62      	ldr	r3, [pc, #392]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800863a:	f7fc ffa1 	bl	8005580 <HAL_GetTick>
 800863e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008640:	e008      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008642:	f7fc ff9d 	bl	8005580 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e0b0      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008654:	4b5b      	ldr	r3, [pc, #364]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1f0      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	019a      	lsls	r2, r3, #6
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	071b      	lsls	r3, r3, #28
 800866c:	4955      	ldr	r1, [pc, #340]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008674:	4b52      	ldr	r3, [pc, #328]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800867a:	f7fc ff81 	bl	8005580 <HAL_GetTick>
 800867e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008680:	e008      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008682:	f7fc ff7d 	bl	8005580 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e090      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008694:	4b4b      	ldr	r3, [pc, #300]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f0      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8083 	beq.w	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	4b44      	ldr	r3, [pc, #272]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	4a43      	ldr	r2, [pc, #268]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086bc:	6413      	str	r3, [r2, #64]	; 0x40
 80086be:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086ca:	4b3f      	ldr	r3, [pc, #252]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a3e      	ldr	r2, [pc, #248]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086d6:	f7fc ff53 	bl	8005580 <HAL_GetTick>
 80086da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80086de:	f7fc ff4f 	bl	8005580 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e062      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086f0:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086fc:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008704:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d02f      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	429a      	cmp	r2, r3
 8008718:	d028      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800871a:	4b2a      	ldr	r3, [pc, #168]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008722:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008724:	4b29      	ldr	r3, [pc, #164]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008726:	2201      	movs	r2, #1
 8008728:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800872a:	4b28      	ldr	r3, [pc, #160]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008730:	4a24      	ldr	r2, [pc, #144]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b01      	cmp	r3, #1
 8008740:	d114      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008742:	f7fc ff1d 	bl	8005580 <HAL_GetTick>
 8008746:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008748:	e00a      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800874a:	f7fc ff19 	bl	8005580 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	f241 3288 	movw	r2, #5000	; 0x1388
 8008758:	4293      	cmp	r3, r2
 800875a:	d901      	bls.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e02a      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008760:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	f003 0302 	and.w	r3, r3, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0ee      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008778:	d10d      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800877a:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800878a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878e:	490d      	ldr	r1, [pc, #52]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008790:	4313      	orrs	r3, r2
 8008792:	608b      	str	r3, [r1, #8]
 8008794:	e005      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800879c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087a0:	6093      	str	r3, [r2, #8]
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ae:	4905      	ldr	r1, [pc, #20]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	42470068 	.word	0x42470068
 80087c4:	40023800 	.word	0x40023800
 80087c8:	40007000 	.word	0x40007000
 80087cc:	42470e40 	.word	0x42470e40

080087d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d13d      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80087ee:	4b22      	ldr	r3, [pc, #136]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d004      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d12f      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008802:	4b1e      	ldr	r3, [pc, #120]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008804:	617b      	str	r3, [r7, #20]
          break;
 8008806:	e02f      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008808:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008814:	d108      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008816:	4b18      	ldr	r3, [pc, #96]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800881e:	4a18      	ldr	r2, [pc, #96]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	613b      	str	r3, [r7, #16]
 8008826:	e007      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008830:	4a14      	ldr	r2, [pc, #80]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008832:	fbb2 f3f3 	udiv	r3, r2, r3
 8008836:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800883a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800883e:	099b      	lsrs	r3, r3, #6
 8008840:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800884e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008852:	0f1b      	lsrs	r3, r3, #28
 8008854:	f003 0307 	and.w	r3, r3, #7
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	fbb2 f3f3 	udiv	r3, r2, r3
 800885e:	617b      	str	r3, [r7, #20]
          break;
 8008860:	e002      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]
          break;
 8008866:	bf00      	nop
        }
      }
      break;
 8008868:	bf00      	nop
    }
  }
  return frequency;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	371c      	adds	r7, #28
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	40023800 	.word	0x40023800
 800887c:	00bb8000 	.word	0x00bb8000
 8008880:	007a1200 	.word	0x007a1200
 8008884:	00f42400 	.word	0x00f42400

08008888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e056      	b.n	8008948 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fc fc45 	bl	8005144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2202      	movs	r2, #2
 80088be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	431a      	orrs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	ea42 0103 	orr.w	r1, r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	0c1b      	lsrs	r3, r3, #16
 8008918:	f003 0104 	and.w	r1, r3, #4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69da      	ldr	r2, [r3, #28]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008936:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	4613      	mov	r3, r2
 800895e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_SPI_Transmit+0x22>
 800896e:	2302      	movs	r3, #2
 8008970:	e11e      	b.n	8008bb0 <HAL_SPI_Transmit+0x260>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800897a:	f7fc fe01 	bl	8005580 <HAL_GetTick>
 800897e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d002      	beq.n	8008996 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008990:	2302      	movs	r3, #2
 8008992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008994:	e103      	b.n	8008b9e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_SPI_Transmit+0x52>
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089a6:	e0fa      	b.n	8008b9e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2203      	movs	r2, #3
 80089ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	88fa      	ldrh	r2, [r7, #6]
 80089c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	88fa      	ldrh	r2, [r7, #6]
 80089c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ee:	d107      	bne.n	8008a00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b40      	cmp	r3, #64	; 0x40
 8008a0c:	d007      	beq.n	8008a1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a26:	d14b      	bne.n	8008ac0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_SPI_Transmit+0xe6>
 8008a30:	8afb      	ldrh	r3, [r7, #22]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d13e      	bne.n	8008ab4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3a:	881a      	ldrh	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	1c9a      	adds	r2, r3, #2
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a5a:	e02b      	b.n	8008ab4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d112      	bne.n	8008a90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	881a      	ldrh	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	1c9a      	adds	r2, r3, #2
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a8e:	e011      	b.n	8008ab4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a90:	f7fc fd76 	bl	8005580 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d803      	bhi.n	8008aa8 <HAL_SPI_Transmit+0x158>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d102      	bne.n	8008aae <HAL_SPI_Transmit+0x15e>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ab2:	e074      	b.n	8008b9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1ce      	bne.n	8008a5c <HAL_SPI_Transmit+0x10c>
 8008abe:	e04c      	b.n	8008b5a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <HAL_SPI_Transmit+0x17e>
 8008ac8:	8afb      	ldrh	r3, [r7, #22]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d140      	bne.n	8008b50 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	7812      	ldrb	r2, [r2, #0]
 8008ada:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008af4:	e02c      	b.n	8008b50 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d113      	bne.n	8008b2c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	330c      	adds	r3, #12
 8008b0e:	7812      	ldrb	r2, [r2, #0]
 8008b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b2a:	e011      	b.n	8008b50 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2c:	f7fc fd28 	bl	8005580 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d803      	bhi.n	8008b44 <HAL_SPI_Transmit+0x1f4>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d102      	bne.n	8008b4a <HAL_SPI_Transmit+0x1fa>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b4e:	e026      	b.n	8008b9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1cd      	bne.n	8008af6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 fa44 	bl	8008fec <SPI_EndRxTxTransaction>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b78:	2300      	movs	r3, #0
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	613b      	str	r3, [r7, #16]
 8008b8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	77fb      	strb	r3, [r7, #31]
 8008b9a:	e000      	b.n	8008b9e <HAL_SPI_Transmit+0x24e>
  }

error:
 8008b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3720      	adds	r7, #32
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08c      	sub	sp, #48	; 0x30
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <HAL_SPI_TransmitReceive+0x26>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e18a      	b.n	8008ef4 <HAL_SPI_TransmitReceive+0x33c>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be6:	f7fc fccb 	bl	8005580 <HAL_GetTick>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d00f      	beq.n	8008c28 <HAL_SPI_TransmitReceive+0x70>
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c0e:	d107      	bne.n	8008c20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <HAL_SPI_TransmitReceive+0x68>
 8008c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d003      	beq.n	8008c28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
 8008c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c26:	e15b      	b.n	8008ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_SPI_TransmitReceive+0x82>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <HAL_SPI_TransmitReceive+0x82>
 8008c34:	887b      	ldrh	r3, [r7, #2]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c40:	e14e      	b.n	8008ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d003      	beq.n	8008c56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2205      	movs	r2, #5
 8008c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	887a      	ldrh	r2, [r7, #2]
 8008c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	887a      	ldrh	r2, [r7, #2]
 8008c6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	887a      	ldrh	r2, [r7, #2]
 8008c78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	887a      	ldrh	r2, [r7, #2]
 8008c7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c96:	2b40      	cmp	r3, #64	; 0x40
 8008c98:	d007      	beq.n	8008caa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cb2:	d178      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HAL_SPI_TransmitReceive+0x10a>
 8008cbc:	8b7b      	ldrh	r3, [r7, #26]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d166      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	881a      	ldrh	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ce6:	e053      	b.n	8008d90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d11b      	bne.n	8008d2e <HAL_SPI_TransmitReceive+0x176>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d016      	beq.n	8008d2e <HAL_SPI_TransmitReceive+0x176>
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d113      	bne.n	8008d2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	881a      	ldrh	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d16:	1c9a      	adds	r2, r3, #2
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d119      	bne.n	8008d70 <HAL_SPI_TransmitReceive+0x1b8>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d014      	beq.n	8008d70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	b292      	uxth	r2, r2
 8008d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d70:	f7fc fc06 	bl	8005580 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d807      	bhi.n	8008d90 <HAL_SPI_TransmitReceive+0x1d8>
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d86:	d003      	beq.n	8008d90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d8e:	e0a7      	b.n	8008ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1a6      	bne.n	8008ce8 <HAL_SPI_TransmitReceive+0x130>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1a1      	bne.n	8008ce8 <HAL_SPI_TransmitReceive+0x130>
 8008da4:	e07c      	b.n	8008ea0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_SPI_TransmitReceive+0x1fc>
 8008dae:	8b7b      	ldrh	r3, [r7, #26]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d16b      	bne.n	8008e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dda:	e057      	b.n	8008e8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d11c      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x26c>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d017      	beq.n	8008e24 <HAL_SPI_TransmitReceive+0x26c>
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d114      	bne.n	8008e24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	330c      	adds	r3, #12
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d119      	bne.n	8008e66 <HAL_SPI_TransmitReceive+0x2ae>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d014      	beq.n	8008e66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e62:	2301      	movs	r3, #1
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e66:	f7fc fb8b 	bl	8005580 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d803      	bhi.n	8008e7e <HAL_SPI_TransmitReceive+0x2c6>
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d102      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x2cc>
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e8a:	e029      	b.n	8008ee0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1a2      	bne.n	8008ddc <HAL_SPI_TransmitReceive+0x224>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d19d      	bne.n	8008ddc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f8a1 	bl	8008fec <SPI_EndRxTxTransaction>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ebc:	e010      	b.n	8008ee0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	e000      	b.n	8008ee0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3730      	adds	r7, #48	; 0x30
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f0a:	b2db      	uxtb	r3, r3
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f28:	e04c      	b.n	8008fc4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d048      	beq.n	8008fc4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f32:	f7fc fb25 	bl	8005580 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d902      	bls.n	8008f48 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d13d      	bne.n	8008fc4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f60:	d111      	bne.n	8008f86 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f6a:	d004      	beq.n	8008f76 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f74:	d107      	bne.n	8008f86 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8e:	d10f      	bne.n	8008fb0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e00f      	b.n	8008fe4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689a      	ldr	r2, [r3, #8]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2301      	moveq	r3, #1
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d1a3      	bne.n	8008f2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ff8:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <SPI_EndRxTxTransaction+0x7c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1b      	ldr	r2, [pc, #108]	; (800906c <SPI_EndRxTxTransaction+0x80>)
 8008ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8009002:	0d5b      	lsrs	r3, r3, #21
 8009004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009016:	d112      	bne.n	800903e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	2180      	movs	r1, #128	; 0x80
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff ff78 	bl	8008f18 <SPI_WaitFlagStateUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d016      	beq.n	800905c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009032:	f043 0220 	orr.w	r2, r3, #32
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e00f      	b.n	800905e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00a      	beq.n	800905a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	3b01      	subs	r3, #1
 8009048:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009054:	2b80      	cmp	r3, #128	; 0x80
 8009056:	d0f2      	beq.n	800903e <SPI_EndRxTxTransaction+0x52>
 8009058:	e000      	b.n	800905c <SPI_EndRxTxTransaction+0x70>
        break;
 800905a:	bf00      	nop
  }

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000018 	.word	0x20000018
 800906c:	165e9f81 	.word	0x165e9f81

08009070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e01d      	b.n	80090be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7fc f92c 	bl	80052f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f000 f9f0 	bl	8009494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d122      	bne.n	8009122 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d11b      	bne.n	8009122 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f06f 0202 	mvn.w	r2, #2
 80090f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9a5 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 800910e:	e005      	b.n	800911c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f997 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9a8 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b04      	cmp	r3, #4
 800912e:	d122      	bne.n	8009176 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b04      	cmp	r3, #4
 800913c:	d11b      	bne.n	8009176 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f06f 0204 	mvn.w	r2, #4
 8009146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f97b 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 8009162:	e005      	b.n	8009170 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f96d 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f97e 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b08      	cmp	r3, #8
 8009182:	d122      	bne.n	80091ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b08      	cmp	r3, #8
 8009190:	d11b      	bne.n	80091ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0208 	mvn.w	r2, #8
 800919a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2204      	movs	r2, #4
 80091a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f951 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 80091b6:	e005      	b.n	80091c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f943 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f954 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d122      	bne.n	800921e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d11b      	bne.n	800921e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f06f 0210 	mvn.w	r2, #16
 80091ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2208      	movs	r2, #8
 80091f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f927 	bl	8009458 <HAL_TIM_IC_CaptureCallback>
 800920a:	e005      	b.n	8009218 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f919 	bl	8009444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f92a 	bl	800946c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b01      	cmp	r3, #1
 800922a:	d10e      	bne.n	800924a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b01      	cmp	r3, #1
 8009238:	d107      	bne.n	800924a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f06f 0201 	mvn.w	r2, #1
 8009242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7fa fe7b 	bl	8003f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b80      	cmp	r3, #128	; 0x80
 8009256:	d10e      	bne.n	8009276 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d107      	bne.n	8009276 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800926e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 facf 	bl	8009814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	d10e      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b40      	cmp	r3, #64	; 0x40
 8009290:	d107      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800929a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f8ef 	bl	8009480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d10e      	bne.n	80092ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	d107      	bne.n	80092ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f06f 0220 	mvn.w	r2, #32
 80092c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fa99 	bl	8009800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_TIM_ConfigClockSource+0x18>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e0a6      	b.n	800943c <HAL_TIM_ConfigClockSource+0x166>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2202      	movs	r2, #2
 80092fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800930c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009314:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d067      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0x120>
 8009326:	2b40      	cmp	r3, #64	; 0x40
 8009328:	d80b      	bhi.n	8009342 <HAL_TIM_ConfigClockSource+0x6c>
 800932a:	2b10      	cmp	r3, #16
 800932c:	d073      	beq.n	8009416 <HAL_TIM_ConfigClockSource+0x140>
 800932e:	2b10      	cmp	r3, #16
 8009330:	d802      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x62>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d06f      	beq.n	8009416 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009336:	e078      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009338:	2b20      	cmp	r3, #32
 800933a:	d06c      	beq.n	8009416 <HAL_TIM_ConfigClockSource+0x140>
 800933c:	2b30      	cmp	r3, #48	; 0x30
 800933e:	d06a      	beq.n	8009416 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009340:	e073      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009342:	2b70      	cmp	r3, #112	; 0x70
 8009344:	d00d      	beq.n	8009362 <HAL_TIM_ConfigClockSource+0x8c>
 8009346:	2b70      	cmp	r3, #112	; 0x70
 8009348:	d804      	bhi.n	8009354 <HAL_TIM_ConfigClockSource+0x7e>
 800934a:	2b50      	cmp	r3, #80	; 0x50
 800934c:	d033      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0xe0>
 800934e:	2b60      	cmp	r3, #96	; 0x60
 8009350:	d041      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009352:	e06a      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009358:	d066      	beq.n	8009428 <HAL_TIM_ConfigClockSource+0x152>
 800935a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935e:	d017      	beq.n	8009390 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009360:	e063      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	6899      	ldr	r1, [r3, #8]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f000 f9a9 	bl	80096c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009384:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	609a      	str	r2, [r3, #8]
      break;
 800938e:	e04c      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	6899      	ldr	r1, [r3, #8]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f000 f992 	bl	80096c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093b2:	609a      	str	r2, [r3, #8]
      break;
 80093b4:	e039      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6859      	ldr	r1, [r3, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	461a      	mov	r2, r3
 80093c4:	f000 f906 	bl	80095d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2150      	movs	r1, #80	; 0x50
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f95f 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 80093d4:	e029      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	6859      	ldr	r1, [r3, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	461a      	mov	r2, r3
 80093e4:	f000 f925 	bl	8009632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2160      	movs	r1, #96	; 0x60
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 f94f 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 80093f4:	e019      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6859      	ldr	r1, [r3, #4]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	461a      	mov	r2, r3
 8009404:	f000 f8e6 	bl	80095d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2140      	movs	r1, #64	; 0x40
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f93f 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 8009414:	e009      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f000 f936 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 8009426:	e000      	b.n	800942a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009428:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a40      	ldr	r2, [pc, #256]	; (80095a8 <TIM_Base_SetConfig+0x114>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d013      	beq.n	80094d4 <TIM_Base_SetConfig+0x40>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b2:	d00f      	beq.n	80094d4 <TIM_Base_SetConfig+0x40>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a3d      	ldr	r2, [pc, #244]	; (80095ac <TIM_Base_SetConfig+0x118>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00b      	beq.n	80094d4 <TIM_Base_SetConfig+0x40>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a3c      	ldr	r2, [pc, #240]	; (80095b0 <TIM_Base_SetConfig+0x11c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d007      	beq.n	80094d4 <TIM_Base_SetConfig+0x40>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a3b      	ldr	r2, [pc, #236]	; (80095b4 <TIM_Base_SetConfig+0x120>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d003      	beq.n	80094d4 <TIM_Base_SetConfig+0x40>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a3a      	ldr	r2, [pc, #232]	; (80095b8 <TIM_Base_SetConfig+0x124>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d108      	bne.n	80094e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a2f      	ldr	r2, [pc, #188]	; (80095a8 <TIM_Base_SetConfig+0x114>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d02b      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f4:	d027      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a2c      	ldr	r2, [pc, #176]	; (80095ac <TIM_Base_SetConfig+0x118>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d023      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a2b      	ldr	r2, [pc, #172]	; (80095b0 <TIM_Base_SetConfig+0x11c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d01f      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a2a      	ldr	r2, [pc, #168]	; (80095b4 <TIM_Base_SetConfig+0x120>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d01b      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a29      	ldr	r2, [pc, #164]	; (80095b8 <TIM_Base_SetConfig+0x124>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d017      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a28      	ldr	r2, [pc, #160]	; (80095bc <TIM_Base_SetConfig+0x128>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a27      	ldr	r2, [pc, #156]	; (80095c0 <TIM_Base_SetConfig+0x12c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00f      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a26      	ldr	r2, [pc, #152]	; (80095c4 <TIM_Base_SetConfig+0x130>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d00b      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a25      	ldr	r2, [pc, #148]	; (80095c8 <TIM_Base_SetConfig+0x134>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d007      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a24      	ldr	r2, [pc, #144]	; (80095cc <TIM_Base_SetConfig+0x138>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d003      	beq.n	8009546 <TIM_Base_SetConfig+0xb2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a23      	ldr	r2, [pc, #140]	; (80095d0 <TIM_Base_SetConfig+0x13c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d108      	bne.n	8009558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <TIM_Base_SetConfig+0x114>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_Base_SetConfig+0xf8>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a0c      	ldr	r2, [pc, #48]	; (80095b8 <TIM_Base_SetConfig+0x124>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d103      	bne.n	8009594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	691a      	ldr	r2, [r3, #16]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	615a      	str	r2, [r3, #20]
}
 800959a:	bf00      	nop
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40010000 	.word	0x40010000
 80095ac:	40000400 	.word	0x40000400
 80095b0:	40000800 	.word	0x40000800
 80095b4:	40000c00 	.word	0x40000c00
 80095b8:	40010400 	.word	0x40010400
 80095bc:	40014000 	.word	0x40014000
 80095c0:	40014400 	.word	0x40014400
 80095c4:	40014800 	.word	0x40014800
 80095c8:	40001800 	.word	0x40001800
 80095cc:	40001c00 	.word	0x40001c00
 80095d0:	40002000 	.word	0x40002000

080095d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	f023 0201 	bic.w	r2, r3, #1
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f023 030a 	bic.w	r3, r3, #10
 8009610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	621a      	str	r2, [r3, #32]
}
 8009626:	bf00      	nop
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009632:	b480      	push	{r7}
 8009634:	b087      	sub	sp, #28
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	f023 0210 	bic.w	r2, r3, #16
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800965c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	031b      	lsls	r3, r3, #12
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4313      	orrs	r3, r2
 8009666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800966e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	621a      	str	r2, [r3, #32]
}
 8009686:	bf00      	nop
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f043 0307 	orr.w	r3, r3, #7
 80096b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	609a      	str	r2, [r3, #8]
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	021a      	lsls	r2, r3, #8
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	609a      	str	r2, [r3, #8]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800971c:	2302      	movs	r3, #2
 800971e:	e05a      	b.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a21      	ldr	r2, [pc, #132]	; (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d022      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800976c:	d01d      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d018      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d013      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a1a      	ldr	r2, [pc, #104]	; (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d00e      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a18      	ldr	r2, [pc, #96]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d009      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a17      	ldr	r2, [pc, #92]	; (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d004      	beq.n	80097aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a15      	ldr	r2, [pc, #84]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d10c      	bne.n	80097c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40010000 	.word	0x40010000
 80097e8:	40000400 	.word	0x40000400
 80097ec:	40000800 	.word	0x40000800
 80097f0:	40000c00 	.word	0x40000c00
 80097f4:	40010400 	.word	0x40010400
 80097f8:	40014000 	.word	0x40014000
 80097fc:	40001800 	.word	0x40001800

08009800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <__errno>:
 8009828:	4b01      	ldr	r3, [pc, #4]	; (8009830 <__errno+0x8>)
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20000024 	.word	0x20000024

08009834 <__libc_init_array>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	4e0d      	ldr	r6, [pc, #52]	; (800986c <__libc_init_array+0x38>)
 8009838:	4c0d      	ldr	r4, [pc, #52]	; (8009870 <__libc_init_array+0x3c>)
 800983a:	1ba4      	subs	r4, r4, r6
 800983c:	10a4      	asrs	r4, r4, #2
 800983e:	2500      	movs	r5, #0
 8009840:	42a5      	cmp	r5, r4
 8009842:	d109      	bne.n	8009858 <__libc_init_array+0x24>
 8009844:	4e0b      	ldr	r6, [pc, #44]	; (8009874 <__libc_init_array+0x40>)
 8009846:	4c0c      	ldr	r4, [pc, #48]	; (8009878 <__libc_init_array+0x44>)
 8009848:	f000 f8d2 	bl	80099f0 <_init>
 800984c:	1ba4      	subs	r4, r4, r6
 800984e:	10a4      	asrs	r4, r4, #2
 8009850:	2500      	movs	r5, #0
 8009852:	42a5      	cmp	r5, r4
 8009854:	d105      	bne.n	8009862 <__libc_init_array+0x2e>
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800985c:	4798      	blx	r3
 800985e:	3501      	adds	r5, #1
 8009860:	e7ee      	b.n	8009840 <__libc_init_array+0xc>
 8009862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009866:	4798      	blx	r3
 8009868:	3501      	adds	r5, #1
 800986a:	e7f2      	b.n	8009852 <__libc_init_array+0x1e>
 800986c:	0800a07c 	.word	0x0800a07c
 8009870:	0800a07c 	.word	0x0800a07c
 8009874:	0800a07c 	.word	0x0800a07c
 8009878:	0800a080 	.word	0x0800a080

0800987c <malloc>:
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <malloc+0xc>)
 800987e:	4601      	mov	r1, r0
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	f000 b80b 	b.w	800989c <_malloc_r>
 8009886:	bf00      	nop
 8009888:	20000024 	.word	0x20000024

0800988c <memset>:
 800988c:	4402      	add	r2, r0
 800988e:	4603      	mov	r3, r0
 8009890:	4293      	cmp	r3, r2
 8009892:	d100      	bne.n	8009896 <memset+0xa>
 8009894:	4770      	bx	lr
 8009896:	f803 1b01 	strb.w	r1, [r3], #1
 800989a:	e7f9      	b.n	8009890 <memset+0x4>

0800989c <_malloc_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	1ccd      	adds	r5, r1, #3
 80098a0:	f025 0503 	bic.w	r5, r5, #3
 80098a4:	3508      	adds	r5, #8
 80098a6:	2d0c      	cmp	r5, #12
 80098a8:	bf38      	it	cc
 80098aa:	250c      	movcc	r5, #12
 80098ac:	2d00      	cmp	r5, #0
 80098ae:	4606      	mov	r6, r0
 80098b0:	db01      	blt.n	80098b6 <_malloc_r+0x1a>
 80098b2:	42a9      	cmp	r1, r5
 80098b4:	d903      	bls.n	80098be <_malloc_r+0x22>
 80098b6:	230c      	movs	r3, #12
 80098b8:	6033      	str	r3, [r6, #0]
 80098ba:	2000      	movs	r0, #0
 80098bc:	bd70      	pop	{r4, r5, r6, pc}
 80098be:	f000 f895 	bl	80099ec <__malloc_lock>
 80098c2:	4a21      	ldr	r2, [pc, #132]	; (8009948 <_malloc_r+0xac>)
 80098c4:	6814      	ldr	r4, [r2, #0]
 80098c6:	4621      	mov	r1, r4
 80098c8:	b991      	cbnz	r1, 80098f0 <_malloc_r+0x54>
 80098ca:	4c20      	ldr	r4, [pc, #128]	; (800994c <_malloc_r+0xb0>)
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	b91b      	cbnz	r3, 80098d8 <_malloc_r+0x3c>
 80098d0:	4630      	mov	r0, r6
 80098d2:	f000 f83d 	bl	8009950 <_sbrk_r>
 80098d6:	6020      	str	r0, [r4, #0]
 80098d8:	4629      	mov	r1, r5
 80098da:	4630      	mov	r0, r6
 80098dc:	f000 f838 	bl	8009950 <_sbrk_r>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d124      	bne.n	800992e <_malloc_r+0x92>
 80098e4:	230c      	movs	r3, #12
 80098e6:	6033      	str	r3, [r6, #0]
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 f880 	bl	80099ee <__malloc_unlock>
 80098ee:	e7e4      	b.n	80098ba <_malloc_r+0x1e>
 80098f0:	680b      	ldr	r3, [r1, #0]
 80098f2:	1b5b      	subs	r3, r3, r5
 80098f4:	d418      	bmi.n	8009928 <_malloc_r+0x8c>
 80098f6:	2b0b      	cmp	r3, #11
 80098f8:	d90f      	bls.n	800991a <_malloc_r+0x7e>
 80098fa:	600b      	str	r3, [r1, #0]
 80098fc:	50cd      	str	r5, [r1, r3]
 80098fe:	18cc      	adds	r4, r1, r3
 8009900:	4630      	mov	r0, r6
 8009902:	f000 f874 	bl	80099ee <__malloc_unlock>
 8009906:	f104 000b 	add.w	r0, r4, #11
 800990a:	1d23      	adds	r3, r4, #4
 800990c:	f020 0007 	bic.w	r0, r0, #7
 8009910:	1ac3      	subs	r3, r0, r3
 8009912:	d0d3      	beq.n	80098bc <_malloc_r+0x20>
 8009914:	425a      	negs	r2, r3
 8009916:	50e2      	str	r2, [r4, r3]
 8009918:	e7d0      	b.n	80098bc <_malloc_r+0x20>
 800991a:	428c      	cmp	r4, r1
 800991c:	684b      	ldr	r3, [r1, #4]
 800991e:	bf16      	itet	ne
 8009920:	6063      	strne	r3, [r4, #4]
 8009922:	6013      	streq	r3, [r2, #0]
 8009924:	460c      	movne	r4, r1
 8009926:	e7eb      	b.n	8009900 <_malloc_r+0x64>
 8009928:	460c      	mov	r4, r1
 800992a:	6849      	ldr	r1, [r1, #4]
 800992c:	e7cc      	b.n	80098c8 <_malloc_r+0x2c>
 800992e:	1cc4      	adds	r4, r0, #3
 8009930:	f024 0403 	bic.w	r4, r4, #3
 8009934:	42a0      	cmp	r0, r4
 8009936:	d005      	beq.n	8009944 <_malloc_r+0xa8>
 8009938:	1a21      	subs	r1, r4, r0
 800993a:	4630      	mov	r0, r6
 800993c:	f000 f808 	bl	8009950 <_sbrk_r>
 8009940:	3001      	adds	r0, #1
 8009942:	d0cf      	beq.n	80098e4 <_malloc_r+0x48>
 8009944:	6025      	str	r5, [r4, #0]
 8009946:	e7db      	b.n	8009900 <_malloc_r+0x64>
 8009948:	2000072c 	.word	0x2000072c
 800994c:	20000730 	.word	0x20000730

08009950 <_sbrk_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4c06      	ldr	r4, [pc, #24]	; (800996c <_sbrk_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4605      	mov	r5, r0
 8009958:	4608      	mov	r0, r1
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	f7fb fd3e 	bl	80053dc <_sbrk>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_sbrk_r+0x1a>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	b103      	cbz	r3, 800996a <_sbrk_r+0x1a>
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	200165b8 	.word	0x200165b8

08009970 <strcat>:
 8009970:	b510      	push	{r4, lr}
 8009972:	4603      	mov	r3, r0
 8009974:	781a      	ldrb	r2, [r3, #0]
 8009976:	1c5c      	adds	r4, r3, #1
 8009978:	b93a      	cbnz	r2, 800998a <strcat+0x1a>
 800997a:	3b01      	subs	r3, #1
 800997c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009980:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009984:	2a00      	cmp	r2, #0
 8009986:	d1f9      	bne.n	800997c <strcat+0xc>
 8009988:	bd10      	pop	{r4, pc}
 800998a:	4623      	mov	r3, r4
 800998c:	e7f2      	b.n	8009974 <strcat+0x4>

0800998e <strcpy>:
 800998e:	4603      	mov	r3, r0
 8009990:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009994:	f803 2b01 	strb.w	r2, [r3], #1
 8009998:	2a00      	cmp	r2, #0
 800999a:	d1f9      	bne.n	8009990 <strcpy+0x2>
 800999c:	4770      	bx	lr
	...

080099a0 <strdup>:
 80099a0:	4b02      	ldr	r3, [pc, #8]	; (80099ac <strdup+0xc>)
 80099a2:	4601      	mov	r1, r0
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	f000 b803 	b.w	80099b0 <_strdup_r>
 80099aa:	bf00      	nop
 80099ac:	20000024 	.word	0x20000024

080099b0 <_strdup_r>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	4606      	mov	r6, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	460c      	mov	r4, r1
 80099b8:	f7f6 fc10 	bl	80001dc <strlen>
 80099bc:	1c45      	adds	r5, r0, #1
 80099be:	4629      	mov	r1, r5
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff ff6b 	bl	800989c <_malloc_r>
 80099c6:	4606      	mov	r6, r0
 80099c8:	b118      	cbz	r0, 80099d2 <_strdup_r+0x22>
 80099ca:	462a      	mov	r2, r5
 80099cc:	4621      	mov	r1, r4
 80099ce:	f000 f802 	bl	80099d6 <memcpy>
 80099d2:	4630      	mov	r0, r6
 80099d4:	bd70      	pop	{r4, r5, r6, pc}

080099d6 <memcpy>:
 80099d6:	b510      	push	{r4, lr}
 80099d8:	1e43      	subs	r3, r0, #1
 80099da:	440a      	add	r2, r1
 80099dc:	4291      	cmp	r1, r2
 80099de:	d100      	bne.n	80099e2 <memcpy+0xc>
 80099e0:	bd10      	pop	{r4, pc}
 80099e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ea:	e7f7      	b.n	80099dc <memcpy+0x6>

080099ec <__malloc_lock>:
 80099ec:	4770      	bx	lr

080099ee <__malloc_unlock>:
 80099ee:	4770      	bx	lr

080099f0 <_init>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr

080099fc <_fini>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr
