
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d0  080083d0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d8  080083d8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080083e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015fc0  20000014  080083f4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015fd4  080083f4  00025fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134c1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000284f  00000000  00000000  00033505  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  00037060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e4c  00000000  00000000  00038240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f443  00000000  00000000  0005a08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd6c9  00000000  00000000  000694cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136b98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  00136c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008358 	.word	0x08008358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08008358 	.word	0x08008358

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <CS43_Start>:

#include "CS43.h"
#include "stm32f4xx_hal.h"

void CS43_Start(I2C_HandleTypeDef* hi2c1)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af04      	add	r7, sp, #16
 80004f2:	6078      	str	r0, [r7, #4]
	uint8_t data[1];
	data[0] = 0x01;
 80004f4:	2301      	movs	r3, #1
 80004f6:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef status;

	//__HAL_UNLOCK(&hi2s3);
	//__HAL_I2S_ENABLE(&hi2s3);

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2110      	movs	r1, #16
 80004fc:	48bb      	ldr	r0, [pc, #748]	; (80007ec <CS43_Start+0x300>)
 80004fe:	f004 fbdd 	bl	8004cbc <HAL_GPIO_WritePin>

	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x02, 1, data, 1, 100)) != HAL_OK);
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	9302      	str	r3, [sp, #8]
 8000506:	2301      	movs	r3, #1
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	2202      	movs	r2, #2
 8000514:	2194      	movs	r1, #148	; 0x94
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f004 fd22 	bl	8004f60 <HAL_I2C_Mem_Write>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1ed      	bne.n	8000502 <CS43_Start+0x16>

	data[0] = 0x99;
 8000526:	2399      	movs	r3, #153	; 0x99
 8000528:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x00, 1, data, 1, 100)) != HAL_OK);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	9302      	str	r3, [sp, #8]
 800052e:	2301      	movs	r3, #1
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2301      	movs	r3, #1
 800053a:	2200      	movs	r2, #0
 800053c:	2194      	movs	r1, #148	; 0x94
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f004 fd0e 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ed      	bne.n	800052a <CS43_Start+0x3e>
	data[0] = 0x99;
 800054e:	2399      	movs	r3, #153	; 0x99
 8000550:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x00, 1, data, 1, 100)) != HAL_OK);
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	2200      	movs	r2, #0
 8000564:	2194      	movs	r1, #148	; 0x94
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f004 fcfa 	bl	8004f60 <HAL_I2C_Mem_Write>
 800056c:	4603      	mov	r3, r0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1ed      	bne.n	8000552 <CS43_Start+0x66>

	data[0]=0x80;
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x47, 1, data, 1, 100)) != HAL_OK);
 800057a:	2364      	movs	r3, #100	; 0x64
 800057c:	9302      	str	r3, [sp, #8]
 800057e:	2301      	movs	r3, #1
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	2247      	movs	r2, #71	; 0x47
 800058c:	2194      	movs	r1, #148	; 0x94
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f004 fce6 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000594:	4603      	mov	r3, r0
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1ed      	bne.n	800057a <CS43_Start+0x8e>

	while ((status = HAL_I2C_Mem_Read(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	2232      	movs	r2, #50	; 0x32
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f004 fdce 	bl	8005154 <HAL_I2C_Mem_Read>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1ed      	bne.n	800059e <CS43_Start+0xb2>
	data[0] |= 0x80;
 80005c2:	7b3b      	ldrb	r3, [r7, #12]
 80005c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	2232      	movs	r2, #50	; 0x32
 80005de:	2194      	movs	r1, #148	; 0x94
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f004 fcbd 	bl	8004f60 <HAL_I2C_Mem_Write>
 80005e6:	4603      	mov	r3, r0
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1ed      	bne.n	80005cc <CS43_Start+0xe0>

	while ((status = HAL_I2C_Mem_Read(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	2232      	movs	r2, #50	; 0x32
 8000602:	2194      	movs	r1, #148	; 0x94
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f004 fda5 	bl	8005154 <HAL_I2C_Mem_Read>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1ed      	bne.n	80005f0 <CS43_Start+0x104>
	data[0] &= ~(0x80);
 8000614:	7b3b      	ldrb	r3, [r7, #12]
 8000616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800061a:	b2db      	uxtb	r3, r3
 800061c:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x32, 1, data, 1, 100)) != HAL_OK);
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	2232      	movs	r2, #50	; 0x32
 8000630:	2194      	movs	r1, #148	; 0x94
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f004 fc94 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1ed      	bne.n	800061e <CS43_Start+0x132>

	data[0] = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x00, 1, data, 1, 100)) != HAL_OK);
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	2200      	movs	r2, #0
 8000658:	2194      	movs	r1, #148	; 0x94
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f004 fc80 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1ed      	bne.n	8000646 <CS43_Start+0x15a>

	data[0] = 0x9E;
 800066a:	239e      	movs	r3, #158	; 0x9e
 800066c:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x02, 1, data, 1, 100)) != HAL_OK);
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2202      	movs	r2, #2
 8000680:	2194      	movs	r1, #148	; 0x94
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f004 fc6c 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1ed      	bne.n	800066e <CS43_Start+0x182>

	data[0] = 175;
 8000692:	23af      	movs	r3, #175	; 0xaf
 8000694:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x04, 1, data, 1, 100)) != HAL_OK);
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	2204      	movs	r2, #4
 80006a8:	2194      	movs	r1, #148	; 0x94
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f004 fc58 	bl	8004f60 <HAL_I2C_Mem_Write>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1ed      	bne.n	8000696 <CS43_Start+0x1aa>

	data[0]=(1<<7);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x05, 1, data, 1, 100)) != HAL_OK);
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	2205      	movs	r2, #5
 80006d0:	2194      	movs	r1, #148	; 0x94
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f004 fc44 	bl	8004f60 <HAL_I2C_Mem_Write>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1ed      	bne.n	80006be <CS43_Start+0x1d2>

	while ((status = HAL_I2C_Mem_Read(hi2c1, 0x94, 0x06, 1, data, 1, 100)) != HAL_OK);
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2206      	movs	r2, #6
 80006f4:	2194      	movs	r1, #148	; 0x94
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f004 fd2c 	bl	8005154 <HAL_I2C_Mem_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1ed      	bne.n	80006e2 <CS43_Start+0x1f6>
	data[0] &= (1 << 5);
 8000706:	7b3b      	ldrb	r3, [r7, #12]
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	b2db      	uxtb	r3, r3
 800070e:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 7);
 8000710:	7b3b      	ldrb	r3, [r7, #12]
 8000712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000716:	b2db      	uxtb	r3, r3
 8000718:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 6);
 800071a:	7b3b      	ldrb	r3, [r7, #12]
 800071c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000720:	b2db      	uxtb	r3, r3
 8000722:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 4);
 8000724:	7b3b      	ldrb	r3, [r7, #12]
 8000726:	f023 0310 	bic.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	733b      	strb	r3, [r7, #12]
	data[0] &= ~(1 << 2);
 800072e:	7b3b      	ldrb	r3, [r7, #12]
 8000730:	f023 0304 	bic.w	r3, r3, #4
 8000734:	b2db      	uxtb	r3, r3
 8000736:	733b      	strb	r3, [r7, #12]
	data[0] |= (1 << 2);
 8000738:	7b3b      	ldrb	r3, [r7, #12]
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	b2db      	uxtb	r3, r3
 8000740:	733b      	strb	r3, [r7, #12]
	data[0] |=  (3 << 0);
 8000742:	7b3b      	ldrb	r3, [r7, #12]
 8000744:	f043 0303 	orr.w	r3, r3, #3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x06, 1, data, 1, 100)) != HAL_OK);
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2206      	movs	r2, #6
 800075e:	2194      	movs	r1, #148	; 0x94
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f004 fbfd 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1ed      	bne.n	800074c <CS43_Start+0x260>

	data[0]=0x02;
 8000770:	2302      	movs	r3, #2
 8000772:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x0E, 1, data, 1, 100)) != HAL_OK);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	220e      	movs	r2, #14
 8000786:	2194      	movs	r1, #148	; 0x94
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f004 fbe9 	bl	8004f60 <HAL_I2C_Mem_Write>
 800078e:	4603      	mov	r3, r0
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1ed      	bne.n	8000774 <CS43_Start+0x288>

	data[0] = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x0e, 1, data, 1, 100)) != HAL_OK);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	220e      	movs	r2, #14
 80007ae:	2194      	movs	r1, #148	; 0x94
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f004 fbd5 	bl	8004f60 <HAL_I2C_Mem_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1ed      	bne.n	800079c <CS43_Start+0x2b0>

	data[0] = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x14, 1, data, 1, 100)) != HAL_OK);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	2214      	movs	r2, #20
 80007d6:	2194      	movs	r1, #148	; 0x94
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f004 fbc1 	bl	8004f60 <HAL_I2C_Mem_Write>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1ed      	bne.n	80007c4 <CS43_Start+0x2d8>
 80007e8:	e002      	b.n	80007f0 <CS43_Start+0x304>
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x15, 1, data, 1, 100)) != HAL_OK);
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	2301      	movs	r3, #1
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	2215      	movs	r2, #21
 8000802:	2194      	movs	r1, #148	; 0x94
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f004 fbab 	bl	8004f60 <HAL_I2C_Mem_Write>
 800080a:	4603      	mov	r3, r0
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1ed      	bne.n	80007f0 <CS43_Start+0x304>
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x1A, 1, data, 1, 100)) != HAL_OK);
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	221a      	movs	r2, #26
 8000826:	2194      	movs	r1, #148	; 0x94
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f004 fb99 	bl	8004f60 <HAL_I2C_Mem_Write>
 800082e:	4603      	mov	r3, r0
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1ed      	bne.n	8000814 <CS43_Start+0x328>
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x1B, 1, data, 1, 100)) != HAL_OK);
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	221b      	movs	r2, #27
 800084a:	2194      	movs	r1, #148	; 0x94
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f004 fb87 	bl	8004f60 <HAL_I2C_Mem_Write>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ed      	bne.n	8000838 <CS43_Start+0x34c>

	data[0]= 0xAF;
 800085c:	23af      	movs	r3, #175	; 0xaf
 800085e:	733b      	strb	r3, [r7, #12]
	while ((status = HAL_I2C_Mem_Write(hi2c1, 0x94, 0x04, 1, data, 1, 100)) != HAL_OK);
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	2301      	movs	r3, #1
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2204      	movs	r2, #4
 8000872:	2194      	movs	r1, #148	; 0x94
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f004 fb73 	bl	8004f60 <HAL_I2C_Mem_Write>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ed      	bne.n	8000860 <CS43_Start+0x374>


}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <DESELECT>:

static
inline void DESELECT(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008b2:	bf00      	nop
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <xmit_spi+0x30>)
 80008b6:	f007 f869 	bl	800798c <HAL_SPI_GetState>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1f9      	bne.n	80008b4 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80008c0:	1df9      	adds	r1, r7, #7
 80008c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c6:	2201      	movs	r2, #1
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <xmit_spi+0x30>)
 80008ca:	f006 fd89 	bl	80073e0 <HAL_SPI_Transmit>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20015d00 	.word	0x20015d00

080008dc <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80008e2:	23ff      	movs	r3, #255	; 0xff
 80008e4:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80008ea:	bf00      	nop
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <rcvr_spi+0x38>)
 80008ee:	f007 f84d 	bl	800798c <HAL_SPI_GetState>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d1f9      	bne.n	80008ec <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 80008f8:	1dba      	adds	r2, r7, #6
 80008fa:	1df9      	adds	r1, r7, #7
 80008fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <rcvr_spi+0x38>)
 8000906:	f006 fe9f 	bl	8007648 <HAL_SPI_TransmitReceive>

	return Data;
 800090a:	79bb      	ldrb	r3, [r7, #6]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20015d00 	.word	0x20015d00

08000918 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000920:	f7ff ffdc 	bl	80008dc <rcvr_spi>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	701a      	strb	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <wait_ready+0x34>)
 800093c:	2232      	movs	r2, #50	; 0x32
 800093e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000940:	f7ff ffcc 	bl	80008dc <rcvr_spi>
	do
		res = rcvr_spi();
 8000944:	f7ff ffca 	bl	80008dc <rcvr_spi>
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2bff      	cmp	r3, #255	; 0xff
 8000950:	d004      	beq.n	800095c <wait_ready+0x28>
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <wait_ready+0x34>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1f3      	bne.n	8000944 <wait_ready+0x10>

	return res;
 800095c:	79fb      	ldrb	r3, [r7, #7]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000031 	.word	0x20000031

0800096c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000972:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000976:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000978:	f7ff ff8f 	bl	800089a <DESELECT>

	for (i = 0; i < 10; i++)
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e005      	b.n	800098e <power_on+0x22>
		xmit_spi(0xFF);
 8000982:	20ff      	movs	r0, #255	; 0xff
 8000984:	f7ff ff90 	bl	80008a8 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	3301      	adds	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	2b09      	cmp	r3, #9
 8000992:	d9f6      	bls.n	8000982 <power_on+0x16>

	SELECT();
 8000994:	f7ff ff7a 	bl	800088c <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80009ac:	2395      	movs	r3, #149	; 0x95
 80009ae:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e00b      	b.n	80009ce <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	4413      	add	r3, r2
 80009be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff70 	bl	80008a8 <xmit_spi>
	for (i = 0; i < 6; i++)
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	3301      	adds	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	d9f0      	bls.n	80009b6 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80009d4:	e002      	b.n	80009dc <power_on+0x70>
		Count--;
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3b01      	subs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80009dc:	f7ff ff7e 	bl	80008dc <rcvr_spi>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d002      	beq.n	80009ec <power_on+0x80>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f4      	bne.n	80009d6 <power_on+0x6a>

	DESELECT();
 80009ec:	f7ff ff55 	bl	800089a <DESELECT>
	xmit_spi(0XFF);
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	f7ff ff59 	bl	80008a8 <xmit_spi>

	PowerFlag = 1;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <power_on+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000033 	.word	0x20000033

08000a08 <power_off>:

static
void power_off(void) {
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <power_off+0x14>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000033 	.word	0x20000033

08000a20 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <chk_power+0x14>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000033 	.word	0x20000033

08000a38 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <rcvr_datablock+0x68>)
 8000a44:	220a      	movs	r2, #10
 8000a46:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000a48:	f7ff ff48 	bl	80008dc <rcvr_spi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2bff      	cmp	r3, #255	; 0xff
 8000a54:	d104      	bne.n	8000a60 <rcvr_datablock+0x28>
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <rcvr_datablock+0x68>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1f3      	bne.n	8000a48 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2bfe      	cmp	r3, #254	; 0xfe
 8000a64:	d001      	beq.n	8000a6a <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000a66:	2300      	movs	r3, #0
 8000a68:	e016      	b.n	8000a98 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff51 	bl	8000918 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff4b 	bl	8000918 <rcvr_spi_m>
	} while (btr -= 2);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	3b02      	subs	r3, #2
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1ed      	bne.n	8000a6a <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000a8e:	f7ff ff25 	bl	80008dc <rcvr_spi>
	rcvr_spi();
 8000a92:	f7ff ff23 	bl	80008dc <rcvr_spi>

	return TRUE; /* Return with success */
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000030 	.word	0x20000030

08000aa4 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000ab4:	f7ff ff3e 	bl	8000934 <wait_ready>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d001      	beq.n	8000ac2 <xmit_datablock+0x1e>
		return FALSE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e040      	b.n	8000b44 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff feef 	bl	80008a8 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	2bfd      	cmp	r3, #253	; 0xfd
 8000ace:	d031      	beq.n	8000b34 <xmit_datablock+0x90>
		wc = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fee3 	bl	80008a8 <xmit_spi>
			xmit_spi(*buff++);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fedc 	bl	80008a8 <xmit_spi>
		} while (--wc);
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	73bb      	strb	r3, [r7, #14]
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1eb      	bne.n	8000ad4 <xmit_datablock+0x30>

		rcvr_spi();
 8000afc:	f7ff feee 	bl	80008dc <rcvr_spi>
		rcvr_spi();
 8000b00:	f7ff feec 	bl	80008dc <rcvr_spi>

		while (i <= 64) {
 8000b04:	e00b      	b.n	8000b1e <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000b06:	f7ff fee9 	bl	80008dc <rcvr_spi>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d006      	beq.n	8000b26 <xmit_datablock+0x82>
				break;
			i++;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	2b40      	cmp	r3, #64	; 0x40
 8000b22:	d9f0      	bls.n	8000b06 <xmit_datablock+0x62>
 8000b24:	e000      	b.n	8000b28 <xmit_datablock+0x84>
				break;
 8000b26:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000b28:	bf00      	nop
 8000b2a:	f7ff fed7 	bl	80008dc <rcvr_spi>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0fa      	beq.n	8000b2a <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	f003 031f 	and.w	r3, r3, #31
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d101      	bne.n	8000b42 <xmit_datablock+0x9e>
		return TRUE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <xmit_datablock+0xa0>
	else
		return FALSE;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000b58:	f7ff feec 	bl	8000934 <wait_ready>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2bff      	cmp	r3, #255	; 0xff
 8000b60:	d001      	beq.n	8000b66 <send_cmd+0x1a>
		return 0xFF;
 8000b62:	23ff      	movs	r3, #255	; 0xff
 8000b64:	e040      	b.n	8000be8 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe9d 	bl	80008a8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	0e1b      	lsrs	r3, r3, #24
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe97 	bl	80008a8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	0c1b      	lsrs	r3, r3, #16
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe91 	bl	80008a8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe8b 	bl	80008a8 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe86 	bl	80008a8 <xmit_spi>
	n = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b40      	cmp	r3, #64	; 0x40
 8000ba4:	d101      	bne.n	8000baa <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000ba6:	2395      	movs	r3, #149	; 0x95
 8000ba8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b48      	cmp	r3, #72	; 0x48
 8000bae:	d101      	bne.n	8000bb4 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000bb0:	2387      	movs	r3, #135	; 0x87
 8000bb2:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe76 	bl	80008a8 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b4c      	cmp	r3, #76	; 0x4c
 8000bc0:	d101      	bne.n	8000bc6 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000bc2:	f7ff fe8b 	bl	80008dc <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000bca:	f7ff fe87 	bl	80008dc <rcvr_spi>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da05      	bge.n	8000be6 <send_cmd+0x9a>
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f1      	bne.n	8000bca <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000c00:	2301      	movs	r3, #1
 8000c02:	e0d5      	b.n	8000db0 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000c04:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <disk_initialize+0x1c8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8000c12:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <disk_initialize+0x1c8>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	e0ca      	b.n	8000db0 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000c1a:	f7ff fea7 	bl	800096c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8000c1e:	f7ff fe35 	bl	800088c <SELECT>
	ty = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000c26:	2100      	movs	r1, #0
 8000c28:	2040      	movs	r0, #64	; 0x40
 8000c2a:	f7ff ff8f 	bl	8000b4c <send_cmd>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	f040 80a5 	bne.w	8000d80 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000c36:	4b61      	ldr	r3, [pc, #388]	; (8000dbc <disk_initialize+0x1cc>)
 8000c38:	2264      	movs	r2, #100	; 0x64
 8000c3a:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000c3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c40:	2048      	movs	r0, #72	; 0x48
 8000c42:	f7ff ff83 	bl	8000b4c <send_cmd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d158      	bne.n	8000cfe <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e00c      	b.n	8000c6c <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8000c52:	7bfc      	ldrb	r4, [r7, #15]
 8000c54:	f7ff fe42 	bl	80008dc <rcvr_spi>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4423      	add	r3, r4
 8000c62:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d9ef      	bls.n	8000c52 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8000c72:	7abb      	ldrb	r3, [r7, #10]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	f040 8083 	bne.w	8000d80 <disk_initialize+0x190>
 8000c7a:	7afb      	ldrb	r3, [r7, #11]
 8000c7c:	2baa      	cmp	r3, #170	; 0xaa
 8000c7e:	d17f      	bne.n	8000d80 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8000c80:	2100      	movs	r1, #0
 8000c82:	2077      	movs	r0, #119	; 0x77
 8000c84:	f7ff ff62 	bl	8000b4c <send_cmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d807      	bhi.n	8000c9e <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8000c8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c92:	2069      	movs	r0, #105	; 0x69
 8000c94:	f7ff ff5a 	bl	8000b4c <send_cmd>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <disk_initialize+0x1cc>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1eb      	bne.n	8000c80 <disk_initialize+0x90>
 8000ca8:	e000      	b.n	8000cac <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8000caa:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <disk_initialize+0x1cc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d064      	beq.n	8000d80 <disk_initialize+0x190>
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	207a      	movs	r0, #122	; 0x7a
 8000cba:	f7ff ff47 	bl	8000b4c <send_cmd>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d15d      	bne.n	8000d80 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e00c      	b.n	8000ce4 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000cca:	7bfc      	ldrb	r4, [r7, #15]
 8000ccc:	f7ff fe06 	bl	80008dc <rcvr_spi>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4423      	add	r3, r4
 8000cda:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d9ef      	bls.n	8000cca <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000cea:	7a3b      	ldrb	r3, [r7, #8]
 8000cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <disk_initialize+0x108>
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	e000      	b.n	8000cfa <disk_initialize+0x10a>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	73bb      	strb	r3, [r7, #14]
 8000cfc:	e040      	b.n	8000d80 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2077      	movs	r0, #119	; 0x77
 8000d02:	f7ff ff23 	bl	8000b4c <send_cmd>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d808      	bhi.n	8000d1e <disk_initialize+0x12e>
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2069      	movs	r0, #105	; 0x69
 8000d10:	f7ff ff1c 	bl	8000b4c <send_cmd>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d801      	bhi.n	8000d1e <disk_initialize+0x12e>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e000      	b.n	8000d20 <disk_initialize+0x130>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8000d22:	7bbb      	ldrb	r3, [r7, #14]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d10e      	bne.n	8000d46 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2077      	movs	r0, #119	; 0x77
 8000d2c:	f7ff ff0e 	bl	8000b4c <send_cmd>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d80e      	bhi.n	8000d54 <disk_initialize+0x164>
 8000d36:	2100      	movs	r1, #0
 8000d38:	2069      	movs	r0, #105	; 0x69
 8000d3a:	f7ff ff07 	bl	8000b4c <send_cmd>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d107      	bne.n	8000d54 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000d44:	e00d      	b.n	8000d62 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000d46:	2100      	movs	r1, #0
 8000d48:	2041      	movs	r0, #65	; 0x41
 8000d4a:	f7ff feff 	bl	8000b4c <send_cmd>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <disk_initialize+0x1cc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1e1      	bne.n	8000d22 <disk_initialize+0x132>
 8000d5e:	e000      	b.n	8000d62 <disk_initialize+0x172>
						break; /* CMD1 */
 8000d60:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <disk_initialize+0x1cc>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d007      	beq.n	8000d7c <disk_initialize+0x18c>
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	2050      	movs	r0, #80	; 0x50
 8000d72:	f7ff feeb 	bl	8000b4c <send_cmd>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <disk_initialize+0x190>
				ty = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <disk_initialize+0x1d0>)
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8000d86:	f7ff fd88 	bl	800089a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000d8a:	f7ff fda7 	bl	80008dc <rcvr_spi>

	if (ty) /* Initialization succeded */
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <disk_initialize+0x1c8>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <disk_initialize+0x1c8>)
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e001      	b.n	8000daa <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8000da6:	f7ff fe2f 	bl	8000a08 <power_off>

	return Stat;
 8000daa:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <disk_initialize+0x1c8>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000030 	.word	0x20000030
 8000dc0:	20000032 	.word	0x20000032

08000dc4 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e002      	b.n	8000dde <disk_status+0x1a>
	return Stat;
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <disk_status+0x28>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000000 	.word	0x20000000

08000df0 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <disk_read+0x1c>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <disk_read+0x20>
		return RES_PARERR;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e051      	b.n	8000eb4 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <disk_read+0xcc>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <disk_read+0x32>
		return RES_NOTRDY;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e048      	b.n	8000eb4 <disk_read+0xc4>

	if (!(CardType & 4))
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <disk_read+0xd0>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	025b      	lsls	r3, r3, #9
 8000e32:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000e34:	f7ff fd2a 	bl	800088c <SELECT>

	if (count == 1) { /* Single block read */
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d111      	bne.n	8000e62 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	2051      	movs	r0, #81	; 0x51
 8000e42:	f7ff fe83 	bl	8000b4c <send_cmd>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d129      	bne.n	8000ea0 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e50:	68b8      	ldr	r0, [r7, #8]
 8000e52:	f7ff fdf1 	bl	8000a38 <rcvr_datablock>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d021      	beq.n	8000ea0 <disk_read+0xb0>
			count = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	e01e      	b.n	8000ea0 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	2052      	movs	r0, #82	; 0x52
 8000e66:	f7ff fe71 	bl	8000b4c <send_cmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d117      	bne.n	8000ea0 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e74:	68b8      	ldr	r0, [r7, #8]
 8000e76:	f7ff fddf 	bl	8000a38 <rcvr_datablock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00a      	beq.n	8000e96 <disk_read+0xa6>
					break;
				buff += 512;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e86:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1ed      	bne.n	8000e70 <disk_read+0x80>
 8000e94:	e000      	b.n	8000e98 <disk_read+0xa8>
					break;
 8000e96:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000e98:	2100      	movs	r1, #0
 8000e9a:	204c      	movs	r0, #76	; 0x4c
 8000e9c:	f7ff fe56 	bl	8000b4c <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000ea0:	f7ff fcfb 	bl	800089a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000ea4:	f7ff fd1a 	bl	80008dc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf14      	ite	ne
 8000eae:	2301      	movne	r3, #1
 8000eb0:	2300      	moveq	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000032 	.word	0x20000032

08000ec4 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <disk_write+0x1c>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <disk_write+0x20>
		return RES_PARERR;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	e06b      	b.n	8000fbc <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000ee4:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <disk_write+0x100>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <disk_write+0x32>
		return RES_NOTRDY;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e062      	b.n	8000fbc <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <disk_write+0x100>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <disk_write+0x44>
		return RES_WRPRT;
 8000f04:	2302      	movs	r3, #2
 8000f06:	e059      	b.n	8000fbc <disk_write+0xf8>

	if (!(CardType & 4))
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <disk_write+0x104>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	025b      	lsls	r3, r3, #9
 8000f18:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000f1a:	f7ff fcb7 	bl	800088c <SELECT>

	if (count == 1) { /* Single block write */
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d110      	bne.n	8000f46 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	2058      	movs	r0, #88	; 0x58
 8000f28:	f7ff fe10 	bl	8000b4c <send_cmd>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d13a      	bne.n	8000fa8 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000f32:	21fe      	movs	r1, #254	; 0xfe
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff fdb5 	bl	8000aa4 <xmit_datablock>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d033      	beq.n	8000fa8 <disk_write+0xe4>
			count = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	e030      	b.n	8000fa8 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <disk_write+0x104>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2077      	movs	r0, #119	; 0x77
 8000f56:	f7ff fdf9 	bl	8000b4c <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	2057      	movs	r0, #87	; 0x57
 8000f5e:	f7ff fdf5 	bl	8000b4c <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	2059      	movs	r0, #89	; 0x59
 8000f66:	f7ff fdf1 	bl	8000b4c <send_cmd>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11b      	bne.n	8000fa8 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000f70:	21fc      	movs	r1, #252	; 0xfc
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f7ff fd96 	bl	8000aa4 <xmit_datablock>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00a      	beq.n	8000f94 <disk_write+0xd0>
					break;
				buff += 512;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f84:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1ee      	bne.n	8000f70 <disk_write+0xac>
 8000f92:	e000      	b.n	8000f96 <disk_write+0xd2>
					break;
 8000f94:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000f96:	21fd      	movs	r1, #253	; 0xfd
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fd83 	bl	8000aa4 <xmit_datablock>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <disk_write+0xe4>
				count = 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000fa8:	f7ff fc77 	bl	800089a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000fac:	f7ff fc96 	bl	80008dc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000032 	.word	0x20000032

08000fcc <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b08b      	sub	sp, #44	; 0x2c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	603a      	str	r2, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <disk_ioctl+0x1e>
		return RES_PARERR;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e16a      	b.n	80012c0 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	d127      	bne.n	8001046 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00e      	beq.n	800101c <disk_ioctl+0x50>
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d012      	beq.n	8001028 <disk_ioctl+0x5c>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d11b      	bne.n	800103e <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8001006:	f7ff fd0b 	bl	8000a20 <chk_power>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001010:	f7ff fcfa 	bl	8000a08 <power_off>
			res = RES_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800101a:	e14f      	b.n	80012bc <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 800101c:	f7ff fca6 	bl	800096c <power_on>
			res = RES_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001026:	e149      	b.n	80012bc <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001028:	f7ff fcfa 	bl	8000a20 <chk_power>
 800102c:	4602      	mov	r2, r0
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	3301      	adds	r3, #1
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800103c:	e13e      	b.n	80012bc <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 800103e:	2304      	movs	r3, #4
 8001040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001044:	e13a      	b.n	80012bc <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8001046:	4ba0      	ldr	r3, [pc, #640]	; (80012c8 <disk_ioctl+0x2fc>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001054:	2303      	movs	r3, #3
 8001056:	e133      	b.n	80012c0 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001058:	f7ff fc18 	bl	800088c <SELECT>

		switch (ctrl) {
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b35      	cmp	r3, #53	; 0x35
 8001060:	f200 811d 	bhi.w	800129e <disk_ioctl+0x2d2>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <disk_ioctl+0xa0>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	08001207 	.word	0x08001207
 8001070:	08001145 	.word	0x08001145
 8001074:	080011f7 	.word	0x080011f7
 8001078:	0800129f 	.word	0x0800129f
 800107c:	0800129f 	.word	0x0800129f
 8001080:	0800129f 	.word	0x0800129f
 8001084:	0800129f 	.word	0x0800129f
 8001088:	0800129f 	.word	0x0800129f
 800108c:	0800129f 	.word	0x0800129f
 8001090:	0800129f 	.word	0x0800129f
 8001094:	0800129f 	.word	0x0800129f
 8001098:	0800129f 	.word	0x0800129f
 800109c:	0800129f 	.word	0x0800129f
 80010a0:	0800129f 	.word	0x0800129f
 80010a4:	0800129f 	.word	0x0800129f
 80010a8:	0800129f 	.word	0x0800129f
 80010ac:	0800129f 	.word	0x0800129f
 80010b0:	0800129f 	.word	0x0800129f
 80010b4:	0800129f 	.word	0x0800129f
 80010b8:	0800129f 	.word	0x0800129f
 80010bc:	0800129f 	.word	0x0800129f
 80010c0:	0800129f 	.word	0x0800129f
 80010c4:	0800129f 	.word	0x0800129f
 80010c8:	0800129f 	.word	0x0800129f
 80010cc:	0800129f 	.word	0x0800129f
 80010d0:	0800129f 	.word	0x0800129f
 80010d4:	0800129f 	.word	0x0800129f
 80010d8:	0800129f 	.word	0x0800129f
 80010dc:	0800129f 	.word	0x0800129f
 80010e0:	0800129f 	.word	0x0800129f
 80010e4:	0800129f 	.word	0x0800129f
 80010e8:	0800129f 	.word	0x0800129f
 80010ec:	0800129f 	.word	0x0800129f
 80010f0:	0800129f 	.word	0x0800129f
 80010f4:	0800129f 	.word	0x0800129f
 80010f8:	0800129f 	.word	0x0800129f
 80010fc:	0800129f 	.word	0x0800129f
 8001100:	0800129f 	.word	0x0800129f
 8001104:	0800129f 	.word	0x0800129f
 8001108:	0800129f 	.word	0x0800129f
 800110c:	0800129f 	.word	0x0800129f
 8001110:	0800129f 	.word	0x0800129f
 8001114:	0800129f 	.word	0x0800129f
 8001118:	0800129f 	.word	0x0800129f
 800111c:	0800129f 	.word	0x0800129f
 8001120:	0800129f 	.word	0x0800129f
 8001124:	0800129f 	.word	0x0800129f
 8001128:	0800129f 	.word	0x0800129f
 800112c:	0800129f 	.word	0x0800129f
 8001130:	0800129f 	.word	0x0800129f
 8001134:	0800129f 	.word	0x0800129f
 8001138:	08001219 	.word	0x08001219
 800113c:	0800123d 	.word	0x0800123d
 8001140:	08001261 	.word	0x08001261
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001144:	2100      	movs	r1, #0
 8001146:	2049      	movs	r0, #73	; 0x49
 8001148:	f7ff fd00 	bl	8000b4c <send_cmd>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80a9 	bne.w	80012a6 <disk_ioctl+0x2da>
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2110      	movs	r1, #16
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fc6c 	bl	8000a38 <rcvr_datablock>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 809f 	beq.w	80012a6 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	099b      	lsrs	r3, r3, #6
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10e      	bne.n	8001190 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001172:	7d7b      	ldrb	r3, [r7, #21]
 8001174:	b29a      	uxth	r2, r3
 8001176:	7d3b      	ldrb	r3, [r7, #20]
 8001178:	b29b      	uxth	r3, r3
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b29b      	uxth	r3, r3
 8001182:	3301      	adds	r3, #1
 8001184:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001186:	8bfb      	ldrh	r3, [r7, #30]
 8001188:	029a      	lsls	r2, r3, #10
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e02e      	b.n	80011ee <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	b2da      	uxtb	r2, r3
 8001198:	7dbb      	ldrb	r3, [r7, #22]
 800119a:	09db      	lsrs	r3, r3, #7
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4413      	add	r3, r2
 80011a0:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80011a2:	7d7b      	ldrb	r3, [r7, #21]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0306 	and.w	r3, r3, #6
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80011b2:	3302      	adds	r3, #2
 80011b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80011b8:	7d3b      	ldrb	r3, [r7, #20]
 80011ba:	099b      	lsrs	r3, r3, #6
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b29a      	uxth	r2, r3
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80011cc:	7cbb      	ldrb	r3, [r7, #18]
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4413      	add	r3, r2
 80011da:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80011dc:	3301      	adds	r3, #1
 80011de:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011e0:	8bfa      	ldrh	r2, [r7, #30]
 80011e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e6:	3b09      	subs	r3, #9
 80011e8:	409a      	lsls	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80011f4:	e057      	b.n	80012a6 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001204:	e056      	b.n	80012b4 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8001206:	f7ff fb95 	bl	8000934 <wait_ready>
 800120a:	4603      	mov	r3, r0
 800120c:	2bff      	cmp	r3, #255	; 0xff
 800120e:	d14c      	bne.n	80012aa <disk_ioctl+0x2de>
				res = RES_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001216:	e048      	b.n	80012aa <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001218:	2100      	movs	r1, #0
 800121a:	2049      	movs	r0, #73	; 0x49
 800121c:	f7ff fc96 	bl	8000b4c <send_cmd>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d143      	bne.n	80012ae <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8001226:	2110      	movs	r1, #16
 8001228:	6a38      	ldr	r0, [r7, #32]
 800122a:	f7ff fc05 	bl	8000a38 <rcvr_datablock>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d03c      	beq.n	80012ae <disk_ioctl+0x2e2>
				res = RES_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800123a:	e038      	b.n	80012ae <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 800123c:	2100      	movs	r1, #0
 800123e:	204a      	movs	r0, #74	; 0x4a
 8001240:	f7ff fc84 	bl	8000b4c <send_cmd>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d133      	bne.n	80012b2 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 800124a:	2110      	movs	r1, #16
 800124c:	6a38      	ldr	r0, [r7, #32]
 800124e:	f7ff fbf3 	bl	8000a38 <rcvr_datablock>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d02c      	beq.n	80012b2 <disk_ioctl+0x2e6>
				res = RES_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800125e:	e028      	b.n	80012b2 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001260:	2100      	movs	r1, #0
 8001262:	207a      	movs	r0, #122	; 0x7a
 8001264:	f7ff fc72 	bl	8000b4c <send_cmd>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d117      	bne.n	800129e <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001274:	e00b      	b.n	800128e <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8001276:	6a3c      	ldr	r4, [r7, #32]
 8001278:	1c63      	adds	r3, r4, #1
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	f7ff fb2e 	bl	80008dc <rcvr_spi>
 8001280:	4603      	mov	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001284:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001288:	3301      	adds	r3, #1
 800128a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800128e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001292:	2b03      	cmp	r3, #3
 8001294:	d9ef      	bls.n	8001276 <disk_ioctl+0x2aa>
				res = RES_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800129c:	e00a      	b.n	80012b4 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 800129e:	2304      	movs	r3, #4
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012a4:	e006      	b.n	80012b4 <disk_ioctl+0x2e8>
			break;
 80012a6:	bf00      	nop
 80012a8:	e004      	b.n	80012b4 <disk_ioctl+0x2e8>
			break;
 80012aa:	bf00      	nop
 80012ac:	e002      	b.n	80012b4 <disk_ioctl+0x2e8>
			break;
 80012ae:	bf00      	nop
 80012b0:	e000      	b.n	80012b4 <disk_ioctl+0x2e8>
			break;
 80012b2:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80012b4:	f7ff faf1 	bl	800089a <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80012b8:	f7ff fb10 	bl	80008dc <rcvr_spi>
	}

	return res;
 80012bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	372c      	adds	r7, #44	; 0x2c
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	20000000 	.word	0x20000000

080012cc <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	36c55cc0 	.word	0x36c55cc0

080012e0 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001302:	89fb      	ldrh	r3, [r7, #14]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3303      	adds	r3, #3
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	3202      	adds	r2, #2
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	3201      	adds	r2, #1
 8001336:	7812      	ldrb	r2, [r2, #0]
 8001338:	4313      	orrs	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
	return rv;
 8001348:	68fb      	ldr	r3, [r7, #12]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	887a      	ldrh	r2, [r7, #2]
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	701a      	strb	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00d      	beq.n	800141a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	1c53      	adds	r3, r2, #1
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	1c59      	adds	r1, r3, #1
 8001408:	6179      	str	r1, [r7, #20]
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3b01      	subs	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f1      	bne.n	80013fe <mem_cpy+0x1a>
	}
}
 800141a:	bf00      	nop
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001426:	b480      	push	{r7}
 8001428:	b087      	sub	sp, #28
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	617a      	str	r2, [r7, #20]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3b01      	subs	r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f3      	bne.n	8001436 <mem_set+0x10>
}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800145a:	b480      	push	{r7}
 800145c:	b089      	sub	sp, #36	; 0x24
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	61fa      	str	r2, [r7, #28]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	61ba      	str	r2, [r7, #24]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1acb      	subs	r3, r1, r3
 8001486:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <mem_cmp+0x40>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0eb      	beq.n	8001472 <mem_cmp+0x18>

	return r;
 800149a:	697b      	ldr	r3, [r7, #20]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3724      	adds	r7, #36	; 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80014b2:	e002      	b.n	80014ba <chk_chr+0x12>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <chk_chr+0x26>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d1f2      	bne.n	80014b4 <chk_chr+0xc>
	return *str;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	781b      	ldrb	r3, [r3, #0]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80014e8:	2281      	movs	r2, #129	; 0x81
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d30f      	bcc.n	8001510 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80014f0:	229f      	movs	r2, #159	; 0x9f
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d801      	bhi.n	80014fc <dbc_1st+0x1e>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e00a      	b.n	8001512 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80014fc:	22e0      	movs	r2, #224	; 0xe0
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4293      	cmp	r3, r2
 8001502:	d305      	bcc.n	8001510 <dbc_1st+0x32>
 8001504:	22fc      	movs	r2, #252	; 0xfc
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4293      	cmp	r3, r2
 800150a:	d801      	bhi.n	8001510 <dbc_1st+0x32>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4293      	cmp	r3, r2
 800152e:	d319      	bcc.n	8001564 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001530:	227e      	movs	r2, #126	; 0x7e
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4293      	cmp	r3, r2
 8001536:	d801      	bhi.n	800153c <dbc_2nd+0x1e>
 8001538:	2301      	movs	r3, #1
 800153a:	e014      	b.n	8001566 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4293      	cmp	r3, r2
 8001542:	d305      	bcc.n	8001550 <dbc_2nd+0x32>
 8001544:	22fc      	movs	r2, #252	; 0xfc
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4293      	cmp	r3, r2
 800154a:	d801      	bhi.n	8001550 <dbc_2nd+0x32>
 800154c:	2301      	movs	r3, #1
 800154e:	e00a      	b.n	8001566 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001550:	2200      	movs	r2, #0
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4293      	cmp	r3, r2
 8001556:	d305      	bcc.n	8001564 <dbc_2nd+0x46>
 8001558:	2200      	movs	r2, #0
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4293      	cmp	r3, r2
 800155e:	d801      	bhi.n	8001564 <dbc_2nd+0x46>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	78db      	ldrb	r3, [r3, #3]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d02c      	beq.n	80015e0 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7858      	ldrb	r0, [r3, #1]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001594:	2301      	movs	r3, #1
 8001596:	f7ff fc95 	bl	8000ec4 <disk_write>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d11d      	bne.n	80015dc <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	1ad2      	subs	r2, r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d213      	bcs.n	80015e0 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d10f      	bne.n	80015e0 <sync_window+0x6e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7858      	ldrb	r0, [r3, #1]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	441a      	add	r2, r3
 80015d4:	2301      	movs	r3, #1
 80015d6:	f7ff fc75 	bl	8000ec4 <disk_write>
 80015da:	e001      	b.n	80015e0 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d01b      	beq.n	800163a <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffb5 	bl	8001572 <sync_window>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d113      	bne.n	800163a <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7858      	ldrb	r0, [r3, #1]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800161c:	2301      	movs	r3, #1
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	f7ff fbe6 	bl	8000df0 <disk_read>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff90 	bl	8001572 <sync_window>
 8001652:	4603      	mov	r3, r0
 8001654:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d158      	bne.n	800170e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d148      	bne.n	80016f6 <sync_fs+0xb2>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	791b      	ldrb	r3, [r3, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d144      	bne.n	80016f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3330      	adds	r3, #48	; 0x30
 8001670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fed5 	bl	8001426 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3330      	adds	r3, #48	; 0x30
 8001680:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001684:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe64 	bl	8001356 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3330      	adds	r3, #48	; 0x30
 8001692:	4921      	ldr	r1, [pc, #132]	; (8001718 <sync_fs+0xd4>)
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fe79 	bl	800138c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3330      	adds	r3, #48	; 0x30
 800169e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80016a2:	491e      	ldr	r1, [pc, #120]	; (800171c <sync_fs+0xd8>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fe71 	bl	800138c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3330      	adds	r3, #48	; 0x30
 80016ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fe67 	bl	800138c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3330      	adds	r3, #48	; 0x30
 80016c2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f7ff fe5d 	bl	800138c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7858      	ldrb	r0, [r3, #1]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ea:	2301      	movs	r3, #1
 80016ec:	f7ff fbea 	bl	8000ec4 <disk_write>
			fs->fsi_flag = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	785b      	ldrb	r3, [r3, #1]
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fc64 	bl	8000fcc <disk_ioctl>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <sync_fs+0xca>
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	41615252 	.word	0x41615252
 800171c:	61417272 	.word	0x61417272

08001720 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3b02      	subs	r3, #2
 800172e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	3b02      	subs	r3, #2
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d301      	bcc.n	8001740 <clst2sect+0x20>
 800173c:	2300      	movs	r3, #0
 800173e:	e008      	b.n	8001752 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	895b      	ldrh	r3, [r3, #10]
 8001748:	4619      	mov	r1, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	fb03 f301 	mul.w	r3, r3, r1
 8001750:	4413      	add	r3, r2
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d904      	bls.n	800177e <get_fat+0x20>
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <get_fat+0x26>
		val = 1;	/* Internal error */
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e08c      	b.n	800189e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d045      	beq.n	800181e <get_fat+0xc0>
 8001792:	2b03      	cmp	r3, #3
 8001794:	d05d      	beq.n	8001852 <get_fat+0xf4>
 8001796:	2b01      	cmp	r3, #1
 8001798:	d177      	bne.n	800188a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6a1a      	ldr	r2, [r3, #32]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	0a5b      	lsrs	r3, r3, #9
 80017b0:	4413      	add	r3, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	6938      	ldr	r0, [r7, #16]
 80017b6:	f7ff ff18 	bl	80015ea <move_window>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d167      	bne.n	8001890 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4413      	add	r3, r2
 80017ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017d2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	0a5b      	lsrs	r3, r3, #9
 80017dc:	4413      	add	r3, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	6938      	ldr	r0, [r7, #16]
 80017e2:	f7ff ff02 	bl	80015ea <move_window>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d153      	bne.n	8001894 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4413      	add	r3, r2
 80017f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4313      	orrs	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <get_fat+0xb6>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	e002      	b.n	800181a <get_fat+0xbc>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181a:	617b      	str	r3, [r7, #20]
			break;
 800181c:	e03f      	b.n	800189e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	6a1a      	ldr	r2, [r3, #32]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	4413      	add	r3, r2
 8001828:	4619      	mov	r1, r3
 800182a:	6938      	ldr	r0, [r7, #16]
 800182c:	f7ff fedd 	bl	80015ea <move_window>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d130      	bne.n	8001898 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001844:	4413      	add	r3, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fd4a 	bl	80012e0 <ld_word>
 800184c:	4603      	mov	r3, r0
 800184e:	617b      	str	r3, [r7, #20]
			break;
 8001850:	e025      	b.n	800189e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	09db      	lsrs	r3, r3, #7
 800185a:	4413      	add	r3, r2
 800185c:	4619      	mov	r1, r3
 800185e:	6938      	ldr	r0, [r7, #16]
 8001860:	f7ff fec3 	bl	80015ea <move_window>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d118      	bne.n	800189c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001878:	4413      	add	r3, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fd48 	bl	8001310 <ld_dword>
 8001880:	4603      	mov	r3, r0
 8001882:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001886:	617b      	str	r3, [r7, #20]
			break;
 8001888:	e009      	b.n	800189e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e006      	b.n	800189e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001890:	bf00      	nop
 8001892:	e004      	b.n	800189e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001894:	bf00      	nop
 8001896:	e002      	b.n	800189e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001898:	bf00      	nop
 800189a:	e000      	b.n	800189e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800189c:	bf00      	nop
		}
	}

	return val;
 800189e:	697b      	ldr	r3, [r7, #20]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80018b4:	2302      	movs	r3, #2
 80018b6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	f240 80d6 	bls.w	8001a6c <put_fat+0x1c4>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	f080 80d0 	bcs.w	8001a6c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d073      	beq.n	80019bc <put_fat+0x114>
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	f000 8091 	beq.w	80019fc <put_fat+0x154>
 80018da:	2b01      	cmp	r3, #1
 80018dc:	f040 80c6 	bne.w	8001a6c <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4413      	add	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	0a5b      	lsrs	r3, r3, #9
 80018f6:	4413      	add	r3, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7ff fe75 	bl	80015ea <move_window>
 8001900:	4603      	mov	r3, r0
 8001902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80a9 	bne.w	8001a5e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	61b9      	str	r1, [r7, #24]
 8001918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800191c:	4413      	add	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00d      	beq.n	8001946 <put_fat+0x9e>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	b25a      	sxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	b25b      	sxtb	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	e001      	b.n	800194a <put_fat+0xa2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a1a      	ldr	r2, [r3, #32]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	4413      	add	r3, r2
 800195e:	4619      	mov	r1, r3
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff fe42 	bl	80015ea <move_window>
 8001966:	4603      	mov	r3, r0
 8001968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d178      	bne.n	8001a62 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <put_fat+0xea>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	b2db      	uxtb	r3, r3
 8001990:	e00e      	b.n	80019b0 <put_fat+0x108>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b25b      	sxtb	r3, r3
 8001998:	f023 030f 	bic.w	r3, r3, #15
 800199c:	b25a      	sxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	70da      	strb	r2, [r3, #3]
			break;
 80019ba:	e057      	b.n	8001a6c <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	4413      	add	r3, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fe0e 	bl	80015ea <move_window>
 80019ce:	4603      	mov	r3, r0
 80019d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d146      	bne.n	8001a66 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80019e6:	4413      	add	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	b292      	uxth	r2, r2
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fcb1 	bl	8001356 <st_word>
			fs->wflag = 1;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	70da      	strb	r2, [r3, #3]
			break;
 80019fa:	e037      	b.n	8001a6c <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	09db      	lsrs	r3, r3, #7
 8001a04:	4413      	add	r3, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fdee 	bl	80015ea <move_window>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d128      	bne.n	8001a6a <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc6e 	bl	8001310 <ld_dword>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001a4c:	4413      	add	r3, r2
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fc9b 	bl	800138c <st_dword>
			fs->wflag = 1;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	70da      	strb	r2, [r3, #3]
			break;
 8001a5c:	e006      	b.n	8001a6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001a5e:	bf00      	nop
 8001a60:	e004      	b.n	8001a6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001a62:	bf00      	nop
 8001a64:	e002      	b.n	8001a6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001a6a:	bf00      	nop
		}
	}
	return res;
 8001a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}

08001a76 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b088      	sub	sp, #32
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d904      	bls.n	8001a9c <remove_chain+0x26>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d301      	bcc.n	8001aa0 <remove_chain+0x2a>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e04b      	b.n	8001b38 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00c      	beq.n	8001ac0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	69b8      	ldr	r0, [r7, #24]
 8001aae:	f7ff fefb 	bl	80018a8 <put_fat>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <remove_chain+0x4a>
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
 8001abe:	e03b      	b.n	8001b38 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f7ff fe4b 	bl	800175e <get_fat>
 8001ac8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d031      	beq.n	8001b34 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <remove_chain+0x64>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e02e      	b.n	8001b38 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d101      	bne.n	8001ae6 <remove_chain+0x70>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e028      	b.n	8001b38 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	69b8      	ldr	r0, [r7, #24]
 8001aec:	f7ff fedc 	bl	80018a8 <put_fat>
 8001af0:	4603      	mov	r3, r0
 8001af2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001af4:	7ffb      	ldrb	r3, [r7, #31]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <remove_chain+0x88>
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	e01c      	b.n	8001b38 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	3b02      	subs	r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d20b      	bcs.n	8001b24 <remove_chain+0xae>
			fs->free_clst++;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3c6      	bcc.n	8001ac0 <remove_chain+0x4a>
 8001b32:	e000      	b.n	8001b36 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001b34:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <create_chain+0x2c>
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d31b      	bcc.n	8001ba4 <create_chain+0x64>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	e018      	b.n	8001ba4 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fdf2 	bl	800175e <get_fat>
 8001b7a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d801      	bhi.n	8001b86 <create_chain+0x46>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0a9      	b.n	8001cda <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d101      	bne.n	8001b92 <create_chain+0x52>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	e0a3      	b.n	8001cda <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d201      	bcs.n	8001ba0 <create_chain+0x60>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	e09c      	b.n	8001cda <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <create_chain+0x70>
 8001bac:	2300      	movs	r3, #0
 8001bae:	e094      	b.n	8001cda <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d129      	bne.n	8001c10 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d301      	bcc.n	8001bd0 <create_chain+0x90>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8001bd0:	69f9      	ldr	r1, [r7, #28]
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fdc3 	bl	800175e <get_fat>
 8001bd8:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d003      	beq.n	8001be8 <create_chain+0xa8>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be6:	d101      	bne.n	8001bec <create_chain+0xac>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	e076      	b.n	8001cda <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00e      	beq.n	8001c10 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d906      	bls.n	8001c0c <create_chain+0xcc>
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d201      	bcs.n	8001c0c <create_chain+0xcc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d129      	bne.n	8001c6a <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d307      	bcc.n	8001c3a <create_chain+0xfa>
					ncl = 2;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d901      	bls.n	8001c3a <create_chain+0xfa>
 8001c36:	2300      	movs	r3, #0
 8001c38:	e04f      	b.n	8001cda <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8001c3a:	69f9      	ldr	r1, [r7, #28]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fd8e 	bl	800175e <get_fat>
 8001c42:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00e      	beq.n	8001c68 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d003      	beq.n	8001c58 <create_chain+0x118>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c56:	d101      	bne.n	8001c5c <create_chain+0x11c>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	e03e      	b.n	8001cda <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1da      	bne.n	8001c1a <create_chain+0xda>
 8001c64:	2300      	movs	r3, #0
 8001c66:	e038      	b.n	8001cda <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8001c68:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8001c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	6938      	ldr	r0, [r7, #16]
 8001c72:	f7ff fe19 	bl	80018a8 <put_fat>
 8001c76:	4603      	mov	r3, r0
 8001c78:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <create_chain+0x154>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	6938      	ldr	r0, [r7, #16]
 8001c8c:	f7ff fe0c 	bl	80018a8 <put_fat>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <create_chain+0x188>
		fs->last_clst = ncl;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	3b02      	subs	r3, #2
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d804      	bhi.n	8001cb8 <create_chain+0x178>
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	791b      	ldrb	r3, [r3, #4]
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	711a      	strb	r2, [r3, #4]
 8001cc6:	e007      	b.n	8001cd8 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <create_chain+0x194>
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e000      	b.n	8001cd6 <create_chain+0x196>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8001cd8:	69fb      	ldr	r3, [r7, #28]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fc40 	bl	8001572 <sync_window>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <dir_clear+0x1a>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e036      	b.n	8001d6a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fd0e 	bl	8001720 <clst2sect>
 8001d04:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3330      	adds	r3, #48	; 0x30
 8001d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fb85 	bl	8001426 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3330      	adds	r3, #48	; 0x30
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	2301      	movs	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e003      	b.n	8001d34 <dir_clear+0x52>
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	895b      	ldrh	r3, [r3, #10]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d20b      	bcs.n	8001d58 <dir_clear+0x76>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7858      	ldrb	r0, [r3, #1]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	441a      	add	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	f7ff f8b9 	bl	8000ec4 <disk_write>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0e9      	beq.n	8001d2c <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	895b      	ldrh	r3, [r3, #10]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d88:	d204      	bcs.n	8001d94 <dir_sdi+0x22>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <dir_sdi+0x26>
		return FR_INT_ERR;
 8001d94:	2302      	movs	r3, #2
 8001d96:	e063      	b.n	8001e60 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <dir_sdi+0x46>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d902      	bls.n	8001db8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	8912      	ldrh	r2, [r2, #8]
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d301      	bcc.n	8001dce <dir_sdi+0x5c>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e048      	b.n	8001e60 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	e029      	b.n	8001e2c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	895b      	ldrh	r3, [r3, #10]
 8001ddc:	025b      	lsls	r3, r3, #9
 8001dde:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001de0:	e019      	b.n	8001e16 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fcb9 	bl	800175e <get_fat>
 8001dec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d101      	bne.n	8001dfa <dir_sdi+0x88>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e032      	b.n	8001e60 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d904      	bls.n	8001e0a <dir_sdi+0x98>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d301      	bcc.n	8001e0e <dir_sdi+0x9c>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e028      	b.n	8001e60 <dir_sdi+0xee>
			ofs -= csz;
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d2e1      	bcs.n	8001de2 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8001e1e:	6979      	ldr	r1, [r7, #20]
 8001e20:	6938      	ldr	r0, [r7, #16]
 8001e22:	f7ff fc7d 	bl	8001720 <clst2sect>
 8001e26:	4602      	mov	r2, r0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <dir_sdi+0xcc>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e010      	b.n	8001e60 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	441a      	add	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	3320      	adds	r3, #32
 8001e7e:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e86:	d302      	bcc.n	8001e8e <dir_next+0x26>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <dir_next+0x32>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e078      	b.n	8001f8c <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d166      	bne.n	8001f72 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	8912      	ldrh	r2, [r2, #8]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d357      	bcc.n	8001f72 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e05f      	b.n	8001f8c <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0a5b      	lsrs	r3, r3, #9
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	8952      	ldrh	r2, [r2, #10]
 8001ed4:	3a01      	subs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d14a      	bne.n	8001f72 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f7ff fc3a 	bl	800175e <get_fat>
 8001eea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d801      	bhi.n	8001ef6 <dir_next+0x8e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e04a      	b.n	8001f8c <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d101      	bne.n	8001f02 <dir_next+0x9a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e044      	b.n	8001f8c <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d328      	bcc.n	8001f5e <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d104      	bne.n	8001f1c <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e037      	b.n	8001f8c <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f7ff fe0b 	bl	8001b40 <create_chain>
 8001f2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <dir_next+0xce>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e02a      	b.n	8001f8c <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <dir_next+0xd8>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e025      	b.n	8001f8c <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d101      	bne.n	8001f4c <dir_next+0xe4>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e01f      	b.n	8001f8c <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8001f4c:	6979      	ldr	r1, [r7, #20]
 8001f4e:	6938      	ldr	r0, [r7, #16]
 8001f50:	f7ff fec7 	bl	8001ce2 <dir_clear>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <dir_next+0xf6>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e016      	b.n	8001f8c <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f7ff fbda 	bl	8001720 <clst2sect>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fee3 	bl	8001d72 <dir_sdi>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d12b      	bne.n	800200e <dir_alloc+0x7a>
		n = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff fb12 	bl	80015ea <move_window>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11d      	bne.n	800200c <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2be5      	cmp	r3, #229	; 0xe5
 8001fd8:	d004      	beq.n	8001fe4 <dir_alloc+0x50>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d102      	bne.n	8001ff8 <dir_alloc+0x64>
 8001ff2:	e00c      	b.n	800200e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff34 	bl	8001e68 <dir_next>
 8002000:	4603      	mov	r3, r0
 8002002:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0d7      	beq.n	8001fba <dir_alloc+0x26>
 800200a:	e000      	b.n	800200e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800200c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d101      	bne.n	8002018 <dir_alloc+0x84>
 8002014:	2307      	movs	r3, #7
 8002016:	75fb      	strb	r3, [r7, #23]
	return res;
 8002018:	7dfb      	ldrb	r3, [r7, #23]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	331a      	adds	r3, #26
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f955 	bl	80012e0 <ld_word>
 8002036:	4603      	mov	r3, r0
 8002038:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d109      	bne.n	8002056 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3314      	adds	r3, #20
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f94a 	bl	80012e0 <ld_word>
 800204c:	4603      	mov	r3, r0
 800204e:	041b      	lsls	r3, r3, #16
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	331a      	adds	r3, #26
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	b292      	uxth	r2, r2
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f96d 	bl	8001356 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d109      	bne.n	8002098 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f103 0214 	add.w	r2, r3, #20
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	b29b      	uxth	r3, r3
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7ff f95f 	bl	8001356 <st_word>
	}
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80020ae:	2100      	movs	r1, #0
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff fe5e 	bl	8001d72 <dir_sdi>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <dir_find+0x24>
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	e03e      	b.n	8002142 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4619      	mov	r1, r3
 80020ca:	6938      	ldr	r0, [r7, #16]
 80020cc:	f7ff fa8d 	bl	80015ea <move_window>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d12f      	bne.n	800213a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <dir_find+0x4e>
 80020e8:	2304      	movs	r3, #4
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	e028      	b.n	8002140 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	330b      	adds	r3, #11
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	330b      	adds	r3, #11
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <dir_find+0x86>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69d8      	ldr	r0, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3320      	adds	r3, #32
 8002118:	220b      	movs	r2, #11
 800211a:	4619      	mov	r1, r3
 800211c:	f7ff f99d 	bl	800145a <mem_cmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8002126:	2100      	movs	r1, #0
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe9d 	bl	8001e68 <dir_next>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0c5      	beq.n	80020c4 <dir_find+0x24>
 8002138:	e002      	b.n	8002140 <dir_find+0xa0>
		if (res != FR_OK) break;
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800213e:	bf00      	nop

	return res;
 8002140:	7dfb      	ldrb	r3, [r7, #23]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002158:	2101      	movs	r1, #1
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff1a 	bl	8001f94 <dir_alloc>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11c      	bne.n	80021a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4619      	mov	r1, r3
 8002170:	68b8      	ldr	r0, [r7, #8]
 8002172:	f7ff fa3a 	bl	80015ea <move_window>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d111      	bne.n	80021a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2220      	movs	r2, #32
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f94c 	bl	8001426 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69d8      	ldr	r0, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3320      	adds	r3, #32
 8002196:	220b      	movs	r2, #11
 8002198:	4619      	mov	r1, r3
 800219a:	f7ff f923 	bl	80013e4 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2201      	movs	r2, #1
 80021a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3320      	adds	r3, #32
 80021c4:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 80021c6:	220b      	movs	r2, #11
 80021c8:	2120      	movs	r1, #32
 80021ca:	6938      	ldr	r0, [r7, #16]
 80021cc:	f7ff f92b 	bl	8001426 <mem_set>
	si = i = 0; ni = 8;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	2308      	movs	r3, #8
 80021da:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	61fa      	str	r2, [r7, #28]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80021ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d97c      	bls.n	80022ee <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80021f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f8:	2b2f      	cmp	r3, #47	; 0x2f
 80021fa:	d007      	beq.n	800220c <create_name+0x5c>
 80021fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002200:	2b5c      	cmp	r3, #92	; 0x5c
 8002202:	d110      	bne.n	8002226 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002204:	e002      	b.n	800220c <create_name+0x5c>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3301      	adds	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b2f      	cmp	r3, #47	; 0x2f
 8002216:	d0f6      	beq.n	8002206 <create_name+0x56>
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b5c      	cmp	r3, #92	; 0x5c
 8002222:	d0f0      	beq.n	8002206 <create_name+0x56>
			break;
 8002224:	e064      	b.n	80022f0 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800222a:	2b2e      	cmp	r3, #46	; 0x2e
 800222c:	d003      	beq.n	8002236 <create_name+0x86>
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	429a      	cmp	r2, r3
 8002234:	d30d      	bcc.n	8002252 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2b0b      	cmp	r3, #11
 800223a:	d003      	beq.n	8002244 <create_name+0x94>
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002240:	2b2e      	cmp	r3, #46	; 0x2e
 8002242:	d001      	beq.n	8002248 <create_name+0x98>
 8002244:	2306      	movs	r3, #6
 8002246:	e06f      	b.n	8002328 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8002248:	2308      	movs	r3, #8
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	230b      	movs	r3, #11
 800224e:	623b      	str	r3, [r7, #32]
			continue;
 8002250:	e04c      	b.n	80022ec <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8002252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f941 	bl	80014de <dbc_1st>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d024      	beq.n	80022ac <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	61fa      	str	r2, [r7, #28]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4413      	add	r3, r2
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f953 	bl	800151e <dbc_2nd>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <create_name+0xd8>
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	3b01      	subs	r3, #1
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	429a      	cmp	r2, r3
 8002286:	d301      	bcc.n	800228c <create_name+0xdc>
 8002288:	2306      	movs	r3, #6
 800228a:	e04d      	b.n	8002328 <create_name+0x178>
			sfn[i++] = c;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	61ba      	str	r2, [r7, #24]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800229a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	61ba      	str	r2, [r7, #24]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e797      	b.n	80021dc <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80022ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b0:	4619      	mov	r1, r3
 80022b2:	481f      	ldr	r0, [pc, #124]	; (8002330 <create_name+0x180>)
 80022b4:	f7ff f8f8 	bl	80014a8 <chk_chr>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <create_name+0x112>
 80022be:	2306      	movs	r3, #6
 80022c0:	e032      	b.n	8002328 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80022c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c6:	2b60      	cmp	r3, #96	; 0x60
 80022c8:	d908      	bls.n	80022dc <create_name+0x12c>
 80022ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ce:	2b7a      	cmp	r3, #122	; 0x7a
 80022d0:	d804      	bhi.n	80022dc <create_name+0x12c>
 80022d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d6:	3b20      	subs	r3, #32
 80022d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	61ba      	str	r2, [r7, #24]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 80022ec:	e776      	b.n	80021dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80022ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	441a      	add	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <create_name+0x154>
 8002300:	2306      	movs	r3, #6
 8002302:	e011      	b.n	8002328 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2be5      	cmp	r3, #229	; 0xe5
 800230a:	d102      	bne.n	8002312 <create_name+0x162>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2205      	movs	r2, #5
 8002310:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002316:	2b20      	cmp	r3, #32
 8002318:	d801      	bhi.n	800231e <create_name+0x16e>
 800231a:	2204      	movs	r2, #4
 800231c:	e000      	b.n	8002320 <create_name+0x170>
 800231e:	2200      	movs	r2, #0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	330b      	adds	r3, #11
 8002324:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8002326:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8002328:	4618      	mov	r0, r3
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	08008370 	.word	0x08008370

08002334 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002344:	e002      	b.n	800234c <follow_path+0x18>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b2f      	cmp	r3, #47	; 0x2f
 8002352:	d0f8      	beq.n	8002346 <follow_path+0x12>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b5c      	cmp	r3, #92	; 0x5c
 800235a:	d0f4      	beq.n	8002346 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b1f      	cmp	r3, #31
 8002368:	d80a      	bhi.n	8002380 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002372:	2100      	movs	r1, #0
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fcfc 	bl	8001d72 <dir_sdi>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]
 800237e:	e043      	b.n	8002408 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002380:	463b      	mov	r3, r7
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff13 	bl	80021b0 <create_name>
 800238a:	4603      	mov	r3, r0
 800238c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d134      	bne.n	80023fe <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fe83 	bl	80020a0 <dir_find>
 800239a:	4603      	mov	r3, r0
 800239c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80023a4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d127      	bne.n	8002402 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d122      	bne.n	8002402 <follow_path+0xce>
 80023bc:	2305      	movs	r3, #5
 80023be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80023c0:	e01f      	b.n	8002402 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11c      	bne.n	8002406 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	799b      	ldrb	r3, [r3, #6]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <follow_path+0xaa>
				res = FR_NO_PATH; break;
 80023d8:	2305      	movs	r3, #5
 80023da:	75fb      	strb	r3, [r7, #23]
 80023dc:	e014      	b.n	8002408 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ec:	4413      	add	r3, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	6938      	ldr	r0, [r7, #16]
 80023f2:	f7ff fe16 	bl	8002022 <ld_clust>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80023fc:	e7c0      	b.n	8002380 <follow_path+0x4c>
			if (res != FR_OK) break;
 80023fe:	bf00      	nop
 8002400:	e002      	b.n	8002408 <follow_path+0xd4>
				break;
 8002402:	bf00      	nop
 8002404:	e000      	b.n	8002408 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002406:	bf00      	nop
			}
		}
	}

	return res;
 8002408:	7dfb      	ldrb	r3, [r7, #23]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002412:	b480      	push	{r7}
 8002414:	b089      	sub	sp, #36	; 0x24
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <get_ldnumber+0x22>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	e02d      	b.n	8002490 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	61fa      	str	r2, [r7, #28]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b20      	cmp	r3, #32
 8002442:	d902      	bls.n	800244a <get_ldnumber+0x38>
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b3a      	cmp	r3, #58	; 0x3a
 8002448:	d1f4      	bne.n	8002434 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b3a      	cmp	r3, #58	; 0x3a
 800244e:	d11c      	bne.n	800248a <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002450:	2301      	movs	r3, #1
 8002452:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b2f      	cmp	r3, #47	; 0x2f
 800245a:	d90c      	bls.n	8002476 <get_ldnumber+0x64>
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b39      	cmp	r3, #57	; 0x39
 8002462:	d808      	bhi.n	8002476 <get_ldnumber+0x64>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3302      	adds	r3, #2
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	429a      	cmp	r2, r3
 800246c:	d103      	bne.n	8002476 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3b30      	subs	r3, #48	; 0x30
 8002474:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	dc04      	bgt.n	8002486 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	e002      	b.n	8002490 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800248e:	697b      	ldr	r3, [r7, #20]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3724      	adds	r7, #36	; 0x24
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	70da      	strb	r2, [r3, #3]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f04f 32ff 	mov.w	r2, #4294967295
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff f897 	bl	80015ea <move_window>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <check_fs+0x2a>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e038      	b.n	8002538 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3330      	adds	r3, #48	; 0x30
 80024ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff06 	bl	80012e0 <ld_word>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <check_fs+0x48>
 80024e0:	2303      	movs	r3, #3
 80024e2:	e029      	b.n	8002538 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ea:	2be9      	cmp	r3, #233	; 0xe9
 80024ec:	d009      	beq.n	8002502 <check_fs+0x66>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024f4:	2beb      	cmp	r3, #235	; 0xeb
 80024f6:	d004      	beq.n	8002502 <check_fs+0x66>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024fe:	2be8      	cmp	r3, #232	; 0xe8
 8002500:	d119      	bne.n	8002536 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3330      	adds	r3, #48	; 0x30
 8002506:	3336      	adds	r3, #54	; 0x36
 8002508:	2203      	movs	r2, #3
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <check_fs+0xa4>)
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe ffa4 	bl	800145a <mem_cmp>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <check_fs+0x80>
 8002518:	2300      	movs	r3, #0
 800251a:	e00d      	b.n	8002538 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3330      	adds	r3, #48	; 0x30
 8002520:	3352      	adds	r3, #82	; 0x52
 8002522:	2205      	movs	r2, #5
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <check_fs+0xa8>)
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe ff97 	bl	800145a <mem_cmp>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <check_fs+0x9a>
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002536:	2302      	movs	r3, #2
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	08008380 	.word	0x08008380
 8002544:	08008384 	.word	0x08008384

08002548 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b096      	sub	sp, #88	; 0x58
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff ff58 	bl	8002412 <get_ldnumber>
 8002562:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	da01      	bge.n	800256e <find_volume+0x26>
 800256a:	230b      	movs	r3, #11
 800256c:	e238      	b.n	80029e0 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800256e:	4aa8      	ldr	r2, [pc, #672]	; (8002810 <find_volume+0x2c8>)
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <find_volume+0x3a>
 800257e:	230c      	movs	r3, #12
 8002580:	e22e      	b.n	80029e0 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002586:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01a      	beq.n	80025ce <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fc11 	bl	8000dc4 <disk_status>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80025a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <find_volume+0x82>
 80025ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80025c6:	230a      	movs	r3, #10
 80025c8:	e20a      	b.n	80029e0 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 80025ca:	2300      	movs	r3, #0
 80025cc:	e208      	b.n	80029e0 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80025d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fb05 	bl	8000bf0 <disk_initialize>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80025ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1f1      	b.n	80029e0 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <find_volume+0xca>
 8002602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800260e:	230a      	movs	r3, #10
 8002610:	e1e6      	b.n	80029e0 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800261a:	f7ff ff3f 	bl	800249c <check_fs>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002628:	2b02      	cmp	r3, #2
 800262a:	d14b      	bne.n	80026c4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800262c:	2300      	movs	r3, #0
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
 8002630:	e01f      	b.n	8002672 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002640:	4413      	add	r3, r2
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	3304      	adds	r3, #4
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <find_volume+0x114>
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	3308      	adds	r3, #8
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fe5c 	bl	8001310 <ld_dword>
 8002658:	4602      	mov	r2, r0
 800265a:	e000      	b.n	800265e <find_volume+0x116>
 800265c:	2200      	movs	r2, #0
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002666:	440b      	add	r3, r1
 8002668:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800266c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266e:	3301      	adds	r3, #1
 8002670:	643b      	str	r3, [r7, #64]	; 0x40
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	2b03      	cmp	r3, #3
 8002676:	d9dc      	bls.n	8002632 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002678:	2300      	movs	r3, #0
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <find_volume+0x140>
 8002682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002684:	3b01      	subs	r3, #1
 8002686:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002690:	4413      	add	r3, r2
 8002692:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002696:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <find_volume+0x162>
 800269e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026a2:	f7ff fefb 	bl	800249c <check_fs>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e000      	b.n	80026ac <find_volume+0x164>
 80026aa:	2303      	movs	r3, #3
 80026ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80026b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d905      	bls.n	80026c4 <find_volume+0x17c>
 80026b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ba:	3301      	adds	r3, #1
 80026bc:	643b      	str	r3, [r7, #64]	; 0x40
 80026be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d9e1      	bls.n	8002688 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80026c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d101      	bne.n	80026d0 <find_volume+0x188>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e187      	b.n	80029e0 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80026d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d901      	bls.n	80026dc <find_volume+0x194>
 80026d8:	230d      	movs	r3, #13
 80026da:	e181      	b.n	80029e0 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	3330      	adds	r3, #48	; 0x30
 80026e0:	330b      	adds	r3, #11
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fdfc 	bl	80012e0 <ld_word>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ee:	d001      	beq.n	80026f4 <find_volume+0x1ac>
 80026f0:	230d      	movs	r3, #13
 80026f2:	e175      	b.n	80029e0 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	3330      	adds	r3, #48	; 0x30
 80026f8:	3316      	adds	r3, #22
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fdf0 	bl	80012e0 <ld_word>
 8002700:	4603      	mov	r3, r0
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <find_volume+0x1d0>
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	3330      	adds	r3, #48	; 0x30
 800270e:	3324      	adds	r3, #36	; 0x24
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fdfd 	bl	8001310 <ld_dword>
 8002716:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800271c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <find_volume+0x1f4>
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	789b      	ldrb	r3, [r3, #2]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d001      	beq.n	800273c <find_volume+0x1f4>
 8002738:	230d      	movs	r3, #13
 800273a:	e151      	b.n	80029e0 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	789b      	ldrb	r3, [r3, #2]
 8002740:	461a      	mov	r2, r3
 8002742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b29a      	uxth	r2, r3
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	895b      	ldrh	r3, [r3, #10]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <find_volume+0x228>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	895b      	ldrh	r3, [r3, #10]
 8002762:	461a      	mov	r2, r3
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	895b      	ldrh	r3, [r3, #10]
 8002768:	3b01      	subs	r3, #1
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <find_volume+0x22c>
 8002770:	230d      	movs	r3, #13
 8002772:	e135      	b.n	80029e0 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	3330      	adds	r3, #48	; 0x30
 8002778:	3311      	adds	r3, #17
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fdb0 	bl	80012e0 <ld_word>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	891b      	ldrh	r3, [r3, #8]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <find_volume+0x252>
 8002796:	230d      	movs	r3, #13
 8002798:	e122      	b.n	80029e0 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	3330      	adds	r3, #48	; 0x30
 800279e:	3313      	adds	r3, #19
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fd9d 	bl	80012e0 <ld_word>
 80027a6:	4603      	mov	r3, r0
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <find_volume+0x276>
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	3330      	adds	r3, #48	; 0x30
 80027b4:	3320      	adds	r3, #32
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fdaa 	bl	8001310 <ld_dword>
 80027bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	3330      	adds	r3, #48	; 0x30
 80027c2:	330e      	adds	r3, #14
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fd8b 	bl	80012e0 <ld_word>
 80027ca:	4603      	mov	r3, r0
 80027cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80027ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <find_volume+0x290>
 80027d4:	230d      	movs	r3, #13
 80027d6:	e103      	b.n	80029e0 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80027d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80027da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027dc:	4413      	add	r3, r2
 80027de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e0:	8912      	ldrh	r2, [r2, #8]
 80027e2:	0912      	lsrs	r2, r2, #4
 80027e4:	b292      	uxth	r2, r2
 80027e6:	4413      	add	r3, r2
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80027ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d201      	bcs.n	80027f6 <find_volume+0x2ae>
 80027f2:	230d      	movs	r3, #13
 80027f4:	e0f4      	b.n	80029e0 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80027f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fe:	8952      	ldrh	r2, [r2, #10]
 8002800:	fbb3 f3f2 	udiv	r3, r3, r2
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <find_volume+0x2cc>
 800280c:	230d      	movs	r3, #13
 800280e:	e0e7      	b.n	80029e0 <find_volume+0x498>
 8002810:	20000034 	.word	0x20000034
		fmt = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	4a72      	ldr	r2, [pc, #456]	; (80029e8 <find_volume+0x4a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d802      	bhi.n	8002828 <find_volume+0x2e0>
 8002822:	2303      	movs	r3, #3
 8002824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <find_volume+0x2f0>
 8002832:	2302      	movs	r3, #2
 8002834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <find_volume+0x300>
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <find_volume+0x30c>
 8002850:	230d      	movs	r3, #13
 8002852:	e0c5      	b.n	80029e0 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1c9a      	adds	r2, r3, #2
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002860:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002862:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	441a      	add	r2, r3
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800286c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	441a      	add	r2, r3
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800287a:	2b03      	cmp	r3, #3
 800287c:	d11e      	bne.n	80028bc <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002880:	3330      	adds	r3, #48	; 0x30
 8002882:	332a      	adds	r3, #42	; 0x2a
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fd2b 	bl	80012e0 <ld_word>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <find_volume+0x34c>
 8002890:	230d      	movs	r3, #13
 8002892:	e0a5      	b.n	80029e0 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	891b      	ldrh	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <find_volume+0x358>
 800289c:	230d      	movs	r3, #13
 800289e:	e09f      	b.n	80029e0 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	3330      	adds	r3, #48	; 0x30
 80028a4:	332c      	adds	r3, #44	; 0x2c
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fd32 	bl	8001310 <ld_dword>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ba:	e01f      	b.n	80028fc <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <find_volume+0x380>
 80028c4:	230d      	movs	r3, #13
 80028c6:	e08b      	b.n	80029e0 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ce:	441a      	add	r2, r3
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80028d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d103      	bne.n	80028e4 <find_volume+0x39c>
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	e00a      	b.n	80028fa <find_volume+0x3b2>
 80028e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	085a      	lsrs	r2, r3, #1
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80028fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002906:	0a5b      	lsrs	r3, r3, #9
 8002908:	429a      	cmp	r2, r3
 800290a:	d201      	bcs.n	8002910 <find_volume+0x3c8>
 800290c:	230d      	movs	r3, #13
 800290e:	e067      	b.n	80029e0 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	f04f 32ff 	mov.w	r2, #4294967295
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800292a:	2b03      	cmp	r3, #3
 800292c:	d149      	bne.n	80029c2 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	3330      	adds	r3, #48	; 0x30
 8002932:	3330      	adds	r3, #48	; 0x30
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fcd3 	bl	80012e0 <ld_word>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d140      	bne.n	80029c2 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002942:	3301      	adds	r3, #1
 8002944:	4619      	mov	r1, r3
 8002946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002948:	f7fe fe4f 	bl	80015ea <move_window>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d137      	bne.n	80029c2 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	3330      	adds	r3, #48	; 0x30
 800295c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fcbd 	bl	80012e0 <ld_word>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800296e:	429a      	cmp	r2, r3
 8002970:	d127      	bne.n	80029c2 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	3330      	adds	r3, #48	; 0x30
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fcca 	bl	8001310 <ld_dword>
 800297c:	4602      	mov	r2, r0
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <find_volume+0x4a4>)
 8002980:	429a      	cmp	r2, r3
 8002982:	d11e      	bne.n	80029c2 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	3330      	adds	r3, #48	; 0x30
 8002988:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fcbf 	bl	8001310 <ld_dword>
 8002992:	4602      	mov	r2, r0
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <find_volume+0x4a8>)
 8002996:	429a      	cmp	r2, r3
 8002998:	d113      	bne.n	80029c2 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	3330      	adds	r3, #48	; 0x30
 800299e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fcb4 	bl	8001310 <ld_dword>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	3330      	adds	r3, #48	; 0x30
 80029b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fcaa 	bl	8001310 <ld_dword>
 80029bc:	4602      	mov	r2, r0
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80029c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <find_volume+0x4ac>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <find_volume+0x4ac>)
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <find_volume+0x4ac>)
 80029d8:	881a      	ldrh	r2, [r3, #0]
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3758      	adds	r7, #88	; 0x58
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	0ffffff5 	.word	0x0ffffff5
 80029ec:	41615252 	.word	0x41615252
 80029f0:	61417272 	.word	0x61417272
 80029f4:	20000038 	.word	0x20000038

080029f8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8002a02:	2309      	movs	r3, #9
 8002a04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01c      	beq.n	8002a46 <validate+0x4e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d018      	beq.n	8002a46 <validate+0x4e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d013      	beq.n	8002a46 <validate+0x4e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	889a      	ldrh	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	88db      	ldrh	r3, [r3, #6]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10c      	bne.n	8002a46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f9c6 	bl	8000dc4 <disk_status>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <validate+0x4e>
			res = FR_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <validate+0x5a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	e000      	b.n	8002a54 <validate+0x5c>
 8002a52:	2300      	movs	r3, #0
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	6013      	str	r3, [r2, #0]
	return res;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fcc9 	bl	8002412 <get_ldnumber>
 8002a80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da01      	bge.n	8002a8c <f_mount+0x28>
 8002a88:	230b      	movs	r3, #11
 8002a8a:	e025      	b.n	8002ad8 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <f_mount+0x7c>)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <f_mount+0x7c>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <f_mount+0x5e>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e00a      	b.n	8002ad8 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002ac2:	f107 010c 	add.w	r1, r7, #12
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	2200      	movs	r2, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fd3b 	bl	8002548 <find_volume>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000034 	.word	0x20000034

08002ae4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b099      	sub	sp, #100	; 0x64
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <f_open+0x18>
 8002af8:	2309      	movs	r3, #9
 8002afa:	e172      	b.n	8002de2 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8002b04:	79fa      	ldrb	r2, [r7, #7]
 8002b06:	f107 0114 	add.w	r1, r7, #20
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fd1a 	bl	8002548 <find_volume>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8002b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8156 	bne.w	8002dd0 <f_open+0x2ec>
		dj.obj.fs = fs;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	f107 0318 	add.w	r3, r7, #24
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fbff 	bl	8002334 <follow_path>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8002b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002b44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da02      	bge.n	8002b54 <f_open+0x70>
				res = FR_INVALID_NAME;
 8002b4e:	2306      	movs	r3, #6
 8002b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 031c 	and.w	r3, r3, #28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d073      	beq.n	8002c46 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8002b5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8002b6e:	f107 0318 	add.w	r3, r7, #24
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fae9 	bl	800214a <dir_register>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f043 0308 	orr.w	r3, r3, #8
 8002b84:	71fb      	strb	r3, [r7, #7]
 8002b86:	e010      	b.n	8002baa <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002b88:	7fbb      	ldrb	r3, [r7, #30]
 8002b8a:	f003 0311 	and.w	r3, r3, #17
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <f_open+0xb6>
					res = FR_DENIED;
 8002b92:	2307      	movs	r3, #7
 8002b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b98:	e007      	b.n	8002baa <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <f_open+0xc6>
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8002baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d163      	bne.n	8002c7a <f_open+0x196>
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05e      	beq.n	8002c7a <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fa2d 	bl	8002022 <ld_clust>
 8002bc8:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	f103 040e 	add.w	r4, r3, #14
 8002bd0:	f7fe fb7c 	bl	80012cc <get_fattime>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fe fbd7 	bl	800138c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	330b      	adds	r3, #11
 8002be2:	2220      	movs	r2, #32
 8002be4:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bea:	2200      	movs	r2, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fa37 	bl	8002060 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	331c      	adds	r3, #28
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fbc7 	bl	800138c <st_dword>
					fs->wflag = 1;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2201      	movs	r2, #1
 8002c02:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8002c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d037      	beq.n	8002c7a <f_open+0x196>
						dw = fs->winsect;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8002c10:	f107 0318 	add.w	r3, r7, #24
 8002c14:	2200      	movs	r2, #0
 8002c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ff2c 	bl	8001a76 <remove_chain>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8002c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d126      	bne.n	8002c7a <f_open+0x196>
							res = move_window(fs, dw);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fcda 	bl	80015ea <move_window>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c40:	3a01      	subs	r2, #1
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e019      	b.n	8002c7a <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8002c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8002c4e:	7fbb      	ldrb	r3, [r7, #30]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <f_open+0x17c>
					res = FR_NO_FILE;
 8002c58:	2304      	movs	r3, #4
 8002c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c5e:	e00c      	b.n	8002c7a <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <f_open+0x196>
 8002c6a:	7fbb      	ldrb	r3, [r7, #30]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <f_open+0x196>
						res = FR_DENIED;
 8002c74:	2307      	movs	r3, #7
 8002c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8002c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <f_open+0x1b0>
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c92:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8002c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8002ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 8092 	bne.w	8002dd0 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f9b5 	bl	8002022 <ld_clust>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	331c      	adds	r3, #28
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb24 	bl	8001310 <ld_dword>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	88da      	ldrh	r2, [r3, #6]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3328      	adds	r3, #40	; 0x28
 8002cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fb91 	bl	8001426 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d060      	beq.n	8002dd0 <f_open+0x2ec>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d05c      	beq.n	8002dd0 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	895b      	ldrh	r3, [r3, #10]
 8002d22:	025b      	lsls	r3, r3, #9
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
 8002d32:	e016      	b.n	8002d62 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fd10 	bl	800175e <get_fat>
 8002d3e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d802      	bhi.n	8002d4c <f_open+0x268>
 8002d46:	2302      	movs	r3, #2
 8002d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8002d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d102      	bne.n	8002d5a <f_open+0x276>
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002d5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
 8002d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <f_open+0x28e>
 8002d6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d8e0      	bhi.n	8002d34 <f_open+0x250>
				}
				fp->clust = clst;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d76:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d127      	bne.n	8002dd0 <f_open+0x2ec>
 8002d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d022      	beq.n	8002dd0 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fcc6 	bl	8001720 <clst2sect>
 8002d94:	6478      	str	r0, [r7, #68]	; 0x44
 8002d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <f_open+0x2c0>
						res = FR_INT_ERR;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002da2:	e015      	b.n	8002dd0 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da6:	0a5a      	lsrs	r2, r3, #9
 8002da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	7858      	ldrb	r0, [r3, #1]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f7fe f816 	bl	8000df0 <disk_read>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <f_open+0x2ec>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <f_open+0x2fa>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8002dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3764      	adds	r7, #100	; 0x64
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b08e      	sub	sp, #56	; 0x38
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f107 0214 	add.w	r2, r7, #20
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fdf4 	bl	80029f8 <validate>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <f_read+0x44>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	7c5b      	ldrb	r3, [r3, #17]
 8002e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <f_read+0x4a>
 8002e2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e32:	e109      	b.n	8003048 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	7c1b      	ldrb	r3, [r3, #16]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <f_read+0x5a>
 8002e40:	2307      	movs	r3, #7
 8002e42:	e101      	b.n	8003048 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f240 80f2 	bls.w	800303e <f_read+0x254>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8002e5e:	e0ee      	b.n	800303e <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 80ba 	bne.w	8002fe2 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	0a5b      	lsrs	r3, r3, #9
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	8952      	ldrh	r2, [r2, #10]
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d123      	bne.n	8002ecc <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	e007      	b.n	8002ea4 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f7fe fc5e 	bl	800175e <get_fat>
 8002ea2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d804      	bhi.n	8002eb4 <f_read+0xca>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2202      	movs	r2, #2
 8002eae:	745a      	strb	r2, [r3, #17]
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0c9      	b.n	8003048 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d104      	bne.n	8002ec6 <f_read+0xdc>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	745a      	strb	r2, [r3, #17]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0c0      	b.n	8003048 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eca:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f7fe fc23 	bl	8001720 <clst2sect>
 8002eda:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <f_read+0x102>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	745a      	strb	r2, [r3, #17]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0ad      	b.n	8003048 <f_read+0x25e>
			sect += csect;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0a5b      	lsrs	r3, r3, #9
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d039      	beq.n	8002f74 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	4413      	add	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	8952      	ldrh	r2, [r2, #10]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d905      	bls.n	8002f1a <f_read+0x130>
					cc = fs->csize - csect;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	895b      	ldrh	r3, [r3, #10]
 8002f12:	461a      	mov	r2, r3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	7858      	ldrb	r0, [r3, #1]
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f24:	f7fd ff64 	bl	8000df0 <disk_read>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <f_read+0x14e>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	745a      	strb	r2, [r3, #17]
 8002f34:	2301      	movs	r3, #1
 8002f36:	e087      	b.n	8003048 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	7c1b      	ldrb	r3, [r3, #16]
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da14      	bge.n	8002f6c <f_read+0x182>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d90d      	bls.n	8002f6c <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	18d0      	adds	r0, r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3328      	adds	r3, #40	; 0x28
 8002f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fe fa3c 	bl	80013e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	025b      	lsls	r3, r3, #9
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8002f72:	e050      	b.n	8003016 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d02e      	beq.n	8002fdc <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	7c1b      	ldrb	r3, [r3, #16]
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da18      	bge.n	8002fba <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	7858      	ldrb	r0, [r3, #1]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	2301      	movs	r3, #1
 8002f98:	f7fd ff94 	bl	8000ec4 <disk_write>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <f_read+0x1c2>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	745a      	strb	r2, [r3, #17]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e04d      	b.n	8003048 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	7c1b      	ldrb	r3, [r3, #16]
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	7858      	ldrb	r0, [r3, #1]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	f7fd ff12 	bl	8000df0 <disk_read>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <f_read+0x1f2>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	745a      	strb	r2, [r3, #17]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e035      	b.n	8003048 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d901      	bls.n	8002ffc <f_read+0x212>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	4413      	add	r3, r2
 800300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300e:	4619      	mov	r1, r3
 8003010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003012:	f7fe f9e7 	bl	80013e4 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	441a      	add	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	4413      	add	r3, r2
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f af0d 	bne.w	8002e60 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3738      	adds	r7, #56	; 0x38
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f107 0208 	add.w	r2, r7, #8
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fcc9 	bl	80029f8 <validate>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d168      	bne.n	8003142 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7c1b      	ldrb	r3, [r3, #16]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d062      	beq.n	8003142 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7c1b      	ldrb	r3, [r3, #16]
 8003080:	b25b      	sxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	da15      	bge.n	80030b2 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	7858      	ldrb	r0, [r3, #1]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	2301      	movs	r3, #1
 8003096:	f7fd ff15 	bl	8000ec4 <disk_write>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <f_sync+0x54>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e04f      	b.n	8003144 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7c1b      	ldrb	r3, [r3, #16]
 80030a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80030b2:	f7fe f90b 	bl	80012cc <get_fattime>
 80030b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f7fe fa92 	bl	80015ea <move_window>
 80030c6:	4603      	mov	r3, r0
 80030c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d138      	bne.n	8003142 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	330b      	adds	r3, #11
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	330b      	adds	r3, #11
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	461a      	mov	r2, r3
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	f7fe ffb4 	bl	8002060 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f103 021c 	add.w	r2, r3, #28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7fe f941 	bl	800138c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3316      	adds	r3, #22
 800310e:	6939      	ldr	r1, [r7, #16]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe f93b 	bl	800138c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3312      	adds	r3, #18
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f91a 	bl	8001356 <st_word>
					fs->wflag = 1;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2201      	movs	r2, #1
 8003126:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fa8a 	bl	8001644 <sync_fs>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7c1b      	ldrb	r3, [r3, #16]
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	b2da      	uxtb	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003142:	7dfb      	ldrb	r3, [r7, #23]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff7b 	bl	8003050 <f_sync>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f107 0208 	add.w	r2, r7, #8
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fc43 	bl	80029f8 <validate>
 8003172:	4603      	mov	r3, r0
 8003174:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d102      	bne.n	8003182 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f107 0208 	add.w	r2, r7, #8
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fc2a 	bl	80029f8 <validate>
 80031a4:	4603      	mov	r3, r0
 80031a6:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <f_lseek+0x28>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7c5b      	ldrb	r3, [r3, #17]
 80031b2:	77fb      	strb	r3, [r7, #31]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <f_lseek+0x32>
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	e10f      	b.n	80033de <f_lseek+0x252>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d908      	bls.n	80031da <f_lseek+0x4e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7c1b      	ldrb	r3, [r3, #16]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	615a      	str	r2, [r3, #20]
		if (ofs > 0) {
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a7 	beq.w	8003340 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	895b      	ldrh	r3, [r3, #10]
 80031f6:	025b      	lsls	r3, r3, #9
 80031f8:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01b      	beq.n	8003238 <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	fbb2 f2f3 	udiv	r2, r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1e59      	subs	r1, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8003214:	429a      	cmp	r2, r3
 8003216:	d30f      	bcc.n	8003238 <f_lseek+0xac>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	425b      	negs	r3, r3
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e022      	b.n	800327e <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d119      	bne.n	8003278 <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fc79 	bl	8001b40 <create_chain>
 800324e:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d104      	bne.n	8003260 <f_lseek+0xd4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	745a      	strb	r2, [r3, #17]
 800325c:	2302      	movs	r3, #2
 800325e:	e0be      	b.n	80033de <f_lseek+0x252>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d104      	bne.n	8003272 <f_lseek+0xe6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	745a      	strb	r2, [r3, #17]
 800326e:	2301      	movs	r3, #1
 8003270:	e0b5      	b.n	80033de <f_lseek+0x252>
					fp->obj.sclust = clst;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05d      	beq.n	8003340 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 8003284:	e03a      	b.n	80032fc <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7c1b      	ldrb	r3, [r3, #16]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <f_lseek+0x132>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fc48 	bl	8001b40 <create_chain>
 80032b0:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <f_lseek+0x13e>
							ofs = 0; break;
 80032b8:	2300      	movs	r3, #0
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	e022      	b.n	8003304 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fa4b 	bl	800175e <get_fat>
 80032c8:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d104      	bne.n	80032dc <f_lseek+0x150>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	745a      	strb	r2, [r3, #17]
 80032d8:	2301      	movs	r3, #1
 80032da:	e080      	b.n	80033de <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d904      	bls.n	80032ec <f_lseek+0x160>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d304      	bcc.n	80032f6 <f_lseek+0x16a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	745a      	strb	r2, [r3, #17]
 80032f2:	2302      	movs	r3, #2
 80032f4:	e073      	b.n	80033de <f_lseek+0x252>
					fp->clust = clst;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d8c0      	bhi.n	8003286 <f_lseek+0xfa>
				}
				fp->fptr += ofs;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	441a      	add	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <f_lseek+0x1b4>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe f9fe 	bl	8001720 <clst2sect>
 8003324:	6178      	str	r0, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <f_lseek+0x1aa>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	745a      	strb	r2, [r3, #17]
 8003332:	2302      	movs	r3, #2
 8003334:	e053      	b.n	80033de <f_lseek+0x252>
					nsect += (DWORD)(ofs / SS(fs));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	0a5b      	lsrs	r3, r3, #9
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4413      	add	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	429a      	cmp	r2, r3
 800334a:	d90a      	bls.n	8003362 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7c1b      	ldrb	r3, [r3, #16]
 8003358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	2b00      	cmp	r3, #0
 800336c:	d036      	beq.n	80033dc <f_lseek+0x250>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	429a      	cmp	r2, r3
 8003376:	d031      	beq.n	80033dc <f_lseek+0x250>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7c1b      	ldrb	r3, [r3, #16]
 800337c:	b25b      	sxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	da18      	bge.n	80033b4 <f_lseek+0x228>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	7858      	ldrb	r0, [r3, #1]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	2301      	movs	r3, #1
 8003392:	f7fd fd97 	bl	8000ec4 <disk_write>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <f_lseek+0x21a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	745a      	strb	r2, [r3, #17]
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01b      	b.n	80033de <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7c1b      	ldrb	r3, [r3, #16]
 80033aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	7858      	ldrb	r0, [r3, #1]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80033be:	2301      	movs	r3, #1
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	f7fd fd15 	bl	8000df0 <disk_read>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <f_lseek+0x24a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	745a      	strb	r2, [r3, #17]
 80033d2:	2301      	movs	r3, #1
 80033d4:	e003      	b.n	80033de <f_lseek+0x252>
#endif
			fp->sect = nsect;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <openFile>:
	DIR directory;

}

FRESULT openFile(char *fName, FIL* pFile)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	unsigned snl = strlen(fName);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fc fef2 	bl	80001dc <strlen>
 80033f8:	6138      	str	r0, [r7, #16]
	FRESULT fResult;
	UINT r;
	if(snl>5)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d935      	bls.n	800346c <openFile+0x84>
	{
		char tmp[5];
		//memcpy(tmp,&fName[sizeof(fName)-5],4);
		memcpy(tmp,&fName[snl-4],4);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3b04      	subs	r3, #4
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60bb      	str	r3, [r7, #8]
		tmp[4]='\0';
 800340c:	2300      	movs	r3, #0
 800340e:	733b      	strb	r3, [r7, #12]
		if(strcmp(tmp,".wav")==0)
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	4919      	ldr	r1, [pc, #100]	; (800347c <openFile+0x94>)
 8003416:	4618      	mov	r0, r3
 8003418:	f7fc fed6 	bl	80001c8 <strcmp>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d103      	bne.n	800342a <openFile+0x42>
		{
			mOpen = 1;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <openFile+0x98>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e018      	b.n	800345c <openFile+0x74>
		}
		else if(strcmp(tmp,".mp3")==0)
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4915      	ldr	r1, [pc, #84]	; (8003484 <openFile+0x9c>)
 8003430:	4618      	mov	r0, r3
 8003432:	f7fc fec9 	bl	80001c8 <strcmp>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <openFile+0x5c>
		{
			mOpen = 1;
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <openFile+0x98>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00b      	b.n	800345c <openFile+0x74>
		}
		else if(strcmp(tmp,".txt")==0)
 8003444:	f107 0308 	add.w	r3, r7, #8
 8003448:	490f      	ldr	r1, [pc, #60]	; (8003488 <openFile+0xa0>)
 800344a:	4618      	mov	r0, r3
 800344c:	f7fc febc 	bl	80001c8 <strcmp>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <openFile+0x74>
		{
			pOpen = 1;
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <openFile+0xa4>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
		}
		fResult = f_open(pFile, fName, FA_READ );
 800345c:	2201      	movs	r2, #1
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	6838      	ldr	r0, [r7, #0]
 8003462:	f7ff fb3f 	bl	8002ae4 <f_open>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]
 800346a:	e001      	b.n	8003470 <openFile+0x88>
	}
	else fResult = FR_INVALID_PARAMETER;
 800346c:	2313      	movs	r3, #19
 800346e:	75fb      	strb	r3, [r7, #23]
	return fResult;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	0800838c 	.word	0x0800838c
 8003480:	20000040 	.word	0x20000040
 8003484:	08008394 	.word	0x08008394
 8003488:	0800839c 	.word	0x0800839c
 800348c:	2000003c 	.word	0x2000003c

08003490 <closeFile>:

FRESULT closeFile(FIL* pFile)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	FRESULT fResult = f_close (&pFile);
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fe56 	bl	800314c <f_close>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
	return fResult;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <setUp>:

unsigned long setUp(FIL* pFile, I2S_HandleTypeDef *hi2s3, unsigned *ch)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b08a      	sub	sp, #40	; 0x28
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
	unsigned br;
	FRESULT f;
	uint8_t data1[1];
	uint16_t data2[1];
	uint32_t data4[1];
	for (int i = 0; i < 4; i++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	e00a      	b.n	80034d6 <setUp+0x28>
	{
		f_read(pFile,data1,1,&br);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	f107 0118 	add.w	r1, r7, #24
 80034c8:	2201      	movs	r2, #1
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff fc8d 	bl	8002dea <f_read>
	for (int i = 0; i < 4; i++)
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	3301      	adds	r3, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	2b03      	cmp	r3, #3
 80034da:	ddf1      	ble.n	80034c0 <setUp+0x12>
	}
	f_read(pFile,data4,4,&br);
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	f107 0110 	add.w	r1, r7, #16
 80034e4:	2204      	movs	r2, #4
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff fc7f 	bl	8002dea <f_read>
	f_read(pFile,data4,4,&br);
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	f107 0110 	add.w	r1, r7, #16
 80034f4:	2204      	movs	r2, #4
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fc77 	bl	8002dea <f_read>
	f_read(pFile,data4,4,&br);
 80034fc:	f107 031c 	add.w	r3, r7, #28
 8003500:	f107 0110 	add.w	r1, r7, #16
 8003504:	2204      	movs	r2, #4
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff fc6f 	bl	8002dea <f_read>
	f_read(pFile,data4,4,&br);
 800350c:	f107 031c 	add.w	r3, r7, #28
 8003510:	f107 0110 	add.w	r1, r7, #16
 8003514:	2204      	movs	r2, #4
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fc67 	bl	8002dea <f_read>
	f_read(pFile,data2,2,&br);
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	f107 0114 	add.w	r1, r7, #20
 8003524:	2202      	movs	r2, #2
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff fc5f 	bl	8002dea <f_read>
	f_lseek(pFile,22);
 800352c:	2116      	movs	r1, #22
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fe2c 	bl	800318c <f_lseek>

	f_read(pFile,data2,2,&br);
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	f107 0114 	add.w	r1, r7, #20
 800353c:	2202      	movs	r2, #2
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fc53 	bl	8002dea <f_read>

	*ch = (unsigned)data2[0];
 8003544:	8abb      	ldrh	r3, [r7, #20]
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]

	f_read(pFile,data4,4,&br);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	f107 0110 	add.w	r1, r7, #16
 8003554:	2204      	movs	r2, #4
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fc47 	bl	8002dea <f_read>
	switch(data4[0])
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003562:	d025      	beq.n	80035b0 <setUp+0x102>
 8003564:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003568:	d807      	bhi.n	800357a <setUp+0xcc>
 800356a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800356e:	d029      	beq.n	80035c4 <setUp+0x116>
 8003570:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003574:	4293      	cmp	r3, r2
 8003576:	d020      	beq.n	80035ba <setUp+0x10c>
		break;
	case 8000:
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_8K;
		break;
	default:
		break;
 8003578:	e029      	b.n	80035ce <setUp+0x120>
	switch(data4[0])
 800357a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800357e:	d00d      	beq.n	800359c <setUp+0xee>
 8003580:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <setUp+0xe4>
 8003588:	f245 6222 	movw	r2, #22050	; 0x5622
 800358c:	4293      	cmp	r3, r2
 800358e:	d00a      	beq.n	80035a6 <setUp+0xf8>
		break;
 8003590:	e01d      	b.n	80035ce <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003598:	615a      	str	r2, [r3, #20]
		break;
 800359a:	e018      	b.n	80035ce <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_32K;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80035a2:	615a      	str	r2, [r3, #20]
		break;
 80035a4:	e013      	b.n	80035ce <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_22K;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f245 6222 	movw	r2, #22050	; 0x5622
 80035ac:	615a      	str	r2, [r3, #20]
		break;
 80035ae:	e00e      	b.n	80035ce <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80035b6:	615a      	str	r2, [r3, #20]
		break;
 80035b8:	e009      	b.n	80035ce <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_11K;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80035c0:	615a      	str	r2, [r3, #20]
		break;
 80035c2:	e004      	b.n	80035ce <setUp+0x120>
		hi2s3->Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80035ca:	615a      	str	r2, [r3, #20]
		break;
 80035cc:	bf00      	nop
	}
	f_lseek(pFile, 34);
 80035ce:	2122      	movs	r1, #34	; 0x22
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fddb 	bl	800318c <f_lseek>
	// 8 | 16
	f_read(pFile,data2,2,&br);
 80035d6:	f107 031c 	add.w	r3, r7, #28
 80035da:	f107 0114 	add.w	r1, r7, #20
 80035de:	2202      	movs	r2, #2
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff fc02 	bl	8002dea <f_read>
	f_lseek(pFile, 40);
 80035e6:	2128      	movs	r1, #40	; 0x28
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff fdcf 	bl	800318c <f_lseek>
	f_read(pFile,data4,4,&br);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	f107 0110 	add.w	r1, r7, #16
 80035f6:	2204      	movs	r2, #4
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fbf6 	bl	8002dea <f_read>
	unsigned long sdata = data4[0];
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	623b      	str	r3, [r7, #32]
	return sdata;
 8003602:	6a3b      	ldr	r3, [r7, #32]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <readData>:

FRESULT readData(uint16_t *data, FIL* pFile, unsigned size)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	UINT br;
	FRESULT fResult = f_read(pFile,data,size,&br);
 8003618:	f107 0310 	add.w	r3, r7, #16
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	68b8      	ldr	r0, [r7, #8]
 8003622:	f7ff fbe2 	bl	8002dea <f_read>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
	return fResult;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <fatInit>:

FRESULT fatInit(FATFS *fat)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	FRESULT fResult = f_mount(fat, "", 0);
 800363c:	2200      	movs	r2, #0
 800363e:	4905      	ldr	r1, [pc, #20]	; (8003654 <fatInit+0x20>)
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fa0f 	bl	8002a64 <f_mount>
 8003646:	4603      	mov	r3, r0
 8003648:	73fb      	strb	r3, [r7, #15]
	return fResult;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	080083a4 	.word	0x080083a4

08003658 <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2S3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a37      	ldr	r2, [pc, #220]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d167      	bne.n	800373a <HAL_TIM_PeriodElapsedCallback+0xe2>
	{
		if(filesize>0)
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_TIM_PeriodElapsedCallback+0xe2>
		{
			while(HAL_I2S_GetState(&hi2s3) == HAL_I2S_STATE_BUSY_TX)
 8003672:	bf00      	nop
 8003674:	4835      	ldr	r0, [pc, #212]	; (800374c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003676:	f002 fd3a 	bl	80060ee <HAL_I2S_GetState>
 800367a:	4603      	mov	r3, r0
 800367c:	2b03      	cmp	r3, #3
 800367e:	d0f9      	beq.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x1c>
			{}
			if(chs==1)
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d113      	bne.n	80036b0 <HAL_TIM_PeriodElapsedCallback+0x58>
			{
				sample[0] = audio[sam];
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a32      	ldr	r2, [pc, #200]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800368e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003692:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003694:	801a      	strh	r2, [r3, #0]
				sample[1] = audio[sam];
 8003696:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800369c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80036a2:	805a      	strh	r2, [r3, #2]
				sam++;
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e017      	b.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x88>
			}
			else if(chs==2)
 80036b0:	4b27      	ldr	r3, [pc, #156]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d113      	bne.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x88>
			{
				sample[0] = audio[sam];
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80036be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80036c4:	801a      	strh	r2, [r3, #0]
				sample[1] = audio[sam+1];
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a22      	ldr	r2, [pc, #136]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80036ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80036d4:	805a      	strh	r2, [r3, #2]
				sam+=2;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3302      	adds	r3, #2
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036de:	6013      	str	r3, [r2, #0]
			}
			if(sam>=SM)
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f64a 4243 	movw	r2, #44099	; 0xac43
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d913      	bls.n	8003714 <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				sam=0;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
				filesize-=SM;
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f5a3 432c 	sub.w	r3, r3, #44032	; 0xac00
 80036fa:	3b44      	subs	r3, #68	; 0x44
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80036fe:	6013      	str	r3, [r2, #0]
				fresult = readData(audio, &mfile,SM);
 8003700:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003704:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003706:	4814      	ldr	r0, [pc, #80]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003708:	f7ff ff80 	bl	800360c <readData>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003712:	701a      	strb	r2, [r3, #0]
			}
			if(sam<filesize)
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d206      	bcs.n	800372e <HAL_TIM_PeriodElapsedCallback+0xd6>
			{
				HAL_I2S_Transmit(&hi2s3, sample, 2, 100);
 8003720:	2364      	movs	r3, #100	; 0x64
 8003722:	2202      	movs	r2, #2
 8003724:	490d      	ldr	r1, [pc, #52]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003726:	4809      	ldr	r0, [pc, #36]	; (800374c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003728:	f002 fbd2 	bl	8005ed0 <HAL_I2S_Transmit>
				filesize -= 44100;
				readData(audio, &mfile,SM);
			}*/
		}
	}
}
 800372c:	e005      	b.n	800373a <HAL_TIM_PeriodElapsedCallback+0xe2>
				filesize = 0;
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
				closeFile(&mfile);
 8003734:	480a      	ldr	r0, [pc, #40]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003736:	f7ff feab 	bl	8003490 <closeFile>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40000800 	.word	0x40000800
 8003748:	20000278 	.word	0x20000278
 800374c:	20015d60 	.word	0x20015d60
 8003750:	20000004 	.word	0x20000004
 8003754:	20000274 	.word	0x20000274
 8003758:	20000474 	.word	0x20000474
 800375c:	20015d5c 	.word	0x20015d5c
 8003760:	20015da8 	.word	0x20015da8
 8003764:	20015cfc 	.word	0x20015cfc

08003768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376e:	f000 fc7d 	bl	800406c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003772:	f000 f84f 	bl	8003814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003776:	f000 f9cb 	bl	8003b10 <MX_GPIO_Init>
  MX_DMA_Init();
 800377a:	f000 f9a9 	bl	8003ad0 <MX_DMA_Init>
  MX_SPI1_Init();
 800377e:	f000 f925 	bl	80039cc <MX_SPI1_Init>
  MX_I2C1_Init();
 8003782:	f000 f8c7 	bl	8003914 <MX_I2C1_Init>
  MX_I2S3_Init();
 8003786:	f000 f8f3 	bl	8003970 <MX_I2S3_Init>
  MX_TIM4_Init();
 800378a:	f000 f955 	bl	8003a38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  char* ts = "au.wav";
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <main+0x84>)
 8003790:	607b      	str	r3, [r7, #4]




  fresult = fatInit(&FatFs);
 8003792:	4817      	ldr	r0, [pc, #92]	; (80037f0 <main+0x88>)
 8003794:	f7ff ff4e 	bl	8003634 <fatInit>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <main+0x8c>)
 800379e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1);
 80037a0:	2001      	movs	r0, #1
 80037a2:	f000 fcd5 	bl	8004150 <HAL_Delay>
  fresult = openFile(ts, &mfile);
 80037a6:	4914      	ldr	r1, [pc, #80]	; (80037f8 <main+0x90>)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fe1d 	bl	80033e8 <openFile>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <main+0x8c>)
 80037b4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f000 fcca 	bl	8004150 <HAL_Delay>
  filesize = setUp(&mfile, &hi2s3, &chs);
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <main+0x94>)
 80037be:	4910      	ldr	r1, [pc, #64]	; (8003800 <main+0x98>)
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <main+0x90>)
 80037c2:	f7ff fe74 	bl	80034ae <setUp>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <main+0x9c>)
 80037ca:	601a      	str	r2, [r3, #0]
  HAL_Delay(1);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f000 fcbf 	bl	8004150 <HAL_Delay>
    }
    fresult = f_close (&file);
    volatile int v1 = 1;*/


  	readData(audio,&mfile,SM);
 80037d2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <main+0x90>)
 80037d8:	480b      	ldr	r0, [pc, #44]	; (8003808 <main+0xa0>)
 80037da:	f7ff ff17 	bl	800360c <readData>
    CS43_Start(&hi2c1);
 80037de:	480b      	ldr	r0, [pc, #44]	; (800380c <main+0xa4>)
 80037e0:	f7fc fe84 	bl	80004ec <CS43_Start>



    HAL_TIM_Base_Start_IT(&htim4);
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <main+0xa8>)
 80037e6:	f004 f9b6 	bl	8007b56 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037ea:	e7fe      	b.n	80037ea <main+0x82>
 80037ec:	080083a8 	.word	0x080083a8
 80037f0:	20000044 	.word	0x20000044
 80037f4:	20015cfc 	.word	0x20015cfc
 80037f8:	20015da8 	.word	0x20015da8
 80037fc:	20000004 	.word	0x20000004
 8003800:	20015d60 	.word	0x20015d60
 8003804:	20000278 	.word	0x20000278
 8003808:	20000474 	.word	0x20000474
 800380c:	200002bc 	.word	0x200002bc
 8003810:	2000027c 	.word	0x2000027c

08003814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b098      	sub	sp, #96	; 0x60
 8003818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800381a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800381e:	2230      	movs	r2, #48	; 0x30
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f004 fd90 	bl	8008348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <SystemClock_Config+0xf8>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <SystemClock_Config+0xf8>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <SystemClock_Config+0xf8>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <SystemClock_Config+0xfc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <SystemClock_Config+0xfc>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <SystemClock_Config+0xfc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800387e:	2301      	movs	r3, #1
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003888:	2302      	movs	r3, #2
 800388a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800388c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003892:	2304      	movs	r3, #4
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003896:	23a8      	movs	r3, #168	; 0xa8
 8003898:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800389a:	2302      	movs	r3, #2
 800389c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800389e:	2304      	movs	r3, #4
 80038a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 ffaa 	bl	8006800 <HAL_RCC_OscConfig>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80038b2:	f000 f9cb 	bl	8003c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b6:	230f      	movs	r3, #15
 80038b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ba:	2302      	movs	r3, #2
 80038bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	2105      	movs	r1, #5
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 fa03 	bl	8006ce0 <HAL_RCC_ClockConfig>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80038e0:	f000 f9b4 	bl	8003c4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80038e4:	2301      	movs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80038ec:	2302      	movs	r3, #2
 80038ee:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 fbd1 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8003900:	f000 f9a4 	bl	8003c4c <Error_Handler>
  }
}
 8003904:	bf00      	nop
 8003906:	3760      	adds	r7, #96	; 0x60
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000

08003914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <MX_I2C1_Init+0x50>)
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <MX_I2C1_Init+0x54>)
 800391c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <MX_I2C1_Init+0x50>)
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <MX_I2C1_Init+0x58>)
 8003922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <MX_I2C1_Init+0x50>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <MX_I2C1_Init+0x50>)
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <MX_I2C1_Init+0x50>)
 8003932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <MX_I2C1_Init+0x50>)
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <MX_I2C1_Init+0x50>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <MX_I2C1_Init+0x50>)
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <MX_I2C1_Init+0x50>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003950:	4804      	ldr	r0, [pc, #16]	; (8003964 <MX_I2C1_Init+0x50>)
 8003952:	f001 f9cd 	bl	8004cf0 <HAL_I2C_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800395c:	f000 f976 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200002bc 	.word	0x200002bc
 8003968:	40005400 	.word	0x40005400
 800396c:	000186a0 	.word	0x000186a0

08003970 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <MX_I2S3_Init+0x54>)
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <MX_I2S3_Init+0x58>)
 8003978:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <MX_I2S3_Init+0x54>)
 800397c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003980:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <MX_I2S3_Init+0x54>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <MX_I2S3_Init+0x54>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <MX_I2S3_Init+0x54>)
 8003990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003994:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <MX_I2S3_Init+0x54>)
 8003998:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800399c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <MX_I2S3_Init+0x54>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <MX_I2S3_Init+0x54>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <MX_I2S3_Init+0x54>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80039b0:	4804      	ldr	r0, [pc, #16]	; (80039c4 <MX_I2S3_Init+0x54>)
 80039b2:	f002 f94d 	bl	8005c50 <HAL_I2S_Init>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80039bc:	f000 f946 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20015d60 	.word	0x20015d60
 80039c8:	40003c00 	.word	0x40003c00

080039cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039d2:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <MX_SPI1_Init+0x68>)
 80039d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a00:	2218      	movs	r2, #24
 8003a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a18:	220a      	movs	r2, #10
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a1e:	f003 fc7b 	bl	8007318 <HAL_SPI_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a28:	f000 f910 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20015d00 	.word	0x20015d00
 8003a34:	40013000 	.word	0x40013000

08003a38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <MX_TIM4_Init+0x94>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a5c:	2229      	movs	r2, #41	; 0x29
 8003a5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a78:	4813      	ldr	r0, [pc, #76]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a7a:	f004 f841 	bl	8007b00 <HAL_TIM_Base_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003a84:	f000 f8e2 	bl	8003c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	4619      	mov	r1, r3
 8003a94:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003a96:	f004 f98a 	bl	8007dae <HAL_TIM_ConfigClockSource>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003aa0:	f000 f8d4 	bl	8003c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aac:	463b      	mov	r3, r7
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_TIM4_Init+0x90>)
 8003ab2:	f004 fb95 	bl	80081e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003abc:	f000 f8c6 	bl	8003c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	2000027c 	.word	0x2000027c
 8003acc:	40000800 	.word	0x40000800

08003ad0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <MX_DMA_Init+0x3c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <MX_DMA_Init+0x3c>)
 8003ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <MX_DMA_Init+0x3c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	2010      	movs	r0, #16
 8003af8:	f000 fc27 	bl	800434a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003afc:	2010      	movs	r0, #16
 8003afe:	f000 fc40 	bl	8004382 <HAL_NVIC_EnableIRQ>

}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	4a3b      	ldr	r2, [pc, #236]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6313      	str	r3, [r2, #48]	; 0x30
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6e:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a2d      	ldr	r2, [pc, #180]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <MX_GPIO_Init+0x128>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f24f 0190 	movw	r1, #61584	; 0xf090
 8003bb8:	4820      	ldr	r0, [pc, #128]	; (8003c3c <MX_GPIO_Init+0x12c>)
 8003bba:	f001 f87f 	bl	8004cbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : K7_Pin K6_Pin */
  GPIO_InitStruct.Pin = K7_Pin|K6_Pin;
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	481b      	ldr	r0, [pc, #108]	; (8003c40 <MX_GPIO_Init+0x130>)
 8003bd2:	f000 fed9 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : K5_Pin K4_Pin K3_Pin K2_Pin 
                           K1_Pin K0_Pin */
  GPIO_InitStruct.Pin = K5_Pin|K4_Pin|K3_Pin|K2_Pin 
 8003bd6:	f647 0303 	movw	r3, #30723	; 0x7803
 8003bda:	617b      	str	r3, [r7, #20]
                          |K1_Pin|K0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be0:	2301      	movs	r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	4816      	ldr	r0, [pc, #88]	; (8003c44 <MX_GPIO_Init+0x134>)
 8003bec:	f000 fecc 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003bf0:	f24f 0390 	movw	r3, #61584	; 0xf090
 8003bf4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c02:	f107 0314 	add.w	r3, r7, #20
 8003c06:	4619      	mov	r1, r3
 8003c08:	480c      	ldr	r0, [pc, #48]	; (8003c3c <MX_GPIO_Init+0x12c>)
 8003c0a:	f000 febd 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c20:	2305      	movs	r3, #5
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4807      	ldr	r0, [pc, #28]	; (8003c48 <MX_GPIO_Init+0x138>)
 8003c2c:	f000 feac 	bl	8004988 <HAL_GPIO_Init>

}
 8003c30:	bf00      	nop
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020c00 	.word	0x40020c00
 8003c40:	40020000 	.word	0x40020000
 8003c44:	40020400 	.word	0x40020400
 8003c48:	40020800 	.word	0x40020800

08003c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_MspInit+0x4c>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <HAL_MspInit+0x4c>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c70:	6453      	str	r3, [r2, #68]	; 0x44
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_MspInit+0x4c>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_MspInit+0x4c>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <HAL_MspInit+0x4c>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_MspInit+0x4c>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800

08003cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <HAL_I2C_MspInit+0x84>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d12c      	bne.n	8003d28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_I2C_MspInit+0x88>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_I2C_MspInit+0x88>)
 8003cd8:	f043 0302 	orr.w	r3, r3, #2
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_I2C_MspInit+0x88>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003cea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cf0:	2312      	movs	r3, #18
 8003cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	4619      	mov	r1, r3
 8003d06:	480c      	ldr	r0, [pc, #48]	; (8003d38 <HAL_I2C_MspInit+0x8c>)
 8003d08:	f000 fe3e 	bl	8004988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_I2C_MspInit+0x88>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <HAL_I2C_MspInit+0x88>)
 8003d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_I2C_MspInit+0x88>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d28:	bf00      	nop
 8003d2a:	3728      	adds	r7, #40	; 0x28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40005400 	.word	0x40005400
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40020400 	.word	0x40020400

08003d3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a45      	ldr	r2, [pc, #276]	; (8003e70 <HAL_I2S_MspInit+0x134>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	f040 8084 	bne.w	8003e68 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	4a42      	ldr	r2, [pc, #264]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d70:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	4b3c      	ldr	r3, [pc, #240]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4a3b      	ldr	r2, [pc, #236]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8c:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6313      	str	r3, [r2, #48]	; 0x30
 8003da8:	4b32      	ldr	r3, [pc, #200]	; (8003e74 <HAL_I2S_MspInit+0x138>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003db4:	2310      	movs	r3, #16
 8003db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dc4:	2306      	movs	r3, #6
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4619      	mov	r1, r3
 8003dce:	482a      	ldr	r0, [pc, #168]	; (8003e78 <HAL_I2S_MspInit+0x13c>)
 8003dd0:	f000 fdda 	bl	8004988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003dd4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003de6:	2306      	movs	r3, #6
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	4619      	mov	r1, r3
 8003df0:	4822      	ldr	r0, [pc, #136]	; (8003e7c <HAL_I2S_MspInit+0x140>)
 8003df2:	f000 fdc9 	bl	8004988 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <HAL_I2S_MspInit+0x148>)
 8003dfa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e02:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e14:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e1c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e24:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e36:	2204      	movs	r2, #4
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003e4c:	480c      	ldr	r0, [pc, #48]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e4e:	f000 fab3 	bl	80043b8 <HAL_DMA_Init>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8003e58:	f7ff fef8 	bl	8003c4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
 8003e62:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <HAL_I2S_MspInit+0x144>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003e68:	bf00      	nop
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40003c00 	.word	0x40003c00
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40020000 	.word	0x40020000
 8003e7c:	40020800 	.word	0x40020800
 8003e80:	20000310 	.word	0x20000310
 8003e84:	40026088 	.word	0x40026088

08003e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_SPI_MspInit+0x84>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d12b      	bne.n	8003f02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_SPI_MspInit+0x88>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <HAL_SPI_MspInit+0x88>)
 8003eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_SPI_MspInit+0x88>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_SPI_MspInit+0x88>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	4a10      	ldr	r2, [pc, #64]	; (8003f10 <HAL_SPI_MspInit+0x88>)
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_SPI_MspInit+0x88>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003ee2:	2338      	movs	r3, #56	; 0x38
 8003ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ef2:	2305      	movs	r3, #5
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	4619      	mov	r1, r3
 8003efc:	4805      	ldr	r0, [pc, #20]	; (8003f14 <HAL_SPI_MspInit+0x8c>)
 8003efe:	f000 fd43 	bl	8004988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f02:	bf00      	nop
 8003f04:	3728      	adds	r7, #40	; 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40013000 	.word	0x40013000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40020400 	.word	0x40020400

08003f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_TIM_Base_MspInit+0x48>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d115      	bne.n	8003f56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_TIM_Base_MspInit+0x4c>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <HAL_TIM_Base_MspInit+0x4c>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_TIM_Base_MspInit+0x4c>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	201e      	movs	r0, #30
 8003f4c:	f000 f9fd 	bl	800434a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f50:	201e      	movs	r0, #30
 8003f52:	f000 fa16 	bl	8004382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40023800 	.word	0x40023800

08003f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f7a:	e7fe      	b.n	8003f7a <HardFault_Handler+0x4>

08003f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f80:	e7fe      	b.n	8003f80 <MemManage_Handler+0x4>

08003f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f86:	e7fe      	b.n	8003f86 <BusFault_Handler+0x4>

08003f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f8c:	e7fe      	b.n	8003f8c <UsageFault_Handler+0x4>

08003f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fbc:	f000 f8a8 	bl	8004110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <DMA1_Stream5_IRQHandler+0x10>)
 8003fca:	f000 faa3 	bl	8004514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000310 	.word	0x20000310

08003fd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fdc:	4802      	ldr	r0, [pc, #8]	; (8003fe8 <TIM4_IRQHandler+0x10>)
 8003fde:	f003 fdde 	bl	8007b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000027c 	.word	0x2000027c

08003fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <SystemInit+0x28>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <SystemInit+0x28>)
 8003ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SystemInit+0x28>)
 8004002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004006:	609a      	str	r2, [r3, #8]
#endif
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004050 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800401c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800401e:	e003      	b.n	8004028 <LoopCopyDataInit>

08004020 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004022:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004024:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004026:	3104      	adds	r1, #4

08004028 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004028:	480b      	ldr	r0, [pc, #44]	; (8004058 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800402c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800402e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004030:	d3f6      	bcc.n	8004020 <CopyDataInit>
  ldr  r2, =_sbss
 8004032:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004034:	e002      	b.n	800403c <LoopFillZerobss>

08004036 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004036:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004038:	f842 3b04 	str.w	r3, [r2], #4

0800403c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800403e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004040:	d3f9      	bcc.n	8004036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004042:	f7ff ffd3 	bl	8003fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004046:	f004 f95b 	bl	8008300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800404a:	f7ff fb8d 	bl	8003768 <main>
  bx  lr    
 800404e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004050:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004054:	080083e0 	.word	0x080083e0
  ldr  r0, =_sdata
 8004058:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800405c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8004060:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8004064:	20015fd4 	.word	0x20015fd4

08004068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004068:	e7fe      	b.n	8004068 <ADC_IRQHandler>
	...

0800406c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_Init+0x40>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <HAL_Init+0x40>)
 8004076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800407a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_Init+0x40>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <HAL_Init+0x40>)
 8004082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_Init+0x40>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_Init+0x40>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004094:	2003      	movs	r0, #3
 8004096:	f000 f94d 	bl	8004334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800409a:	2000      	movs	r0, #0
 800409c:	f000 f808 	bl	80040b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040a0:	f7ff fddc 	bl	8003c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00

080040b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_InitTick+0x54>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_InitTick+0x58>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f965 	bl	800439e <HAL_SYSTICK_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00e      	b.n	80040fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d80a      	bhi.n	80040fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e4:	2200      	movs	r2, #0
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f000 f92d 	bl	800434a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f0:	4a06      	ldr	r2, [pc, #24]	; (800410c <HAL_InitTick+0x5c>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000008 	.word	0x20000008
 8004108:	20000010 	.word	0x20000010
 800410c:	2000000c 	.word	0x2000000c

08004110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_IncTick+0x20>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_IncTick+0x24>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4413      	add	r3, r2
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_IncTick+0x24>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000010 	.word	0x20000010
 8004134:	20015fd0 	.word	0x20015fd0

08004138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return uwTick;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_GetTick+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20015fd0 	.word	0x20015fd0

08004150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff ffee 	bl	8004138 <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d005      	beq.n	8004176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_Delay+0x40>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004176:	bf00      	nop
 8004178:	f7ff ffde 	bl	8004138 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d8f7      	bhi.n	8004178 <HAL_Delay+0x28>
  {
  }
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000010 	.word	0x20000010

08004194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <__NVIC_SetPriorityGrouping+0x44>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041b0:	4013      	ands	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c6:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	60d3      	str	r3, [r2, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <__NVIC_GetPriorityGrouping+0x18>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 0307 	and.w	r3, r3, #7
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	2b00      	cmp	r3, #0
 8004208:	db0b      	blt.n	8004222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	f003 021f 	and.w	r2, r3, #31
 8004210:	4907      	ldr	r1, [pc, #28]	; (8004230 <__NVIC_EnableIRQ+0x38>)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2001      	movs	r0, #1
 800421a:	fa00 f202 	lsl.w	r2, r0, r2
 800421e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000e100 	.word	0xe000e100

08004234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	6039      	str	r1, [r7, #0]
 800423e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db0a      	blt.n	800425e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <__NVIC_SetPriority+0x4c>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	0112      	lsls	r2, r2, #4
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	440b      	add	r3, r1
 8004258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800425c:	e00a      	b.n	8004274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	4908      	ldr	r1, [pc, #32]	; (8004284 <__NVIC_SetPriority+0x50>)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	3b04      	subs	r3, #4
 800426c:	0112      	lsls	r2, r2, #4
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	440b      	add	r3, r1
 8004272:	761a      	strb	r2, [r3, #24]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000e100 	.word	0xe000e100
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f1c3 0307 	rsb	r3, r3, #7
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	bf28      	it	cs
 80042a6:	2304      	movcs	r3, #4
 80042a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d902      	bls.n	80042b8 <NVIC_EncodePriority+0x30>
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3b03      	subs	r3, #3
 80042b6:	e000      	b.n	80042ba <NVIC_EncodePriority+0x32>
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	401a      	ands	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d0:	f04f 31ff 	mov.w	r1, #4294967295
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43d9      	mvns	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e0:	4313      	orrs	r3, r2
         );
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3724      	adds	r7, #36	; 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004300:	d301      	bcc.n	8004306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004302:	2301      	movs	r3, #1
 8004304:	e00f      	b.n	8004326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <SysTick_Config+0x40>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430e:	210f      	movs	r1, #15
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	f7ff ff8e 	bl	8004234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <SysTick_Config+0x40>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <SysTick_Config+0x40>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000e010 	.word	0xe000e010

08004334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff29 	bl	8004194 <__NVIC_SetPriorityGrouping>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800435c:	f7ff ff3e 	bl	80041dc <__NVIC_GetPriorityGrouping>
 8004360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	6978      	ldr	r0, [r7, #20]
 8004368:	f7ff ff8e 	bl	8004288 <NVIC_EncodePriority>
 800436c:	4602      	mov	r2, r0
 800436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff5d 	bl	8004234 <__NVIC_SetPriority>
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff31 	bl	80041f8 <__NVIC_EnableIRQ>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ffa2 	bl	80042f0 <SysTick_Config>
 80043ac:	4603      	mov	r3, r0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043c4:	f7ff feb8 	bl	8004138 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e099      	b.n	8004508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f4:	e00f      	b.n	8004416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043f6:	f7ff fe9f 	bl	8004138 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b05      	cmp	r3, #5
 8004402:	d908      	bls.n	8004416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2203      	movs	r2, #3
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e078      	b.n	8004508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e8      	bne.n	80043f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4b38      	ldr	r3, [pc, #224]	; (8004510 <HAL_DMA_Init+0x158>)
 8004430:	4013      	ands	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b04      	cmp	r3, #4
 800446e:	d107      	bne.n	8004480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	4313      	orrs	r3, r2
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d117      	bne.n	80044da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f9e9 	bl	8004894 <DMA_CheckFifoParam>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2240      	movs	r2, #64	; 0x40
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044d6:	2301      	movs	r3, #1
 80044d8:	e016      	b.n	8004508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9a0 	bl	8004828 <DMA_CalcBaseAndBitshift>
 80044e8:	4603      	mov	r3, r0
 80044ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	223f      	movs	r2, #63	; 0x3f
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	f010803f 	.word	0xf010803f

08004514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004520:	4b92      	ldr	r3, [pc, #584]	; (800476c <HAL_DMA_IRQHandler+0x258>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a92      	ldr	r2, [pc, #584]	; (8004770 <HAL_DMA_IRQHandler+0x25c>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0a9b      	lsrs	r3, r3, #10
 800452c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	2208      	movs	r2, #8
 8004540:	409a      	lsls	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4013      	ands	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01a      	beq.n	8004580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	2208      	movs	r2, #8
 800456e:	409a      	lsls	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	2201      	movs	r2, #1
 80045a4:	409a      	lsls	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	2204      	movs	r2, #4
 80045bc:	409a      	lsls	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d012      	beq.n	80045ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	2204      	movs	r2, #4
 80045da:	409a      	lsls	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0204 	orr.w	r2, r3, #4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d043      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03c      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	2210      	movs	r2, #16
 8004610:	409a      	lsls	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d024      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
 8004642:	e01f      	b.n	8004684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
 8004654:	e016      	b.n	8004684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0208 	bic.w	r2, r2, #8
 8004672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2220      	movs	r2, #32
 800468a:	409a      	lsls	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 808e 	beq.w	80047b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2220      	movs	r2, #32
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d136      	bne.n	800472c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0216 	bic.w	r2, r2, #22
 80046cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <HAL_DMA_IRQHandler+0x1da>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0208 	bic.w	r2, r2, #8
 80046fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	223f      	movs	r2, #63	; 0x3f
 8004704:	409a      	lsls	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	2b00      	cmp	r3, #0
 8004720:	d07d      	beq.n	800481e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	4798      	blx	r3
        }
        return;
 800472a:	e078      	b.n	800481e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01c      	beq.n	8004774 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	2b00      	cmp	r3, #0
 800474e:	d030      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
 8004758:	e02b      	b.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
 800476a:	e022      	b.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
 800476c:	20000008 	.word	0x20000008
 8004770:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0210 	bic.w	r2, r2, #16
 8004790:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d032      	beq.n	8004820 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d022      	beq.n	800480c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2205      	movs	r2, #5
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d307      	bcc.n	80047fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f2      	bne.n	80047de <HAL_DMA_IRQHandler+0x2ca>
 80047f8:	e000      	b.n	80047fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
 800481c:	e000      	b.n	8004820 <HAL_DMA_IRQHandler+0x30c>
        return;
 800481e:	bf00      	nop
    }
  }
}
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	3b10      	subs	r3, #16
 8004838:	4a14      	ldr	r2, [pc, #80]	; (800488c <DMA_CalcBaseAndBitshift+0x64>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004842:	4a13      	ldr	r2, [pc, #76]	; (8004890 <DMA_CalcBaseAndBitshift+0x68>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d909      	bls.n	800486a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	659a      	str	r2, [r3, #88]	; 0x58
 8004868:	e007      	b.n	800487a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	aaaaaaab 	.word	0xaaaaaaab
 8004890:	080083c8 	.word	0x080083c8

08004894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11f      	bne.n	80048ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d855      	bhi.n	8004960 <DMA_CheckFifoParam+0xcc>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <DMA_CheckFifoParam+0x28>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048df 	.word	0x080048df
 80048c4:	080048cd 	.word	0x080048cd
 80048c8:	08004961 	.word	0x08004961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d045      	beq.n	8004964 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048dc:	e042      	b.n	8004964 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e6:	d13f      	bne.n	8004968 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ec:	e03c      	b.n	8004968 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f6:	d121      	bne.n	800493c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d836      	bhi.n	800496c <DMA_CheckFifoParam+0xd8>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <DMA_CheckFifoParam+0x70>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004915 	.word	0x08004915
 8004908:	0800491b 	.word	0x0800491b
 800490c:	08004915 	.word	0x08004915
 8004910:	0800492d 	.word	0x0800492d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e02f      	b.n	800497a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d024      	beq.n	8004970 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800492a:	e021      	b.n	8004970 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004934:	d11e      	bne.n	8004974 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800493a:	e01b      	b.n	8004974 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d902      	bls.n	8004948 <DMA_CheckFifoParam+0xb4>
 8004942:	2b03      	cmp	r3, #3
 8004944:	d003      	beq.n	800494e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004946:	e018      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      break;
 800494c:	e015      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00e      	beq.n	8004978 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      break;
 800495e:	e00b      	b.n	8004978 <DMA_CheckFifoParam+0xe4>
      break;
 8004960:	bf00      	nop
 8004962:	e00a      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      break;
 8004964:	bf00      	nop
 8004966:	e008      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      break;
 8004968:	bf00      	nop
 800496a:	e006      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      break;
 800496c:	bf00      	nop
 800496e:	e004      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      break;
 8004970:	bf00      	nop
 8004972:	e002      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      break;   
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <DMA_CheckFifoParam+0xe6>
      break;
 8004978:	bf00      	nop
    }
  } 
  
  return status; 
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	; 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	e16b      	b.n	8004c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a4:	2201      	movs	r2, #1
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	429a      	cmp	r2, r3
 80049be:	f040 815a 	bne.w	8004c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d00b      	beq.n	80049e2 <HAL_GPIO_Init+0x5a>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d007      	beq.n	80049e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049d6:	2b11      	cmp	r3, #17
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b12      	cmp	r3, #18
 80049e0:	d130      	bne.n	8004a44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0201 	and.w	r2, r3, #1
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	2203      	movs	r2, #3
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0xfc>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b12      	cmp	r3, #18
 8004a82:	d123      	bne.n	8004acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	08da      	lsrs	r2, r3, #3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3208      	adds	r2, #8
 8004a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	220f      	movs	r2, #15
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	08da      	lsrs	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3208      	adds	r2, #8
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0203 	and.w	r2, r3, #3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80b4 	beq.w	8004c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	4b5f      	ldr	r3, [pc, #380]	; (8004c90 <HAL_GPIO_Init+0x308>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	4a5e      	ldr	r2, [pc, #376]	; (8004c90 <HAL_GPIO_Init+0x308>)
 8004b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	; (8004c90 <HAL_GPIO_Init+0x308>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b2a:	4a5a      	ldr	r2, [pc, #360]	; (8004c94 <HAL_GPIO_Init+0x30c>)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	3302      	adds	r3, #2
 8004b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	220f      	movs	r2, #15
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	; (8004c98 <HAL_GPIO_Init+0x310>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02b      	beq.n	8004bae <HAL_GPIO_Init+0x226>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	; (8004c9c <HAL_GPIO_Init+0x314>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d025      	beq.n	8004baa <HAL_GPIO_Init+0x222>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	; (8004ca0 <HAL_GPIO_Init+0x318>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01f      	beq.n	8004ba6 <HAL_GPIO_Init+0x21e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <HAL_GPIO_Init+0x31c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d019      	beq.n	8004ba2 <HAL_GPIO_Init+0x21a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4d      	ldr	r2, [pc, #308]	; (8004ca8 <HAL_GPIO_Init+0x320>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_Init+0x216>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a4c      	ldr	r2, [pc, #304]	; (8004cac <HAL_GPIO_Init+0x324>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00d      	beq.n	8004b9a <HAL_GPIO_Init+0x212>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_GPIO_Init+0x328>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <HAL_GPIO_Init+0x20e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_GPIO_Init+0x32c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_GPIO_Init+0x20a>
 8004b8e:	2307      	movs	r3, #7
 8004b90:	e00e      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b92:	2308      	movs	r3, #8
 8004b94:	e00c      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b96:	2306      	movs	r3, #6
 8004b98:	e00a      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b9a:	2305      	movs	r3, #5
 8004b9c:	e008      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	e006      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e004      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e002      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <HAL_GPIO_Init+0x228>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	f002 0203 	and.w	r2, r2, #3
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	4093      	lsls	r3, r2
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc0:	4934      	ldr	r1, [pc, #208]	; (8004c94 <HAL_GPIO_Init+0x30c>)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bce:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c22:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <HAL_GPIO_Init+0x330>)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	f67f ae90 	bls.w	80049a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	3724      	adds	r7, #36	; 0x24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40013800 	.word	0x40013800
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	40020800 	.word	0x40020800
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40021400 	.word	0x40021400
 8004cb0:	40021800 	.word	0x40021800
 8004cb4:	40021c00 	.word	0x40021c00
 8004cb8:	40013c00 	.word	0x40013c00

08004cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ccc:	787b      	ldrb	r3, [r7, #1]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cd8:	e003      	b.n	8004ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	041a      	lsls	r2, r3, #16
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	619a      	str	r2, [r3, #24]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e11f      	b.n	8004f42 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe ffc8 	bl	8003cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	; 0x24
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d54:	f002 f98e 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 8004d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4a7b      	ldr	r2, [pc, #492]	; (8004f4c <HAL_I2C_Init+0x25c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d807      	bhi.n	8004d74 <HAL_I2C_Init+0x84>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_I2C_Init+0x260>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf94      	ite	ls
 8004d6c:	2301      	movls	r3, #1
 8004d6e:	2300      	movhi	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e006      	b.n	8004d82 <HAL_I2C_Init+0x92>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a77      	ldr	r2, [pc, #476]	; (8004f54 <HAL_I2C_Init+0x264>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bf94      	ite	ls
 8004d7c:	2301      	movls	r3, #1
 8004d7e:	2300      	movhi	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0db      	b.n	8004f42 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a72      	ldr	r2, [pc, #456]	; (8004f58 <HAL_I2C_Init+0x268>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	0c9b      	lsrs	r3, r3, #18
 8004d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <HAL_I2C_Init+0x25c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d802      	bhi.n	8004dc4 <HAL_I2C_Init+0xd4>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	e009      	b.n	8004dd8 <HAL_I2C_Init+0xe8>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	4a63      	ldr	r2, [pc, #396]	; (8004f5c <HAL_I2C_Init+0x26c>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4956      	ldr	r1, [pc, #344]	; (8004f4c <HAL_I2C_Init+0x25c>)
 8004df4:	428b      	cmp	r3, r1
 8004df6:	d80d      	bhi.n	8004e14 <HAL_I2C_Init+0x124>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1e59      	subs	r1, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e06:	3301      	adds	r3, #1
 8004e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	bf38      	it	cc
 8004e10:	2304      	movcc	r3, #4
 8004e12:	e04f      	b.n	8004eb4 <HAL_I2C_Init+0x1c4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d111      	bne.n	8004e40 <HAL_I2C_Init+0x150>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1e58      	subs	r0, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	440b      	add	r3, r1
 8004e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e012      	b.n	8004e66 <HAL_I2C_Init+0x176>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e58      	subs	r0, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	0099      	lsls	r1, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e56:	3301      	adds	r3, #1
 8004e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Init+0x17e>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e022      	b.n	8004eb4 <HAL_I2C_Init+0x1c4>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10e      	bne.n	8004e94 <HAL_I2C_Init+0x1a4>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1e58      	subs	r0, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	440b      	add	r3, r1
 8004e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e92:	e00f      	b.n	8004eb4 <HAL_I2C_Init+0x1c4>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1e58      	subs	r0, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	0099      	lsls	r1, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	6809      	ldr	r1, [r1, #0]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69da      	ldr	r2, [r3, #28]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6911      	ldr	r1, [r2, #16]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68d2      	ldr	r2, [r2, #12]
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	000186a0 	.word	0x000186a0
 8004f50:	001e847f 	.word	0x001e847f
 8004f54:	003d08ff 	.word	0x003d08ff
 8004f58:	431bde83 	.word	0x431bde83
 8004f5c:	10624dd3 	.word	0x10624dd3

08004f60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	817b      	strh	r3, [r7, #10]
 8004f72:	460b      	mov	r3, r1
 8004f74:	813b      	strh	r3, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f7a:	f7ff f8dd 	bl	8004138 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	f040 80d9 	bne.w	8005140 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	2319      	movs	r3, #25
 8004f94:	2201      	movs	r2, #1
 8004f96:	496d      	ldr	r1, [pc, #436]	; (800514c <HAL_I2C_Mem_Write+0x1ec>)
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fc7b 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0cc      	b.n	8005142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Mem_Write+0x56>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e0c5      	b.n	8005142 <HAL_I2C_Mem_Write+0x1e2>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d007      	beq.n	8004fdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2221      	movs	r2, #33	; 0x21
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a3a      	ldr	r2, [r7, #32]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4a4d      	ldr	r2, [pc, #308]	; (8005150 <HAL_I2C_Mem_Write+0x1f0>)
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800501e:	88f8      	ldrh	r0, [r7, #6]
 8005020:	893a      	ldrh	r2, [r7, #8]
 8005022:	8979      	ldrh	r1, [r7, #10]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	4603      	mov	r3, r0
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fab6 	bl	80055a0 <I2C_RequestMemoryWrite>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d052      	beq.n	80050e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e081      	b.n	8005142 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fcfc 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b04      	cmp	r3, #4
 8005054:	d107      	bne.n	8005066 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005064:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e06b      	b.n	8005142 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d11b      	bne.n	80050e0 <HAL_I2C_Mem_Write+0x180>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d017      	beq.n	80050e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1aa      	bne.n	800503e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fce8 	bl	8005ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00d      	beq.n	8005114 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d107      	bne.n	8005110 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e016      	b.n	8005142 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	00100002 	.word	0x00100002
 8005150:	ffff0000 	.word	0xffff0000

08005154 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	461a      	mov	r2, r3
 8005162:	4603      	mov	r3, r0
 8005164:	817b      	strh	r3, [r7, #10]
 8005166:	460b      	mov	r3, r1
 8005168:	813b      	strh	r3, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800516e:	f7fe ffe3 	bl	8004138 <HAL_GetTick>
 8005172:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b20      	cmp	r3, #32
 800517e:	f040 8208 	bne.w	8005592 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2319      	movs	r3, #25
 8005188:	2201      	movs	r2, #1
 800518a:	497b      	ldr	r1, [pc, #492]	; (8005378 <HAL_I2C_Mem_Read+0x224>)
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fb81 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005198:	2302      	movs	r3, #2
 800519a:	e1fb      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_I2C_Mem_Read+0x56>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e1f4      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d007      	beq.n	80051d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2222      	movs	r2, #34	; 0x22
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2240      	movs	r2, #64	; 0x40
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a5b      	ldr	r2, [pc, #364]	; (800537c <HAL_I2C_Mem_Read+0x228>)
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005212:	88f8      	ldrh	r0, [r7, #6]
 8005214:	893a      	ldrh	r2, [r7, #8]
 8005216:	8979      	ldrh	r1, [r7, #10]
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	4603      	mov	r3, r0
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fa50 	bl	80056c8 <I2C_RequestMemoryRead>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1b0      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d113      	bne.n	8005262 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523a:	2300      	movs	r3, #0
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e184      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	2b01      	cmp	r3, #1
 8005268:	d11b      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e164      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d11b      	bne.n	80052e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	e144      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052f8:	e138      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	2b03      	cmp	r3, #3
 8005300:	f200 80f1 	bhi.w	80054e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	2b01      	cmp	r3, #1
 800530a:	d123      	bne.n	8005354 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fc17 	bl	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e139      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005352:	e10b      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	2b02      	cmp	r3, #2
 800535a:	d14e      	bne.n	80053fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	2200      	movs	r2, #0
 8005364:	4906      	ldr	r1, [pc, #24]	; (8005380 <HAL_I2C_Mem_Read+0x22c>)
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fa94 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e10e      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
 8005376:	bf00      	nop
 8005378:	00100002 	.word	0x00100002
 800537c:	ffff0000 	.word	0xffff0000
 8005380:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053f8:	e0b8      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2200      	movs	r2, #0
 8005402:	4966      	ldr	r1, [pc, #408]	; (800559c <HAL_I2C_Mem_Read+0x448>)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fa45 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0bf      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	2200      	movs	r2, #0
 800545e:	494f      	ldr	r1, [pc, #316]	; (800559c <HAL_I2C_Mem_Read+0x448>)
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fa17 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e091      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e4:	e042      	b.n	800556c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fb2a 	bl	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e04c      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d118      	bne.n	800556c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	f47f aec2 	bne.w	80052fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	00010004 	.word	0x00010004

080055a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	817b      	strh	r3, [r7, #10]
 80055b2:	460b      	mov	r3, r1
 80055b4:	813b      	strh	r3, [r7, #8]
 80055b6:	4613      	mov	r3, r2
 80055b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f95c 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e05f      	b.n	80056bc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055fc:	897b      	ldrh	r3, [r7, #10]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800560a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	6a3a      	ldr	r2, [r7, #32]
 8005610:	492c      	ldr	r1, [pc, #176]	; (80056c4 <I2C_RequestMemoryWrite+0x124>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f995 	bl	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e04c      	b.n	80056bc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	6a39      	ldr	r1, [r7, #32]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f9ff 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	2b04      	cmp	r3, #4
 800564e:	d107      	bne.n	8005660 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e02b      	b.n	80056bc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800566a:	893b      	ldrh	r3, [r7, #8]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]
 8005674:	e021      	b.n	80056ba <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005676:	893b      	ldrh	r3, [r7, #8]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	b29b      	uxth	r3, r3
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005686:	6a39      	ldr	r1, [r7, #32]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f9d9 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	2b04      	cmp	r3, #4
 800569a:	d107      	bne.n	80056ac <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e005      	b.n	80056bc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b0:	893b      	ldrh	r3, [r7, #8]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	00010002 	.word	0x00010002

080056c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	460b      	mov	r3, r1
 80056dc:	813b      	strh	r3, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	2200      	movs	r2, #0
 800570a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f8c0 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0a9      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005734:	897b      	ldrh	r3, [r7, #10]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005742:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	6a3a      	ldr	r2, [r7, #32]
 8005748:	4951      	ldr	r1, [pc, #324]	; (8005890 <I2C_RequestMemoryRead+0x1c8>)
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f8f9 	bl	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e096      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005772:	6a39      	ldr	r1, [r7, #32]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f963 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b04      	cmp	r3, #4
 8005786:	d107      	bne.n	8005798 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e075      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d105      	bne.n	80057ae <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057a2:	893b      	ldrh	r3, [r7, #8]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	611a      	str	r2, [r3, #16]
 80057ac:	e021      	b.n	80057f2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	6a39      	ldr	r1, [r7, #32]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f93d 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d107      	bne.n	80057e4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e04f      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057e8:	893b      	ldrh	r3, [r7, #8]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f4:	6a39      	ldr	r1, [r7, #32]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f922 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	2b04      	cmp	r3, #4
 8005808:	d107      	bne.n	800581a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e034      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800582c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	2200      	movs	r2, #0
 8005836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f82a 	bl	8005894 <I2C_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e013      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	4906      	ldr	r1, [pc, #24]	; (8005890 <I2C_RequestMemoryRead+0x1c8>)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f863 	bl	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	00010002 	.word	0x00010002

08005894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a4:	e025      	b.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d021      	beq.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ae:	f7fe fc43 	bl	8004138 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d116      	bne.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e023      	b.n	800593a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	0c1b      	lsrs	r3, r3, #16
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10d      	bne.n	8005918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	43da      	mvns	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4013      	ands	r3, r2
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	e00c      	b.n	8005932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	43da      	mvns	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d0b6      	beq.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005950:	e051      	b.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005960:	d123      	bne.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800597a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e046      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d021      	beq.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fe fbc1 	bl	8004138 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d116      	bne.n	80059f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e020      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10c      	bne.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	43da      	mvns	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	e00b      	b.n	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	43da      	mvns	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4013      	ands	r3, r2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d18d      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a4c:	e02d      	b.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f8ce 	bl	8005bf0 <I2C_IsAcknowledgeFailed>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e02d      	b.n	8005aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d021      	beq.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fe fb67 	bl	8004138 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e007      	b.n	8005aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d1ca      	bne.n	8005a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ace:	e02d      	b.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f88d 	bl	8005bf0 <I2C_IsAcknowledgeFailed>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e02d      	b.n	8005b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d021      	beq.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae8:	f7fe fb26 	bl	8004138 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d116      	bne.n	8005b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e007      	b.n	8005b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d1ca      	bne.n	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b50:	e042      	b.n	8005bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d119      	bne.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e029      	b.n	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b94:	f7fe fad0 	bl	8004138 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d116      	bne.n	8005bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e007      	b.n	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d1b5      	bne.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c06:	d11b      	bne.n	8005c40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	f043 0204 	orr.w	r2, r3, #4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e128      	b.n	8005eb4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a90      	ldr	r2, [pc, #576]	; (8005ebc <HAL_I2S_Init+0x26c>)
 8005c7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fe f85d 	bl	8003d3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c98:	f023 030f 	bic.w	r3, r3, #15
 8005c9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d060      	beq.n	8005d70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e001      	b.n	8005cc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d802      	bhi.n	8005cce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f001 fac6 	bl	8007260 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cd4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cde:	d125      	bne.n	8005d2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	3305      	adds	r3, #5
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	e01f      	b.n	8005d4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	3305      	adds	r3, #5
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e00e      	b.n	8005d4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	3305      	adds	r3, #5
 8005d48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4a5c      	ldr	r2, [pc, #368]	; (8005ec0 <HAL_I2S_Init+0x270>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e003      	b.n	8005d78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d70:	2302      	movs	r3, #2
 8005d72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d902      	bls.n	8005d84 <HAL_I2S_Init+0x134>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2bff      	cmp	r3, #255	; 0xff
 8005d82:	d907      	bls.n	8005d94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e08f      	b.n	8005eb4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	ea42 0103 	orr.w	r1, r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005db2:	f023 030f 	bic.w	r3, r3, #15
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6851      	ldr	r1, [r2, #4]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68d2      	ldr	r2, [r2, #12]
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6992      	ldr	r2, [r2, #24]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d161      	bne.n	8005ea4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a38      	ldr	r2, [pc, #224]	; (8005ec4 <HAL_I2S_Init+0x274>)
 8005de4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a37      	ldr	r2, [pc, #220]	; (8005ec8 <HAL_I2S_Init+0x278>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d101      	bne.n	8005df4 <HAL_I2S_Init+0x1a4>
 8005df0:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_I2S_Init+0x27c>)
 8005df2:	e001      	b.n	8005df8 <HAL_I2S_Init+0x1a8>
 8005df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4932      	ldr	r1, [pc, #200]	; (8005ec8 <HAL_I2S_Init+0x278>)
 8005e00:	428a      	cmp	r2, r1
 8005e02:	d101      	bne.n	8005e08 <HAL_I2S_Init+0x1b8>
 8005e04:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <HAL_I2S_Init+0x27c>)
 8005e06:	e001      	b.n	8005e0c <HAL_I2S_Init+0x1bc>
 8005e08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005e0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e10:	f023 030f 	bic.w	r3, r3, #15
 8005e14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <HAL_I2S_Init+0x278>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_I2S_Init+0x1d4>
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <HAL_I2S_Init+0x27c>)
 8005e22:	e001      	b.n	8005e28 <HAL_I2S_Init+0x1d8>
 8005e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e28:	2202      	movs	r2, #2
 8005e2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <HAL_I2S_Init+0x278>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_I2S_Init+0x1ea>
 8005e36:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <HAL_I2S_Init+0x27c>)
 8005e38:	e001      	b.n	8005e3e <HAL_I2S_Init+0x1ee>
 8005e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4a:	d003      	beq.n	8005e54 <HAL_I2S_Init+0x204>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e001      	b.n	8005e60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005e76:	4303      	orrs	r3, r0
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a0d      	ldr	r2, [pc, #52]	; (8005ec8 <HAL_I2S_Init+0x278>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_I2S_Init+0x24c>
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_I2S_Init+0x27c>)
 8005e9a:	e001      	b.n	8005ea0 <HAL_I2S_Init+0x250>
 8005e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea0:	897a      	ldrh	r2, [r7, #10]
 8005ea2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	080061c5 	.word	0x080061c5
 8005ec0:	cccccccd 	.word	0xcccccccd
 8005ec4:	0800634d 	.word	0x0800634d
 8005ec8:	40003800 	.word	0x40003800
 8005ecc:	40003400 	.word	0x40003400

08005ed0 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_I2S_Transmit+0x1c>
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0dc      	b.n	80060aa <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_I2S_Transmit+0x30>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e0d4      	b.n	80060aa <HAL_I2S_Transmit+0x1da>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d005      	beq.n	8005f20 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0c4      	b.n	80060aa <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2203      	movs	r2, #3
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d002      	beq.n	8005f4c <HAL_I2S_Transmit+0x7c>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	d10a      	bne.n	8005f62 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f60:	e005      	b.n	8005f6e <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d007      	beq.n	8005f96 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f94:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	2102      	movs	r1, #2
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f99b 	bl	80062d8 <I2S_WaitFlagStateUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d04e      	beq.n	8006046 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fac:	f043 0201 	orr.w	r2, r3, #1
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e070      	b.n	80060aa <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f970 	bl	80062d8 <I2S_WaitFlagStateUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00f      	beq.n	800601e <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e045      	b.n	80060aa <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d10c      	bne.n	8006046 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	f043 0204 	orr.w	r2, r3, #4
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1bb      	bne.n	8005fc8 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006064:	d118      	bne.n	8006098 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2200      	movs	r2, #0
 800606a:	2180      	movs	r1, #128	; 0x80
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f933 	bl	80062d8 <I2S_WaitFlagStateUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e008      	b.n	80060aa <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fc:	b2db      	uxtb	r3, r3
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10e      	bne.n	800615e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800614e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff ffaa 	bl	80060b2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	b292      	uxth	r2, r2
 800617a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10e      	bne.n	80061bc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ff85 	bl	80060c6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d13a      	bne.n	8006256 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d109      	bne.n	80061fe <I2S_IRQHandler+0x3a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d102      	bne.n	80061fe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ffb4 	bl	8006166 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d126      	bne.n	8006256 <I2S_IRQHandler+0x92>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d11f      	bne.n	8006256 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006224:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	f043 0202 	orr.w	r2, r3, #2
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff42 	bl	80060da <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b03      	cmp	r3, #3
 8006260:	d136      	bne.n	80062d0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d109      	bne.n	8006280 <I2S_IRQHandler+0xbc>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d102      	bne.n	8006280 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff ff45 	bl	800610a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b08      	cmp	r3, #8
 8006288:	d122      	bne.n	80062d0 <I2S_IRQHandler+0x10c>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b20      	cmp	r3, #32
 8006296:	d11b      	bne.n	80062d0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062a6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff ff05 	bl	80060da <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062d0:	bf00      	nop
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e8:	f7fd ff26 	bl	8004138 <HAL_GetTick>
 80062ec:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80062ee:	e018      	b.n	8006322 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d014      	beq.n	8006322 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80062f8:	f7fd ff1e 	bl	8004138 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d902      	bls.n	800630e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e00f      	b.n	8006342 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d1d7      	bne.n	80062f0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4aa2      	ldr	r2, [pc, #648]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006366:	4ba2      	ldr	r3, [pc, #648]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006368:	e001      	b.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800636a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a9b      	ldr	r2, [pc, #620]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d101      	bne.n	8006388 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006384:	4b9a      	ldr	r3, [pc, #616]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006386:	e001      	b.n	800638c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006398:	d004      	beq.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 8099 	bne.w	80064d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d107      	bne.n	80063be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f925 	bl	8006608 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d107      	bne.n	80063d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f9c8 	bl	8006768 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d13a      	bne.n	8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d035      	beq.n	8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7e      	ldr	r2, [pc, #504]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063f6:	4b7e      	ldr	r3, [pc, #504]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063f8:	e001      	b.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4979      	ldr	r1, [pc, #484]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006406:	428b      	cmp	r3, r1
 8006408:	d101      	bne.n	800640e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800640a:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800640c:	e001      	b.n	8006412 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800640e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006416:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006426:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f043 0202 	orr.w	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff fe41 	bl	80060da <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b08      	cmp	r3, #8
 8006460:	f040 80be 	bne.w	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80b8 	beq.w	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800647e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a59      	ldr	r2, [pc, #356]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800648a:	4b59      	ldr	r3, [pc, #356]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800648c:	e001      	b.n	8006492 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800648e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4954      	ldr	r1, [pc, #336]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800649a:	428b      	cmp	r3, r1
 800649c:	d101      	bne.n	80064a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800649e:	4b54      	ldr	r3, [pc, #336]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064a0:	e001      	b.n	80064a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064ac:	2300      	movs	r3, #0
 80064ae:	60bb      	str	r3, [r7, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	f043 0204 	orr.w	r2, r3, #4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fe03 	bl	80060da <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064d4:	e084      	b.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d107      	bne.n	80064f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8be 	bl	800666c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d107      	bne.n	800650a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f8fd 	bl	8006704 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d12f      	bne.n	8006574 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d02a      	beq.n	8006574 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800652c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d101      	bne.n	800653c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006538:	4b2d      	ldr	r3, [pc, #180]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800653a:	e001      	b.n	8006540 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800653c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4929      	ldr	r1, [pc, #164]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006548:	428b      	cmp	r3, r1
 800654a:	d101      	bne.n	8006550 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800654c:	4b28      	ldr	r3, [pc, #160]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800654e:	e001      	b.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006554:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006558:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fdb3 	bl	80060da <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b08      	cmp	r3, #8
 800657c:	d131      	bne.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d02c      	beq.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d101      	bne.n	8006596 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006594:	e001      	b.n	800659a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4912      	ldr	r1, [pc, #72]	; (80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065a2:	428b      	cmp	r3, r1
 80065a4:	d101      	bne.n	80065aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065a8:	e001      	b.n	80065ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80065aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d0:	f043 0204 	orr.w	r2, r3, #4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fd7e 	bl	80060da <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065de:	e000      	b.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065e0:	bf00      	nop
}
 80065e2:	bf00      	nop
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40003800 	.word	0x40003800
 80065f0:	40003400 	.word	0x40003400

080065f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	1c99      	adds	r1, r3, #2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6251      	str	r1, [r2, #36]	; 0x24
 800661a:	881a      	ldrh	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d113      	bne.n	8006662 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006648:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ffc9 	bl	80065f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c99      	adds	r1, r3, #2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6251      	str	r1, [r2, #36]	; 0x24
 800667e:	8819      	ldrh	r1, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <I2SEx_TxISR_I2SExt+0x90>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d101      	bne.n	800668e <I2SEx_TxISR_I2SExt+0x22>
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <I2SEx_TxISR_I2SExt+0x94>)
 800668c:	e001      	b.n	8006692 <I2SEx_TxISR_I2SExt+0x26>
 800668e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006692:	460a      	mov	r2, r1
 8006694:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d121      	bne.n	80066f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a12      	ldr	r2, [pc, #72]	; (80066fc <I2SEx_TxISR_I2SExt+0x90>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d101      	bne.n	80066bc <I2SEx_TxISR_I2SExt+0x50>
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <I2SEx_TxISR_I2SExt+0x94>)
 80066ba:	e001      	b.n	80066c0 <I2SEx_TxISR_I2SExt+0x54>
 80066bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	490d      	ldr	r1, [pc, #52]	; (80066fc <I2SEx_TxISR_I2SExt+0x90>)
 80066c8:	428b      	cmp	r3, r1
 80066ca:	d101      	bne.n	80066d0 <I2SEx_TxISR_I2SExt+0x64>
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <I2SEx_TxISR_I2SExt+0x94>)
 80066ce:	e001      	b.n	80066d4 <I2SEx_TxISR_I2SExt+0x68>
 80066d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff81 	bl	80065f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40003800 	.word	0x40003800
 8006700:	40003400 	.word	0x40003400

08006704 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68d8      	ldr	r0, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	1c99      	adds	r1, r3, #2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800671c:	b282      	uxth	r2, r0
 800671e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d113      	bne.n	8006760 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006746:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ff4a 	bl	80065f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <I2SEx_RxISR_I2SExt+0x90>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <I2SEx_RxISR_I2SExt+0x16>
 800677a:	4b20      	ldr	r3, [pc, #128]	; (80067fc <I2SEx_RxISR_I2SExt+0x94>)
 800677c:	e001      	b.n	8006782 <I2SEx_RxISR_I2SExt+0x1a>
 800677e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006782:	68d8      	ldr	r0, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	1c99      	adds	r1, r3, #2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800678e:	b282      	uxth	r2, r0
 8006790:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d121      	bne.n	80067ee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <I2SEx_RxISR_I2SExt+0x90>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <I2SEx_RxISR_I2SExt+0x50>
 80067b4:	4b11      	ldr	r3, [pc, #68]	; (80067fc <I2SEx_RxISR_I2SExt+0x94>)
 80067b6:	e001      	b.n	80067bc <I2SEx_RxISR_I2SExt+0x54>
 80067b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	490d      	ldr	r1, [pc, #52]	; (80067f8 <I2SEx_RxISR_I2SExt+0x90>)
 80067c4:	428b      	cmp	r3, r1
 80067c6:	d101      	bne.n	80067cc <I2SEx_RxISR_I2SExt+0x64>
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <I2SEx_RxISR_I2SExt+0x94>)
 80067ca:	e001      	b.n	80067d0 <I2SEx_RxISR_I2SExt+0x68>
 80067cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067d4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff03 	bl	80065f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40003800 	.word	0x40003800
 80067fc:	40003400 	.word	0x40003400

08006800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e25b      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d075      	beq.n	800690a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800681e:	4ba3      	ldr	r3, [pc, #652]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b04      	cmp	r3, #4
 8006828:	d00c      	beq.n	8006844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682a:	4ba0      	ldr	r3, [pc, #640]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006832:	2b08      	cmp	r3, #8
 8006834:	d112      	bne.n	800685c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006836:	4b9d      	ldr	r3, [pc, #628]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006842:	d10b      	bne.n	800685c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006844:	4b99      	ldr	r3, [pc, #612]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d05b      	beq.n	8006908 <HAL_RCC_OscConfig+0x108>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d157      	bne.n	8006908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e236      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006864:	d106      	bne.n	8006874 <HAL_RCC_OscConfig+0x74>
 8006866:	4b91      	ldr	r3, [pc, #580]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a90      	ldr	r2, [pc, #576]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800686c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e01d      	b.n	80068b0 <HAL_RCC_OscConfig+0xb0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0x98>
 800687e:	4b8b      	ldr	r3, [pc, #556]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a8a      	ldr	r2, [pc, #552]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4b88      	ldr	r3, [pc, #544]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a87      	ldr	r2, [pc, #540]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e00b      	b.n	80068b0 <HAL_RCC_OscConfig+0xb0>
 8006898:	4b84      	ldr	r3, [pc, #528]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a83      	ldr	r2, [pc, #524]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800689e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	4b81      	ldr	r3, [pc, #516]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a80      	ldr	r2, [pc, #512]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 80068aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d013      	beq.n	80068e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fd fc3e 	bl	8004138 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fd fc3a 	bl	8004138 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1fb      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	4b76      	ldr	r3, [pc, #472]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0xc0>
 80068de:	e014      	b.n	800690a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fd fc2a 	bl	8004138 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e8:	f7fd fc26 	bl	8004138 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	; 0x64
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e1e7      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fa:	4b6c      	ldr	r3, [pc, #432]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0xe8>
 8006906:	e000      	b.n	800690a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d063      	beq.n	80069de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006916:	4b65      	ldr	r3, [pc, #404]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 030c 	and.w	r3, r3, #12
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006922:	4b62      	ldr	r3, [pc, #392]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800692a:	2b08      	cmp	r3, #8
 800692c:	d11c      	bne.n	8006968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800692e:	4b5f      	ldr	r3, [pc, #380]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d116      	bne.n	8006968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693a:	4b5c      	ldr	r3, [pc, #368]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_RCC_OscConfig+0x152>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e1bb      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006952:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4952      	ldr	r1, [pc, #328]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006966:	e03a      	b.n	80069de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006970:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <HAL_RCC_OscConfig+0x2b0>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006976:	f7fd fbdf 	bl	8004138 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800697e:	f7fd fbdb 	bl	8004138 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e19c      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006990:	4b46      	ldr	r3, [pc, #280]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699c:	4b43      	ldr	r3, [pc, #268]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4940      	ldr	r1, [pc, #256]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]
 80069b0:	e015      	b.n	80069de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b2:	4b3f      	ldr	r3, [pc, #252]	; (8006ab0 <HAL_RCC_OscConfig+0x2b0>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fd fbbe 	bl	8004138 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c0:	f7fd fbba 	bl	8004138 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e17b      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d2:	4b36      	ldr	r3, [pc, #216]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d030      	beq.n	8006a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d016      	beq.n	8006a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f2:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <HAL_RCC_OscConfig+0x2b4>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f8:	f7fd fb9e 	bl	8004138 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a00:	f7fd fb9a 	bl	8004138 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e15b      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a12:	4b26      	ldr	r3, [pc, #152]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x200>
 8006a1e:	e015      	b.n	8006a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a20:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <HAL_RCC_OscConfig+0x2b4>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a26:	f7fd fb87 	bl	8004138 <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a2e:	f7fd fb83 	bl	8004138 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e144      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a40:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f0      	bne.n	8006a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80a0 	beq.w	8006b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a5e:	4b13      	ldr	r3, [pc, #76]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10f      	bne.n	8006a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a78:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a86:	2301      	movs	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <HAL_RCC_OscConfig+0x2b8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d121      	bne.n	8006ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <HAL_RCC_OscConfig+0x2b8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a07      	ldr	r2, [pc, #28]	; (8006ab8 <HAL_RCC_OscConfig+0x2b8>)
 8006a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa2:	f7fd fb49 	bl	8004138 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa8:	e011      	b.n	8006ace <HAL_RCC_OscConfig+0x2ce>
 8006aaa:	bf00      	nop
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	42470000 	.word	0x42470000
 8006ab4:	42470e80 	.word	0x42470e80
 8006ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006abc:	f7fd fb3c 	bl	8004138 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e0fd      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ace:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <HAL_RCC_OscConfig+0x4d4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d106      	bne.n	8006af0 <HAL_RCC_OscConfig+0x2f0>
 8006ae2:	4b7d      	ldr	r3, [pc, #500]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	4a7c      	ldr	r2, [pc, #496]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	6713      	str	r3, [r2, #112]	; 0x70
 8006aee:	e01c      	b.n	8006b2a <HAL_RCC_OscConfig+0x32a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b05      	cmp	r3, #5
 8006af6:	d10c      	bne.n	8006b12 <HAL_RCC_OscConfig+0x312>
 8006af8:	4b77      	ldr	r3, [pc, #476]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	4a76      	ldr	r2, [pc, #472]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006afe:	f043 0304 	orr.w	r3, r3, #4
 8006b02:	6713      	str	r3, [r2, #112]	; 0x70
 8006b04:	4b74      	ldr	r3, [pc, #464]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	4a73      	ldr	r2, [pc, #460]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b10:	e00b      	b.n	8006b2a <HAL_RCC_OscConfig+0x32a>
 8006b12:	4b71      	ldr	r3, [pc, #452]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a70      	ldr	r2, [pc, #448]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1e:	4b6e      	ldr	r3, [pc, #440]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	4a6d      	ldr	r2, [pc, #436]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d015      	beq.n	8006b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b32:	f7fd fb01 	bl	8004138 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b38:	e00a      	b.n	8006b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3a:	f7fd fafd 	bl	8004138 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e0bc      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b50:	4b61      	ldr	r3, [pc, #388]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0ee      	beq.n	8006b3a <HAL_RCC_OscConfig+0x33a>
 8006b5c:	e014      	b.n	8006b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b5e:	f7fd faeb 	bl	8004138 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b66:	f7fd fae7 	bl	8004138 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e0a6      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b7c:	4b56      	ldr	r3, [pc, #344]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ee      	bne.n	8006b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8e:	4b52      	ldr	r3, [pc, #328]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	4a51      	ldr	r2, [pc, #324]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 8092 	beq.w	8006cc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ba4:	4b4c      	ldr	r3, [pc, #304]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 030c 	and.w	r3, r3, #12
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d05c      	beq.n	8006c6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d141      	bne.n	8006c3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb8:	4b48      	ldr	r3, [pc, #288]	; (8006cdc <HAL_RCC_OscConfig+0x4dc>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fd fabb 	bl	8004138 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fd fab7 	bl	8004138 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e078      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1f0      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	019b      	lsls	r3, r3, #6
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	4933      	ldr	r1, [pc, #204]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c0e:	4b33      	ldr	r3, [pc, #204]	; (8006cdc <HAL_RCC_OscConfig+0x4dc>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fd fa90 	bl	8004138 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fd fa8c 	bl	8004138 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e04d      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0x41c>
 8006c3a:	e045      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3c:	4b27      	ldr	r3, [pc, #156]	; (8006cdc <HAL_RCC_OscConfig+0x4dc>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c42:	f7fd fa79 	bl	8004138 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4a:	f7fd fa75 	bl	8004138 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e036      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5c:	4b1e      	ldr	r3, [pc, #120]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f0      	bne.n	8006c4a <HAL_RCC_OscConfig+0x44a>
 8006c68:	e02e      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e029      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c76:	4b18      	ldr	r3, [pc, #96]	; (8006cd8 <HAL_RCC_OscConfig+0x4d8>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d11c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d115      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d10d      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d106      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40007000 	.word	0x40007000
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	42470060 	.word	0x42470060

08006ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0cc      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf4:	4b68      	ldr	r3, [pc, #416]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d90c      	bls.n	8006d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d02:	4b65      	ldr	r3, [pc, #404]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0a:	4b63      	ldr	r3, [pc, #396]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d001      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0b8      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d020      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d34:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4a58      	ldr	r2, [pc, #352]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d4c:	4b53      	ldr	r3, [pc, #332]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4a52      	ldr	r2, [pc, #328]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d58:	4b50      	ldr	r3, [pc, #320]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	494d      	ldr	r1, [pc, #308]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d044      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7e:	4b47      	ldr	r3, [pc, #284]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d119      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e07f      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d003      	beq.n	8006d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d107      	bne.n	8006dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9e:	4b3f      	ldr	r3, [pc, #252]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e06f      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dae:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e067      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dbe:	4b37      	ldr	r3, [pc, #220]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f023 0203 	bic.w	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4934      	ldr	r1, [pc, #208]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dd0:	f7fd f9b2 	bl	8004138 <HAL_GetTick>
 8006dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	e00a      	b.n	8006dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd8:	f7fd f9ae 	bl	8004138 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e04f      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dee:	4b2b      	ldr	r3, [pc, #172]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 020c 	and.w	r2, r3, #12
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d1eb      	bne.n	8006dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d20c      	bcs.n	8006e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b20      	ldr	r3, [pc, #128]	; (8006e98 <HAL_RCC_ClockConfig+0x1b8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e032      	b.n	8006e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e34:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4916      	ldr	r1, [pc, #88]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	490e      	ldr	r1, [pc, #56]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e66:	f000 f821 	bl	8006eac <HAL_RCC_GetSysClockFreq>
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e78:	5cd3      	ldrb	r3, [r2, r3]
 8006e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8006e7e:	4a09      	ldr	r2, [pc, #36]	; (8006ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e82:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fd f912 	bl	80040b0 <HAL_InitTick>

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023c00 	.word	0x40023c00
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	080083b0 	.word	0x080083b0
 8006ea4:	20000008 	.word	0x20000008
 8006ea8:	2000000c 	.word	0x2000000c

08006eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ec2:	4b63      	ldr	r3, [pc, #396]	; (8007050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d007      	beq.n	8006ede <HAL_RCC_GetSysClockFreq+0x32>
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d008      	beq.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x38>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80b4 	bne.w	8007040 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ed8:	4b5e      	ldr	r3, [pc, #376]	; (8007054 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006eda:	60bb      	str	r3, [r7, #8]
       break;
 8006edc:	e0b3      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ede:	4b5e      	ldr	r3, [pc, #376]	; (8007058 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006ee0:	60bb      	str	r3, [r7, #8]
      break;
 8006ee2:	e0b0      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ee4:	4b5a      	ldr	r3, [pc, #360]	; (8007050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eee:	4b58      	ldr	r3, [pc, #352]	; (8007050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d04a      	beq.n	8006f90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efa:	4b55      	ldr	r3, [pc, #340]	; (8007050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	f04f 0400 	mov.w	r4, #0
 8006f04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	ea03 0501 	and.w	r5, r3, r1
 8006f10:	ea04 0602 	and.w	r6, r4, r2
 8006f14:	4629      	mov	r1, r5
 8006f16:	4632      	mov	r2, r6
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	f04f 0400 	mov.w	r4, #0
 8006f20:	0154      	lsls	r4, r2, #5
 8006f22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f26:	014b      	lsls	r3, r1, #5
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	1b49      	subs	r1, r1, r5
 8006f2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	f04f 0400 	mov.w	r4, #0
 8006f3a:	0194      	lsls	r4, r2, #6
 8006f3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f40:	018b      	lsls	r3, r1, #6
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	eb64 0402 	sbc.w	r4, r4, r2
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	00e2      	lsls	r2, r4, #3
 8006f52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f56:	00d9      	lsls	r1, r3, #3
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4614      	mov	r4, r2
 8006f5c:	195b      	adds	r3, r3, r5
 8006f5e:	eb44 0406 	adc.w	r4, r4, r6
 8006f62:	f04f 0100 	mov.w	r1, #0
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	0262      	lsls	r2, r4, #9
 8006f6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006f70:	0259      	lsls	r1, r3, #9
 8006f72:	460b      	mov	r3, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	4621      	mov	r1, r4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f04f 0400 	mov.w	r4, #0
 8006f80:	461a      	mov	r2, r3
 8006f82:	4623      	mov	r3, r4
 8006f84:	f7f9 f932 	bl	80001ec <__aeabi_uldivmod>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	e049      	b.n	8007024 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f90:	4b2f      	ldr	r3, [pc, #188]	; (8007050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	099b      	lsrs	r3, r3, #6
 8006f96:	f04f 0400 	mov.w	r4, #0
 8006f9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	ea03 0501 	and.w	r5, r3, r1
 8006fa6:	ea04 0602 	and.w	r6, r4, r2
 8006faa:	4629      	mov	r1, r5
 8006fac:	4632      	mov	r2, r6
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	f04f 0400 	mov.w	r4, #0
 8006fb6:	0154      	lsls	r4, r2, #5
 8006fb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006fbc:	014b      	lsls	r3, r1, #5
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	1b49      	subs	r1, r1, r5
 8006fc4:	eb62 0206 	sbc.w	r2, r2, r6
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	f04f 0400 	mov.w	r4, #0
 8006fd0:	0194      	lsls	r4, r2, #6
 8006fd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fd6:	018b      	lsls	r3, r1, #6
 8006fd8:	1a5b      	subs	r3, r3, r1
 8006fda:	eb64 0402 	sbc.w	r4, r4, r2
 8006fde:	f04f 0100 	mov.w	r1, #0
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	00e2      	lsls	r2, r4, #3
 8006fe8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fec:	00d9      	lsls	r1, r3, #3
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	195b      	adds	r3, r3, r5
 8006ff4:	eb44 0406 	adc.w	r4, r4, r6
 8006ff8:	f04f 0100 	mov.w	r1, #0
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	02a2      	lsls	r2, r4, #10
 8007002:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007006:	0299      	lsls	r1, r3, #10
 8007008:	460b      	mov	r3, r1
 800700a:	4614      	mov	r4, r2
 800700c:	4618      	mov	r0, r3
 800700e:	4621      	mov	r1, r4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f04f 0400 	mov.w	r4, #0
 8007016:	461a      	mov	r2, r3
 8007018:	4623      	mov	r3, r4
 800701a:	f7f9 f8e7 	bl	80001ec <__aeabi_uldivmod>
 800701e:	4603      	mov	r3, r0
 8007020:	460c      	mov	r4, r1
 8007022:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	3301      	adds	r3, #1
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	60bb      	str	r3, [r7, #8]
      break;
 800703e:	e002      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007042:	60bb      	str	r3, [r7, #8]
      break;
 8007044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007046:	68bb      	ldr	r3, [r7, #8]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007050:	40023800 	.word	0x40023800
 8007054:	00f42400 	.word	0x00f42400
 8007058:	007a1200 	.word	0x007a1200

0800705c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <HAL_RCC_GetHCLKFreq+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000008 	.word	0x20000008

08007074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007078:	f7ff fff0 	bl	800705c <HAL_RCC_GetHCLKFreq>
 800707c:	4601      	mov	r1, r0
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0a9b      	lsrs	r3, r3, #10
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4a03      	ldr	r2, [pc, #12]	; (8007098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800708a:	5cd3      	ldrb	r3, [r2, r3]
 800708c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40023800 	.word	0x40023800
 8007098:	080083c0 	.word	0x080083c0

0800709c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d105      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d035      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070c4:	4b62      	ldr	r3, [pc, #392]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070ca:	f7fd f835 	bl	8004138 <HAL_GetTick>
 80070ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070d0:	e008      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070d2:	f7fd f831 	bl	8004138 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e0b0      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070e4:	4b5b      	ldr	r3, [pc, #364]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f0      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	019a      	lsls	r2, r3, #6
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	071b      	lsls	r3, r3, #28
 80070fc:	4955      	ldr	r1, [pc, #340]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007104:	4b52      	ldr	r3, [pc, #328]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007106:	2201      	movs	r2, #1
 8007108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800710a:	f7fd f815 	bl	8004138 <HAL_GetTick>
 800710e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007110:	e008      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007112:	f7fd f811 	bl	8004138 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e090      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007124:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0f0      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8083 	beq.w	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	4b44      	ldr	r3, [pc, #272]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	4a43      	ldr	r2, [pc, #268]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714c:	6413      	str	r3, [r2, #64]	; 0x40
 800714e:	4b41      	ldr	r3, [pc, #260]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800715a:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3e      	ldr	r2, [pc, #248]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007164:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007166:	f7fc ffe7 	bl	8004138 <HAL_GetTick>
 800716a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800716c:	e008      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800716e:	f7fc ffe3 	bl	8004138 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e062      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007180:	4b35      	ldr	r3, [pc, #212]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0f0      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800718c:	4b31      	ldr	r3, [pc, #196]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007194:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02f      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d028      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071aa:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071b4:	4b29      	ldr	r3, [pc, #164]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071ba:	4b28      	ldr	r3, [pc, #160]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071c0:	4a24      	ldr	r2, [pc, #144]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071c6:	4b23      	ldr	r3, [pc, #140]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d114      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071d2:	f7fc ffb1 	bl	8004138 <HAL_GetTick>
 80071d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071da:	f7fc ffad 	bl	8004138 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e02a      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f0:	4b18      	ldr	r3, [pc, #96]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0ee      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007208:	d10d      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800721a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721e:	490d      	ldr	r1, [pc, #52]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007220:	4313      	orrs	r3, r2
 8007222:	608b      	str	r3, [r1, #8]
 8007224:	e005      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007226:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	4a0a      	ldr	r2, [pc, #40]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800722c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007230:	6093      	str	r3, [r2, #8]
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800723e:	4905      	ldr	r1, [pc, #20]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007240:	4313      	orrs	r3, r2
 8007242:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	42470068 	.word	0x42470068
 8007254:	40023800 	.word	0x40023800
 8007258:	40007000 	.word	0x40007000
 800725c:	42470e40 	.word	0x42470e40

08007260 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d13d      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800727e:	4b22      	ldr	r3, [pc, #136]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007286:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800728e:	2b01      	cmp	r3, #1
 8007290:	d12f      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007292:	4b1e      	ldr	r3, [pc, #120]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007294:	617b      	str	r3, [r7, #20]
          break;
 8007296:	e02f      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a4:	d108      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072a6:	4b18      	ldr	r3, [pc, #96]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ae:	4a18      	ldr	r2, [pc, #96]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	e007      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072c0:	4a14      	ldr	r2, [pc, #80]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80072c8:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80072ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ce:	099b      	lsrs	r3, r3, #6
 80072d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80072de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e2:	0f1b      	lsrs	r3, r3, #28
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	617b      	str	r3, [r7, #20]
          break;
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
          break;
 80072f6:	bf00      	nop
        }
      }
      break;
 80072f8:	bf00      	nop
    }
  }
  return frequency;
 80072fa:	697b      	ldr	r3, [r7, #20]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40023800 	.word	0x40023800
 800730c:	00bb8000 	.word	0x00bb8000
 8007310:	007a1200 	.word	0x007a1200
 8007314:	00f42400 	.word	0x00f42400

08007318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e056      	b.n	80073d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fc fd9f 	bl	8003e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007360:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	ea42 0103 	orr.w	r1, r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	0c1b      	lsrs	r3, r3, #16
 80073a8:	f003 0104 	and.w	r1, r3, #4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69da      	ldr	r2, [r3, #28]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_SPI_Transmit+0x22>
 80073fe:	2302      	movs	r3, #2
 8007400:	e11e      	b.n	8007640 <HAL_SPI_Transmit+0x260>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800740a:	f7fc fe95 	bl	8004138 <HAL_GetTick>
 800740e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	d002      	beq.n	8007426 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007420:	2302      	movs	r3, #2
 8007422:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007424:	e103      	b.n	800762e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_SPI_Transmit+0x52>
 800742c:	88fb      	ldrh	r3, [r7, #6]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d102      	bne.n	8007438 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007436:	e0fa      	b.n	800762e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2203      	movs	r2, #3
 800743c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	88fa      	ldrh	r2, [r7, #6]
 8007450:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747e:	d107      	bne.n	8007490 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800748e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d007      	beq.n	80074ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b6:	d14b      	bne.n	8007550 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_SPI_Transmit+0xe6>
 80074c0:	8afb      	ldrh	r3, [r7, #22]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d13e      	bne.n	8007544 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	881a      	ldrh	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074ea:	e02b      	b.n	8007544 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d112      	bne.n	8007520 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
 800751e:	e011      	b.n	8007544 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007520:	f7fc fe0a 	bl	8004138 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d803      	bhi.n	8007538 <HAL_SPI_Transmit+0x158>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d102      	bne.n	800753e <HAL_SPI_Transmit+0x15e>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007542:	e074      	b.n	800762e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1ce      	bne.n	80074ec <HAL_SPI_Transmit+0x10c>
 800754e:	e04c      	b.n	80075ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_SPI_Transmit+0x17e>
 8007558:	8afb      	ldrh	r3, [r7, #22]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d140      	bne.n	80075e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007584:	e02c      	b.n	80075e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b02      	cmp	r3, #2
 8007592:	d113      	bne.n	80075bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	7812      	ldrb	r2, [r2, #0]
 80075a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ba:	e011      	b.n	80075e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075bc:	f7fc fdbc 	bl	8004138 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d803      	bhi.n	80075d4 <HAL_SPI_Transmit+0x1f4>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d102      	bne.n	80075da <HAL_SPI_Transmit+0x1fa>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075de:	e026      	b.n	800762e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1cd      	bne.n	8007586 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa44 	bl	8007a7c <SPI_EndRxTxTransaction>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	77fb      	strb	r3, [r7, #31]
 800762a:	e000      	b.n	800762e <HAL_SPI_Transmit+0x24e>
  }

error:
 800762c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800763e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08c      	sub	sp, #48	; 0x30
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007656:	2301      	movs	r3, #1
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_SPI_TransmitReceive+0x26>
 800766a:	2302      	movs	r3, #2
 800766c:	e18a      	b.n	8007984 <HAL_SPI_TransmitReceive+0x33c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007676:	f7fc fd5f 	bl	8004138 <HAL_GetTick>
 800767a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007694:	2b01      	cmp	r3, #1
 8007696:	d00f      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0x70>
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800769e:	d107      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x68>
 80076a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d003      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076b6:	e15b      	b.n	8007970 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_SPI_TransmitReceive+0x82>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_SPI_TransmitReceive+0x82>
 80076c4:	887b      	ldrh	r3, [r7, #2]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076d0:	e14e      	b.n	8007970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d003      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2205      	movs	r2, #5
 80076e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	887a      	ldrh	r2, [r7, #2]
 80076f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	887a      	ldrh	r2, [r7, #2]
 80076fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	887a      	ldrh	r2, [r7, #2]
 8007708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	887a      	ldrh	r2, [r7, #2]
 800770e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b40      	cmp	r3, #64	; 0x40
 8007728:	d007      	beq.n	800773a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007742:	d178      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x10a>
 800774c:	8b7b      	ldrh	r3, [r7, #26]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d166      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	881a      	ldrh	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007776:	e053      	b.n	8007820 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b02      	cmp	r3, #2
 8007784:	d11b      	bne.n	80077be <HAL_SPI_TransmitReceive+0x176>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <HAL_SPI_TransmitReceive+0x176>
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	2b01      	cmp	r3, #1
 8007794:	d113      	bne.n	80077be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d119      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x1b8>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d014      	beq.n	8007800 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	b292      	uxth	r2, r2
 80077e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077fc:	2301      	movs	r3, #1
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007800:	f7fc fc9a 	bl	8004138 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800780c:	429a      	cmp	r2, r3
 800780e:	d807      	bhi.n	8007820 <HAL_SPI_TransmitReceive+0x1d8>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d003      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800781e:	e0a7      	b.n	8007970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1a6      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x130>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1a1      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x130>
 8007834:	e07c      	b.n	8007930 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x1fc>
 800783e:	8b7b      	ldrh	r3, [r7, #26]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d16b      	bne.n	800791c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	7812      	ldrb	r2, [r2, #0]
 8007850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800786a:	e057      	b.n	800791c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d11c      	bne.n	80078b4 <HAL_SPI_TransmitReceive+0x26c>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d017      	beq.n	80078b4 <HAL_SPI_TransmitReceive+0x26c>
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d114      	bne.n	80078b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d119      	bne.n	80078f6 <HAL_SPI_TransmitReceive+0x2ae>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d014      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078f2:	2301      	movs	r3, #1
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078f6:	f7fc fc1f 	bl	8004138 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007902:	429a      	cmp	r2, r3
 8007904:	d803      	bhi.n	800790e <HAL_SPI_TransmitReceive+0x2c6>
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d102      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x2cc>
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800791a:	e029      	b.n	8007970 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1a2      	bne.n	800786c <HAL_SPI_TransmitReceive+0x224>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d19d      	bne.n	800786c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f8a1 	bl	8007a7c <SPI_EndRxTxTransaction>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d006      	beq.n	800794e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2220      	movs	r2, #32
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800794c:	e010      	b.n	8007970 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	e000      	b.n	8007970 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800796e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007984:	4618      	mov	r0, r3
 8007986:	3730      	adds	r7, #48	; 0x30
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800799a:	b2db      	uxtb	r3, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079b8:	e04c      	b.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d048      	beq.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079c2:	f7fc fbb9 	bl	8004138 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d902      	bls.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d13d      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f0:	d111      	bne.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fa:	d004      	beq.n	8007a06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a04:	d107      	bne.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1e:	d10f      	bne.n	8007a40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e00f      	b.n	8007a74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	bf0c      	ite	eq
 8007a64:	2301      	moveq	r3, #1
 8007a66:	2300      	movne	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d1a3      	bne.n	80079ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a88:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <SPI_EndRxTxTransaction+0x7c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <SPI_EndRxTxTransaction+0x80>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	0d5b      	lsrs	r3, r3, #21
 8007a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa6:	d112      	bne.n	8007ace <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2180      	movs	r1, #128	; 0x80
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff ff78 	bl	80079a8 <SPI_WaitFlagStateUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	f043 0220 	orr.w	r2, r3, #32
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e00f      	b.n	8007aee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b80      	cmp	r3, #128	; 0x80
 8007ae6:	d0f2      	beq.n	8007ace <SPI_EndRxTxTransaction+0x52>
 8007ae8:	e000      	b.n	8007aec <SPI_EndRxTxTransaction+0x70>
        break;
 8007aea:	bf00      	nop
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000008 	.word	0x20000008
 8007afc:	165e9f81 	.word	0x165e9f81

08007b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e01d      	b.n	8007b4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fc f9f6 	bl	8003f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f000 fa14 	bl	8007f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b06      	cmp	r3, #6
 8007b7e:	d007      	beq.n	8007b90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d122      	bne.n	8007bfa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d11b      	bne.n	8007bfa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f06f 0202 	mvn.w	r2, #2
 8007bca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f9a5 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 8007be6:	e005      	b.n	8007bf4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f997 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f9a8 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d122      	bne.n	8007c4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d11b      	bne.n	8007c4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f06f 0204 	mvn.w	r2, #4
 8007c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f97b 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 8007c3a:	e005      	b.n	8007c48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f96d 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f97e 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d122      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d11b      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f06f 0208 	mvn.w	r2, #8
 8007c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2204      	movs	r2, #4
 8007c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f951 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 8007c8e:	e005      	b.n	8007c9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f943 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f954 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d122      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d11b      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f06f 0210 	mvn.w	r2, #16
 8007cc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2208      	movs	r2, #8
 8007ccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f927 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 8007ce2:	e005      	b.n	8007cf0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f919 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f92a 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d10e      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d107      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f06f 0201 	mvn.w	r2, #1
 8007d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7fb fc9b 	bl	8003658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2c:	2b80      	cmp	r3, #128	; 0x80
 8007d2e:	d10e      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b80      	cmp	r3, #128	; 0x80
 8007d3c:	d107      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 facf 	bl	80082ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d10e      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d107      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8ef 	bl	8007f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d10e      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0220 	mvn.w	r2, #32
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa99 	bl	80082d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_TIM_ConfigClockSource+0x18>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e0a6      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x166>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007de4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d067      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x120>
 8007dfe:	2b40      	cmp	r3, #64	; 0x40
 8007e00:	d80b      	bhi.n	8007e1a <HAL_TIM_ConfigClockSource+0x6c>
 8007e02:	2b10      	cmp	r3, #16
 8007e04:	d073      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x140>
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d802      	bhi.n	8007e10 <HAL_TIM_ConfigClockSource+0x62>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d06f      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007e0e:	e078      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d06c      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x140>
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d06a      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007e18:	e073      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e1a:	2b70      	cmp	r3, #112	; 0x70
 8007e1c:	d00d      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x8c>
 8007e1e:	2b70      	cmp	r3, #112	; 0x70
 8007e20:	d804      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x7e>
 8007e22:	2b50      	cmp	r3, #80	; 0x50
 8007e24:	d033      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0xe0>
 8007e26:	2b60      	cmp	r3, #96	; 0x60
 8007e28:	d041      	beq.n	8007eae <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007e2a:	e06a      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e30:	d066      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0x152>
 8007e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e36:	d017      	beq.n	8007e68 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007e38:	e063      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6899      	ldr	r1, [r3, #8]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f000 f9a9 	bl	80081a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	609a      	str	r2, [r3, #8]
      break;
 8007e66:	e04c      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	6899      	ldr	r1, [r3, #8]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f000 f992 	bl	80081a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e8a:	609a      	str	r2, [r3, #8]
      break;
 8007e8c:	e039      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6859      	ldr	r1, [r3, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f000 f906 	bl	80080ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2150      	movs	r1, #80	; 0x50
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f95f 	bl	800816a <TIM_ITRx_SetConfig>
      break;
 8007eac:	e029      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6859      	ldr	r1, [r3, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f000 f925 	bl	800810a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2160      	movs	r1, #96	; 0x60
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f94f 	bl	800816a <TIM_ITRx_SetConfig>
      break;
 8007ecc:	e019      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6859      	ldr	r1, [r3, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f000 f8e6 	bl	80080ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2140      	movs	r1, #64	; 0x40
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f93f 	bl	800816a <TIM_ITRx_SetConfig>
      break;
 8007eec:	e009      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f000 f936 	bl	800816a <TIM_ITRx_SetConfig>
      break;
 8007efe:	e000      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007f00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a40      	ldr	r2, [pc, #256]	; (8008080 <TIM_Base_SetConfig+0x114>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d013      	beq.n	8007fac <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8a:	d00f      	beq.n	8007fac <TIM_Base_SetConfig+0x40>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a3d      	ldr	r2, [pc, #244]	; (8008084 <TIM_Base_SetConfig+0x118>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00b      	beq.n	8007fac <TIM_Base_SetConfig+0x40>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a3c      	ldr	r2, [pc, #240]	; (8008088 <TIM_Base_SetConfig+0x11c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d007      	beq.n	8007fac <TIM_Base_SetConfig+0x40>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a3b      	ldr	r2, [pc, #236]	; (800808c <TIM_Base_SetConfig+0x120>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_Base_SetConfig+0x40>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a3a      	ldr	r2, [pc, #232]	; (8008090 <TIM_Base_SetConfig+0x124>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d108      	bne.n	8007fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2f      	ldr	r2, [pc, #188]	; (8008080 <TIM_Base_SetConfig+0x114>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d02b      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fcc:	d027      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2c      	ldr	r2, [pc, #176]	; (8008084 <TIM_Base_SetConfig+0x118>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d023      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2b      	ldr	r2, [pc, #172]	; (8008088 <TIM_Base_SetConfig+0x11c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d01f      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2a      	ldr	r2, [pc, #168]	; (800808c <TIM_Base_SetConfig+0x120>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01b      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a29      	ldr	r2, [pc, #164]	; (8008090 <TIM_Base_SetConfig+0x124>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d017      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a28      	ldr	r2, [pc, #160]	; (8008094 <TIM_Base_SetConfig+0x128>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a27      	ldr	r2, [pc, #156]	; (8008098 <TIM_Base_SetConfig+0x12c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00f      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a26      	ldr	r2, [pc, #152]	; (800809c <TIM_Base_SetConfig+0x130>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00b      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a25      	ldr	r2, [pc, #148]	; (80080a0 <TIM_Base_SetConfig+0x134>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a24      	ldr	r2, [pc, #144]	; (80080a4 <TIM_Base_SetConfig+0x138>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a23      	ldr	r2, [pc, #140]	; (80080a8 <TIM_Base_SetConfig+0x13c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d108      	bne.n	8008030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a0a      	ldr	r2, [pc, #40]	; (8008080 <TIM_Base_SetConfig+0x114>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d003      	beq.n	8008064 <TIM_Base_SetConfig+0xf8>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a0c      	ldr	r2, [pc, #48]	; (8008090 <TIM_Base_SetConfig+0x124>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d103      	bne.n	800806c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	691a      	ldr	r2, [r3, #16]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	615a      	str	r2, [r3, #20]
}
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000
 8008084:	40000400 	.word	0x40000400
 8008088:	40000800 	.word	0x40000800
 800808c:	40000c00 	.word	0x40000c00
 8008090:	40010400 	.word	0x40010400
 8008094:	40014000 	.word	0x40014000
 8008098:	40014400 	.word	0x40014400
 800809c:	40014800 	.word	0x40014800
 80080a0:	40001800 	.word	0x40001800
 80080a4:	40001c00 	.word	0x40001c00
 80080a8:	40002000 	.word	0x40002000

080080ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0201 	bic.w	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 030a 	bic.w	r3, r3, #10
 80080e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800810a:	b480      	push	{r7}
 800810c:	b087      	sub	sp, #28
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f023 0210 	bic.w	r2, r3, #16
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	031b      	lsls	r3, r3, #12
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	f043 0307 	orr.w	r3, r3, #7
 800818c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	609a      	str	r2, [r3, #8]
}
 8008194:	bf00      	nop
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	021a      	lsls	r2, r3, #8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	431a      	orrs	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	609a      	str	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e05a      	b.n	80082ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a21      	ldr	r2, [pc, #132]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008244:	d01d      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1a      	ldr	r2, [pc, #104]	; (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a18      	ldr	r2, [pc, #96]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d10c      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4313      	orrs	r3, r2
 8008292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40000400 	.word	0x40000400
 80082c4:	40000800 	.word	0x40000800
 80082c8:	40000c00 	.word	0x40000c00
 80082cc:	40010400 	.word	0x40010400
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40001800 	.word	0x40001800

080082d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <__libc_init_array>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	4e0d      	ldr	r6, [pc, #52]	; (8008338 <__libc_init_array+0x38>)
 8008304:	4c0d      	ldr	r4, [pc, #52]	; (800833c <__libc_init_array+0x3c>)
 8008306:	1ba4      	subs	r4, r4, r6
 8008308:	10a4      	asrs	r4, r4, #2
 800830a:	2500      	movs	r5, #0
 800830c:	42a5      	cmp	r5, r4
 800830e:	d109      	bne.n	8008324 <__libc_init_array+0x24>
 8008310:	4e0b      	ldr	r6, [pc, #44]	; (8008340 <__libc_init_array+0x40>)
 8008312:	4c0c      	ldr	r4, [pc, #48]	; (8008344 <__libc_init_array+0x44>)
 8008314:	f000 f820 	bl	8008358 <_init>
 8008318:	1ba4      	subs	r4, r4, r6
 800831a:	10a4      	asrs	r4, r4, #2
 800831c:	2500      	movs	r5, #0
 800831e:	42a5      	cmp	r5, r4
 8008320:	d105      	bne.n	800832e <__libc_init_array+0x2e>
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008328:	4798      	blx	r3
 800832a:	3501      	adds	r5, #1
 800832c:	e7ee      	b.n	800830c <__libc_init_array+0xc>
 800832e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008332:	4798      	blx	r3
 8008334:	3501      	adds	r5, #1
 8008336:	e7f2      	b.n	800831e <__libc_init_array+0x1e>
 8008338:	080083d8 	.word	0x080083d8
 800833c:	080083d8 	.word	0x080083d8
 8008340:	080083d8 	.word	0x080083d8
 8008344:	080083dc 	.word	0x080083dc

08008348 <memset>:
 8008348:	4402      	add	r2, r0
 800834a:	4603      	mov	r3, r0
 800834c:	4293      	cmp	r3, r2
 800834e:	d100      	bne.n	8008352 <memset+0xa>
 8008350:	4770      	bx	lr
 8008352:	f803 1b01 	strb.w	r1, [r3], #1
 8008356:	e7f9      	b.n	800834c <memset+0x4>

08008358 <_init>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	bf00      	nop
 800835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835e:	bc08      	pop	{r3}
 8008360:	469e      	mov	lr, r3
 8008362:	4770      	bx	lr

08008364 <_fini>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	bf00      	nop
 8008368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836a:	bc08      	pop	{r3}
 800836c:	469e      	mov	lr, r3
 800836e:	4770      	bx	lr
